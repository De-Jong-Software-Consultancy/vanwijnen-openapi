{
  "openapi": "3.1.0",
  "info": {
    "version": "1.0.0",
    "title": "TransFollow REST API",
    "contact": {
      "email": "support@transfollow.org",
      "url": "https://www.transfollow.org/contact"
    },
    "x-logo": {
      "url": "https://www.transfollow.org/wp-content/uploads/2021/04/logo_white.svg",
      "backgroundColor": "#2980B9",
      "href": "."
    },
    "description": "<h1>Welcome to TransFollow documentation!</h1>\n<div class=\"description-panel\">\n    <h2>Important info</h2>\n    <ul>\n     <li>All `date-time` values are formatted according to ISO 8601 (ISO 8601:2004): `YYYY-MM-DDThh:mm:ssZ`</li>\n     <li>All `date` values are formatted according to ISO 8601(ISO 8601:2004): `YYYY-MM-DD`</li>\n    </ul>\n</div>"
  },
  "servers": [
    {
      "url": "https://api.transfollow.com/api",
      "description": "Production environment"
    },
    {
      "url": "https://partner.transfollow.com/api",
      "description": "Partner environment"
    }
  ],
  "tags": [
    {
      "name": "iso",
      "description": "Endpoints related to iso-standard information such as country and currency codes."
    },
    {
      "name": "schemas",
      "x-displayName": "Freight Document",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/FreightDocument\" />\n"
    }
  ],
  "paths": {
    "/heartbeat": {
      "get": {
        "tags": [
          "heartbeat"
        ],
        "summary": "Heartbeat",
        "description": "Monitoring services use this endpoint to see if HTTP service is well. Returns build version and current compatibility version (see reference).\n",
        "operationId": "heartbeat",
        "security": [],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HeartbeatResponse"
                }
              }
            }
          }
        }
      }
    },
    "/oauth/token": {
      "post": {
        "tags": [
          "oauth"
        ],
        "summary": "Get Token",
        "description": "#### OAuth 2 Token call\nMost of the TransFollow server calls need the user to be authenticated. TransFollow uses the OAuth2 authentication\nscheme. Upon calling this endpoint the client will receive a short lived access token, and a refresh token.\n\n##### Access Token\nThe access token is used for authenticating with the TransFollow server, and is added to every request using\nthe `Authorization` header. The access token is short lived, and will expire after a fixed amount of time. This\namount of time is returned in the response.\n\n##### Refresh Token\nThe refresh token is used when the access token has expired. Using the refresh token the client is able to\nretrieve a new set of access / refresh tokens. To request the new set, call this endpoint using the `grant_type`\nof `refresh_token`, and provide the `refresh_token` field in the submitted body.\n\n#### Account Secret\nWhen a login is successful the response includes a field which is not specific to OAuth2: the `accountSecret`\nfield. The AccountSecret is a randomly generated string,  only accessible by the server, and by clients logging\nin with its corresponding account. It is used to generate Message Authentication Codes (MAC) used for approvals.\nThe secret is generated when an account is created.\n",
        "operationId": "oauth_token",
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "required": [
                  "grant_type",
                  "username",
                  "refresh_token",
                  "password",
                  "scope",
                  "redirect_uri"
                ],
                "properties": {
                  "grant_type": {
                    "description": "Grant type indicates the authentication method, which can either be `password`, `refresh_token` or `authorization_code`. Using the `password` method, a `username` and `password` are required to be sent with the request. When using the `refresh_token` method the previously received `refresh_token` should be sent with the request. (With the `authorization_code` and a GET method a third party can pick up a token on behalf of a registered user).\n",
                    "type": "string",
                    "enum": [
                      "password",
                      "refresh_token",
                      "authorization_code"
                    ],
                    "example": "password"
                  },
                  "username": {
                    "type": "string",
                    "description": "Your TransFollow username. This field is required when `grant_type` is `password`.",
                    "example": "api@transfollow.nl"
                  },
                  "refresh_token": {
                    "type": "string",
                    "example": "48691eb6-8192-42fd-8a07-8d18b2ad3c82",
                    "description": "Refresh Token. This field is required when `grant_type` is `refresh_token`."
                  },
                  "password": {
                    "type": "string",
                    "description": "Your TransFollow password. This field is required when `grant_type` is `password`.",
                    "example": "api-password"
                  },
                  "scope": {
                    "type": "string",
                    "description": "The scope of the access",
                    "enum": [
                      "transfollow",
                      "approval",
                      "adr",
                      "fleetmanagement"
                    ],
                    "example": "transfollow"
                  },
                  "redirect_uri": {
                    "type": "string",
                    "description": "Mandatory in combination with grant type `authorization_code`",
                    "example": "http://test.tld"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basic_auth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuthResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/oauth/logout": {
      "post": {
        "tags": [
          "oauth"
        ],
        "summary": "Logout",
        "description": "Logs the account associated with the Bearer access token out of the system. The access token and corresponding refresh token will be invalid after logging out.\n",
        "operationId": "oauth_logout",
        "security": [
          {
            "bearer": []
          },
          {
            "x-api_key": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success. No content."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/accounts/users/me": {
      "get": {
        "tags": [
          "accounts"
        ],
        "summary": "Get my account",
        "description": "Gets information about the current logged in user's account.\n",
        "operationId": "get_my_account",
        "security": [
          {
            "bearer": []
          },
          {
            "x-api_key": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      },
      "put": {
        "tags": [
          "accounts"
        ],
        "summary": "Update my account",
        "description": "Updates an existing account.\n",
        "operationId": "update_my_account",
        "security": [
          {
            "bearer": []
          },
          {
            "x-api_key": []
          }
        ],
        "requestBody": {
          "description": "Account fields to update.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Account"
              }
            }
          }
        },
        "responses": {
          "205": {
            "description": "Item updated. No content."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/accounts/users/me/clients/{clientId}/creditthreshold": {
      "put": {
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "The id of the client",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "accounts"
        ],
        "summary": "Update credits threshold",
        "description": "Updates the current distributor's client credits threshold. The usage of this endpoint is restricted to the current user which needs to be a distributor.\n",
        "operationId": "credit_threshold",
        "security": [
          {
            "bearer": []
          },
          {
            "x-api_key": []
          }
        ],
        "requestBody": {
          "description": "Account fields to update.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "distributorCreditThreshold"
                ],
                "properties": {
                  "distributorCreditThreshold": {
                    "minimum": 0,
                    "type": "integer",
                    "x-nullable": true,
                    "description": "When a distributor's client reaches the number of credits specified in the threshold, the distributor is notified by email. A null value means that not credit threshold alert is set."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "205": {
            "description": "Item updated. No content."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/accounts/users/me/notifications": {
      "get": {
        "tags": [
          "notifications"
        ],
        "summary": "Get notifications",
        "description": "Retrieve current notification settings.\n",
        "operationId": "get_account_notifications",
        "security": [
          {
            "bearer": []
          },
          {
            "x-api_key": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationSettings"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      },
      "put": {
        "tags": [
          "notifications"
        ],
        "summary": "Update notifications",
        "description": "Turn notifications on or off.\n",
        "operationId": "update_account_notifications",
        "security": [
          {
            "bearer": []
          },
          {
            "x-api_key": []
          }
        ],
        "requestBody": {
          "description": "Notifications to update.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NotificationSettings"
              }
            }
          }
        },
        "responses": {
          "205": {
            "description": "Item updated. No content."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/accounts/users/me/password": {
      "put": {
        "tags": [
          "accounts"
        ],
        "summary": "Update password",
        "description": "Creates a new password if the old password is correct. The API can reject the password if it is considered unsafe, please see the error responses for the correct error code.\n",
        "operationId": "update_password",
        "security": [
          {
            "bearer": []
          },
          {
            "x-api_key": []
          }
        ],
        "requestBody": {
          "description": "Notifications to update.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePasswordRequest"
              }
            }
          }
        },
        "responses": {
          "205": {
            "description": "Item updated. No content."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/accounts/users/me/delegate": {
      "get": {
        "tags": [
          "delegates"
        ],
        "summary": "Get delegates",
        "description": "Get the list of current delegates for this account.\n",
        "operationId": "get_delegates",
        "security": [
          {
            "bearer": []
          },
          {
            "x-api_key": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DelegateRole"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      },
      "post": {
        "tags": [
          "delegates"
        ],
        "summary": "Create delegate",
        "description": "Create a new delegate for this account for the given roles.\n",
        "requestBody": {
          "description": "Notifications to update.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DelegateRole"
              }
            }
          }
        },
        "operationId": "create_delegate",
        "security": [
          {
            "bearer": []
          },
          {
            "x-api_key": []
          }
        ],
        "responses": {
          "201": {
            "description": "Item created."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/accounts/users/me/revoke": {
      "post": {
        "tags": [
          "delegates"
        ],
        "summary": "Revoke delegation",
        "description": "Delete a delegate from the list of delegates of this account.\n",
        "operationId": "revoke_delegation",
        "security": [
          {
            "bearer": []
          },
          {
            "x-api_key": []
          }
        ],
        "requestBody": {
          "description": "Notifications to update.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DelegateRole"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Success. No content."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/accounts/users/me/subaccounts": {
      "get": {
        "tags": [
          "subaccounts"
        ],
        "summary": "Get subaccounts",
        "description": "Get the list of current sub-accounts for this account.\n",
        "operationId": "get_subaccounts",
        "security": [
          {
            "bearer": []
          },
          {
            "x-api_key": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Account"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      },
      "post": {
        "tags": [
          "subaccounts"
        ],
        "summary": "Create subaccount",
        "description": "Create a new sub-account for this account.\n",
        "operationId": "create_subaccount",
        "requestBody": {
          "description": "Properties of subaccount to create.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubaccountRequest"
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "x-api_key": []
          }
        ],
        "responses": {
          "201": {
            "description": "Item created."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/accounts/users/me/subaccounts/{accountId}": {
      "put": {
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "The id of the account",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "subaccounts"
        ],
        "summary": "Update subaccount",
        "description": "Update a sub-account of this account.\n",
        "operationId": "update_subaccount",
        "requestBody": {
          "description": "Properties of subaccount to update.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubaccountUpdateRequest"
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "x-api_key": []
          }
        ],
        "responses": {
          "205": {
            "description": "Item updated. No content."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/ResourceNotFound"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/accounts/users/me/partners": {
      "get": {
        "tags": [
          "partners"
        ],
        "summary": "Get partners",
        "description": "Get the list of partners for this account.\n",
        "operationId": "get_partners",
        "security": [
          {
            "bearer": []
          },
          {
            "x-api_key": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Partner"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      },
      "post": {
        "tags": [
          "partners"
        ],
        "summary": "Create partner",
        "description": "Create a new partner for the current account. If the account is a subaccount the partner will be added to the main account partner library.\n",
        "operationId": "create_partner",
        "requestBody": {
          "description": "Properties of the partner to create.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Partner"
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "x-api_key": []
          }
        ],
        "responses": {
          "201": {
            "description": "Item created.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "partnerId": {
                      "description": "Partner ID of the newly added partner.",
                      "type": "string",
                      "example": "1221321"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/accounts/users/me/partners/{partnerId}": {
      "get": {
        "parameters": [
          {
            "name": "partnerId",
            "in": "path",
            "description": "The id of the partner",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "partners"
        ],
        "summary": "Get partner",
        "description": "Get a partner by id for the logged in account.\n",
        "operationId": "get_partner",
        "security": [
          {
            "bearer": []
          },
          {
            "x-api_key": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Partner"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      },
      "put": {
        "parameters": [
          {
            "name": "partnerId",
            "in": "path",
            "description": "The id of the partner",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "partners"
        ],
        "summary": "Update partner",
        "description": "Update a partner.\n",
        "operationId": "update_partner",
        "security": [
          {
            "bearer": []
          },
          {
            "x-api_key": []
          }
        ],
        "requestBody": {
          "description": "Properties of the partner to update.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Partner"
              }
            }
          }
        },
        "responses": {
          "205": {
            "description": "Item updated. No content."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      },
      "delete": {
        "parameters": [
          {
            "name": "partnerId",
            "in": "path",
            "description": "The id of the partner",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "partners"
        ],
        "summary": "Delete partner",
        "description": "Delete an existing partner.\n",
        "operationId": "delete_partner",
        "security": [
          {
            "bearer": []
          },
          {
            "x-api_key": []
          }
        ],
        "responses": {
          "204": {
            "description": "Success. No content."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/accounts/users/me/partners/import": {
      "post": {
        "tags": [
          "partners"
        ],
        "summary": "Import partners",
        "description": "Create new partners for the current account.\n",
        "operationId": "import_partners",
        "security": [
          {
            "bearer": []
          },
          {
            "x-api_key": []
          }
        ],
        "requestBody": {
          "description": "Partners to import.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Partner"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Item created.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "example": [
                    "123",
                    "345"
                  ],
                  "items": {
                    "description": "List of partner ID of the newly created partners.",
                    "type": "string",
                    "example": "1221321"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/accounts/users/me/vehicles": {
      "get": {
        "tags": [
          "vehicles"
        ],
        "summary": "Get vehicles",
        "description": "Get the list of vehicles for this account.\n",
        "operationId": "get_vehicles",
        "security": [
          {
            "bearer": []
          },
          {
            "x-api_key": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Vehicle"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      },
      "post": {
        "tags": [
          "vehicles"
        ],
        "summary": "Create vehicle",
        "description": "Create a new vehicle for the current account.\n",
        "operationId": "create_vehicle",
        "requestBody": {
          "description": "Properties of the vehicle to create.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Vehicle"
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "x-api_key": []
          }
        ],
        "responses": {
          "201": {
            "description": "Item created.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "partnerId": {
                      "description": "Vehicle ID of the newly added vehicle.",
                      "type": "string",
                      "example": "1221321"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/accounts/users/me/vehicles/{vehicleId}": {
      "get": {
        "parameters": [
          {
            "name": "vehicleId",
            "example": "123",
            "in": "path",
            "description": "The id of the vehicle",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "vehicles"
        ],
        "summary": "Get vehicle",
        "description": "Get a vehicle by id for this account.\n",
        "operationId": "get_vehicle",
        "security": [
          {
            "bearer": []
          },
          {
            "x-api_key": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Vehicle"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      },
      "put": {
        "parameters": [
          {
            "name": "vehicleId",
            "example": "123",
            "in": "path",
            "description": "The id of the vehicle",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "vehicles"
        ],
        "summary": "Update vehicle",
        "description": "Update a vehicle.\n",
        "operationId": "update_vehicle",
        "security": [
          {
            "bearer": []
          },
          {
            "x-api_key": []
          }
        ],
        "requestBody": {
          "description": "Properties of the vehicle to create.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Vehicle"
              }
            }
          }
        },
        "responses": {
          "205": {
            "description": "Item updated. No content."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      },
      "delete": {
        "parameters": [
          {
            "name": "vehicleId",
            "example": "123",
            "in": "path",
            "description": "The id of the vehicle",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "vehicles"
        ],
        "summary": "Delete vehicle",
        "description": "Delete an existing vehicle.\n",
        "operationId": "delete_vehicle",
        "security": [
          {
            "bearer": []
          },
          {
            "x-api_key": []
          }
        ],
        "responses": {
          "204": {
            "description": "Success. No content."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/accounts/users/me/drivers": {
      "get": {
        "tags": [
          "drivers"
        ],
        "summary": "Get drivers",
        "description": "Get the list of drivers for this account.\n",
        "operationId": "get_drivers",
        "security": [
          {
            "bearer": []
          },
          {
            "x-api_key": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Driver"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      },
      "post": {
        "tags": [
          "drivers"
        ],
        "summary": "Create driver",
        "description": "Create a new driver for the current account.\n",
        "operationId": "create_driver",
        "requestBody": {
          "description": "Properties of the drivers to create.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Driver"
              },
              "examples": {
                "default": {
                  "value": {
                    "firstName": "John",
                    "lastName": "Smith",
                    "email": "johnsmith@company.tld",
                    "phoneNumber": "+440808080808",
                    "username": "johnsmith"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "x-api_key": []
          }
        ],
        "responses": {
          "201": {
            "description": "Item created.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "driverId": {
                      "type": "string",
                      "description": "The id of the created driver.",
                      "example": "23"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/accounts/users/me/drivers/{driverId}": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/driverId"
          }
        ],
        "tags": [
          "drivers"
        ],
        "summary": "Get driver",
        "description": "Get a driver by id for this account.\n",
        "operationId": "get_driver",
        "security": [
          {
            "bearer": []
          },
          {
            "x-api_key": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Driver"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      },
      "put": {
        "parameters": [
          {
            "$ref": "#/components/parameters/driverId"
          }
        ],
        "tags": [
          "drivers"
        ],
        "summary": "Update driver",
        "description": "Update a driver.\n",
        "operationId": "update_driver",
        "security": [
          {
            "bearer": []
          },
          {
            "x-api_key": []
          }
        ],
        "requestBody": {
          "description": "Properties of the driver to update.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Driver"
              }
            }
          }
        },
        "responses": {
          "205": {
            "description": "Item updated. No content."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/components/parameters/driverId"
          }
        ],
        "tags": [
          "drivers"
        ],
        "summary": "Delete driver",
        "description": "Delete the driver.\n",
        "operationId": "delete_driver",
        "security": [
          {
            "bearer": []
          },
          {
            "x-api_key": []
          }
        ],
        "responses": {
          "204": {
            "description": "Success. No content."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/accounts/users/me/logo": {
      "get": {
        "tags": [
          "logo"
        ],
        "summary": "Get logo",
        "description": "Get the logo.\n",
        "operationId": "get_logo",
        "security": [
          {
            "bearer": []
          },
          {
            "x-api_key": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "image/png": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      },
      "put": {
        "tags": [
          "logo"
        ],
        "summary": "Update logo",
        "description": "Upload the logo (only png is supported).\n",
        "operationId": "update_logo",
        "security": [
          {
            "bearer": []
          },
          {
            "x-api_key": []
          }
        ],
        "requestBody": {
          "content": {
            "image/png": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          }
        },
        "responses": {
          "205": {
            "description": "Item updated. No content."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      },
      "delete": {
        "tags": [
          "logo"
        ],
        "summary": "Delete logo",
        "description": "Delete the logo.\n",
        "operationId": "delete_logo",
        "security": [
          {
            "bearer": []
          },
          {
            "x-api_key": []
          }
        ],
        "responses": {
          "204": {
            "description": "Success. No content."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/accounts/users/me/subscriptions": {
      "get": {
        "tags": [
          "subscriptions"
        ],
        "summary": "Get subscriptions",
        "description": "Retrieves a list of existing subscriptions on this account..\n",
        "operationId": "get_subscriptions",
        "security": [
          {
            "bearer": []
          },
          {
            "x-api_key": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccountSubscription"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      },
      "post": {
        "tags": [
          "subscriptions"
        ],
        "summary": "Create subscription",
        "description": "Creates a new subscription on this account. When a credit is used the subscription will execute a POST call to the callback URL.\n\nTo prevent unauthorized requests to the `callbackUrl` use HTTP Basic Auth to secure it and specify the credentials in the optional `basicAuthCredentials` field. If specified the POST callback from TransFollow to the `callbackUrl` will contain the appropriate `Authorization` header. The specified `callbackUrl` should respond with a `200` HTTP response code after processing the request.\n",
        "operationId": "create_subscription",
        "security": [
          {
            "bearer": []
          },
          {
            "x-api_key": []
          }
        ],
        "requestBody": {
          "description": "Properties of the subscription to create.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountSubscription"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Item created. No content."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/accounts/users/me/subscriptions/{subscriptionId}": {
      "get": {
        "parameters": [
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The id of the subscription",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "subscriptions"
        ],
        "summary": "Get subscription",
        "description": "Retrieves an existing subscription on this account.\n",
        "operationId": "get_subscription",
        "security": [
          {
            "bearer": []
          },
          {
            "x-api_key": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountSubscription"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      },
      "put": {
        "security": [
          {
            "bearer": []
          },
          {
            "x-api_key": []
          }
        ],
        "parameters": [
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The id of the subscription",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "subscriptions"
        ],
        "summary": "Update subscription",
        "description": "Updates an existing subscription on this account.\n",
        "operationId": "update_subscription",
        "requestBody": {
          "description": "Properties of the subscription to update.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountSubscription"
              }
            }
          }
        },
        "responses": {
          "205": {
            "description": "Item updated. No content."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      },
      "delete": {
        "parameters": [
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The id of the subscription",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "subscriptions"
        ],
        "summary": "Delete subscription",
        "description": "Deletes an existing subscription on this account.\n",
        "operationId": "delete_subscription",
        "security": [
          {
            "bearer": []
          },
          {
            "x-api_key": []
          }
        ],
        "responses": {
          "204": {
            "description": "Success. No content."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/accounts/users/registerbyemail": {
      "post": {
        "tags": [
          "accounts"
        ],
        "summary": "Register with email token",
        "description": "Registers a new account with an email token. This endpoint is used when an email address is assigned to a role in a new freight document but the email address is not a user in the system. The user is sent an email and can register via this endpoint.\n",
        "operationId": "register_by_email",
        "security": [
          {
            "basic_auth": []
          }
        ],
        "requestBody": {
          "description": "Properties of the account to register.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountRegisterByEmail"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Item created.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "accountId": {
                      "description": "The id of the registered account.",
                      "type": "string",
                      "example": "abc123"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/InvalidCredentials"
          }
        }
      }
    },
    "/accounts/users/completeregistrationbyemail/{token}": {
      "post": {
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "description": "The email token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "accounts"
        ],
        "summary": "Complete registration by email token",
        "description": "Register a new account by submitted email.\n",
        "operationId": "complete_tegistration",
        "security": [
          {
            "basic_auth": []
          }
        ],
        "responses": {
          "201": {
            "description": "Account registration completed.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "accountId": {
                      "description": "The id of the activated account.",
                      "type": "string",
                      "example": "abc123"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/InvalidCredentials"
          }
        }
      }
    },
    "/accounts/password/token/request": {
      "post": {
        "tags": [
          "accounts"
        ],
        "summary": "Request password reset token",
        "description": "Requests a password reset token for the given email address. When the address is found, a token is generated and sent out.\n",
        "operationId": "request_password_reset_token",
        "security": [
          {
            "basic_auth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "emailAddress"
                ],
                "properties": {
                  "emailAddress": {
                    "type": "string",
                    "format": "email",
                    "description": "The email address of the account that needs to be reset.",
                    "maxLength": 100,
                    "example": "test@example.com"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Either the password reset token has been created, or there is no account with the entered email address; the difference isn't shown to prevent email address guessing."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/InvalidCredentials"
          }
        }
      }
    },
    "/iso/currencies": {
      "get": {
        "tags": [
          "iso"
        ],
        "summary": "Get currencies",
        "description": "Returns three-character currency codes following ISO4217 (ISO 4217:2008). Users of the api have the responsibility to provide end users with the right translations.\n",
        "operationId": "get_currencies",
        "security": [],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "code": {
                        "description": "ISO4217 currency code.",
                        "type": "string",
                        "example": "AFA"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/iso/countries": {
      "get": {
        "tags": [
          "iso"
        ],
        "summary": "Get countries",
        "description": "Returns three-character country codes following ISO3166. Users of the api have the responsibility to provide end users with the right translations.\n",
        "operationId": "get_countries",
        "parameters": [
          {
            "name": "includeiso2",
            "in": "query",
            "description": "Optional parameter to include iso2 variant of the language code. Default is `false`.",
            "example": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "code": {
                        "description": "ISO3166 (alpha-3) country code.",
                        "type": "string",
                        "example": "AGO"
                      },
                      "shortCode": {
                        "description": "ISO3166 (alpha-2) country code (only when `includeiso2=true`).",
                        "type": "string",
                        "example": "AO"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/conditions/avc2002": {
      "get": {
        "tags": [
          "terms and conditions"
        ],
        "summary": "General terms and conditions of transportation",
        "description": "Returns information regarding AVC 2002. AVC 2002 are the general terms and conditions of transportation (in The Netherlands only). It is a extension of the CMR with terms and conditions for Dutch insurers etc.\n",
        "operationId": "get_transport_terms_conditions",
        "security": [],
        "parameters": [
          {
            "name": "language",
            "in": "query",
            "description": "The language of the returned avc text can be set by this parameter. This parameter has precedence over the value set in the `Accept-Language` header. The parameter value is in format [language]_[region], where region is optional. For example, `en` or `en_US`.",
            "example": "en",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "If specified with value `html`, text is returned in html format. If not specified or a value for an unsupported type is given, the plain text format will be returned by default.",
            "schema": {
              "type": "string",
              "enum": [
                "html"
              ],
              "example": "html"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AvcConditions"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/terms": {
      "get": {
        "tags": [
          "terms and conditions"
        ],
        "summary": "System usage terms and conditions",
        "description": "General terms and conditions of TransFollow system usage.\n",
        "operationId": "get_usage_terms",
        "security": [],
        "parameters": [
          {
            "name": "language",
            "in": "query",
            "description": "The language of the returned terms and conditions text can be set by this parameter. This parameter has precedence over the value set in the `Accept-Language` header. The parameter value is in format [language]_[region], where region is optional. For example, `en` or `en_US`.",
            "example": "en",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "If specified with value `html`, text is returned in html format. If not specified or a value for an unsupported type is given, the plain text format will be returned by default.",
            "schema": {
              "type": "string",
              "enum": [
                "html"
              ],
              "example": "html"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TermsAndConditions"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/freightdocuments": {
      "get": {
        "tags": [
          "freight document"
        ],
        "summary": "Get freight documents",
        "description": "Returns a list of all freight documents where the logged in user played a role. Cancelled freight documents will not be returned unless you ask for it using the status filter with eq or in operator. ne operator will never return cancelled.\n",
        "operationId": "getFreightDocuments",
        "parameters": [
          {
            "name": "filters",
            "in": "query",
            "description": "A means to filter out FreightDocuments from the result. Returns the freight documents that have their attributes matching the given value.\n\n### Supported operations\n\n| Operation | Meaning               | Notes |\n| --------- | --------------------- | - |\n| eq        | equals                | |\n| like      | like                  | |\n| ne        | not equals            | |\n| lt        | lower than            | |\n| le        | lower or equal than   | |\n| gt        | greater or equal than | |\n| in        | is in set             | When using 'in' operator, it must be enclosed in square brackets separated by a comma. See the example below. |\n\n### Filterable attributes\n\n| Attribute                     | Supported operations | Notes                                                                                                                                                                                                                                                                                                               |\n| ----------------------------- | -------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| type                          | eq, ne               | one of `WAYBILL`, `WAYBILL_FRA`, `WAYBILL_ESP`, `WAYBILL_CZE`                                                                                                                                                                                                                                                                                     |\n| establishedDate               | lt, le, gt, ge       | YYYY-MM-DD format                                                                                                                                                                                                                                                                                                   |\n| lastModifiedDateTime          | lt, le, gt, ge       | ISO-8601 format accepting milliseconds. Example: 2014-03-31T22:13:45:789Z                                                                                                                                                                                                                                           |\n| status                        | eq, ne, in           | one of `DRAFT`, `ISSUED`, `TRANSIT`, `DELIVERED` or `CANCELLED`.                                                                                                                                                 |\n| estimatedDateTimeOfTakingOver | lt, le, gt, ge       | ISO-8601 format. Example: 2014-03-31T22:00:00Z                                                                                                                                                                                                                                                                      |\n| estimatedDateTimeOfDelivery   | lt, le, gt, ge       | ISO-8601 format. Example: 2014-03-31T22:00:00Z                                                                                                                                                                                                                                                                      |\n| ownRoles                      | eq, ne, in           | Role can be `SUBMITTER`, `CLIENT`, `CARRIER`, `CONSIGNOR`, `CONSIGNEE`, `SUBSEQUENTCARRIER`, `PLACEOFTAKINGOVER`, or `PLACEOFDELIVERY`. Will filter freight documents where the logged in user has a particular role. |\n| modifiedByOtherAccount (*)    | eq                   | only value `true` is supported. Returns freight documents that were modified by a different account than the logged in user                                                                                                                                                                                         |\n| submitterEmail                | eq                   | Must be a well formed email address. Returns freight documents that were submitted by an account with this email address                                                                                                                                                                                            |\n| transportReference            | eq                   | &nbsp;                                                                                                                                                                                                                                                                                                              |\n| referenceValue                | eq                   | Returns freight documents that contain a reference with this value.                                                                                                                                                                                                                                                 |\n\n(*) criteria will only be applied to non delivered nor cancelled freight documents\n<br/>\n\n### Examples\n\n- All freight documents except cancelled of the currently logged in user that are of type waybill that are not draft and not issued and where the currently logged in user has consignee or consignor role and that were modified later than the specified date:\n\n    `filters=type.eq.WAYBILL,status.ne.DRAFT,status.ne.ISSUED,ownRoles.in.[CONSIGNOR,CONSIGNEE],lastModifiedDateTime.gt.2014-02-10T00:00:00Z`\n\n- All freight documents except cancelled of the currently logged in user modified after the specified date by at least one other account:\n\n    `filters=lastModifiedDateTime.ge.2017-10-24T11:45:00Z,modifiedByOtherAccount.eq.true`\n\n- All freight documents of the currently logged in user that are of type waybill that are draft or cancelled:\n\n    `filters=type.eq.WAYBILL,status.in.[DRAFT,CANCELLED]`\n\n- All freight documents of a transport:\n\n    `filters=transportReference.eq.MY_TRANSPORT`",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "example": "sort=type.asc,lastModifiedDateTime.desc",
            "description": "Order by these attributes, `.asc` and `.desc`:\n\n### Sortable attributes\n\n| Attribute                     | Notes                                               |\n| ----------------------------- | --------------------------------------------------- |\n| authorityReference            |                                                     |\n| type                          | one of `WAYBILL`, `WAYBILL_FRA`, `WAYBILL_ESP`, `WAYBILL_CZE`          |\n| establishedDate               | ISO-8601 date format: YYYY-MM-DD                    |\n| lastModifiedDateTime          | ISO-8601 format. Example: 2014-03-31T22:00:00Z      |\n| status                        | one of `DRAFT`, `ISSUED`, `TRANSIT`, or `DELIVERED` |\n| estimatedDateTimeOfTakingOver | ISO-8601 format. Example: 2014-03-31T22:00:00Z      |\n| estimatedDateTimeOfDelivery   | ISO-8601 format. Example: 2014-03-31T22:00:00Z      |",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of freight documents to select.",
            "schema": {
              "type": "integer",
              "example": 25,
              "minimum": 25,
              "maximum": 50
            }
          },
          {
            "name": "first",
            "in": "query",
            "description": "The first freight document to select",
            "schema": {
              "type": "integer",
              "example": 1,
              "minimum": 0
            }
          }
        ],
        "security": [
          {
            "bearer": []
          },
          {
            "x-api_key": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-Total-Count": {
                "schema": {
                  "type": "integer",
                  "minimum": 0,
                  "description": "Returns the total amount of freight documents available to the logged in user.",
                  "example": 22
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FreightDocument"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      },
      "post": {
        "tags": [
          "freight document"
        ],
        "summary": "Create freight document.",
        "description": "A new Freight Document can be created by a logged in account. This account is the submitter. This account can also have another role on the new document. The user is allowed to save a draft version of the freight document. This draft version can only be edited and updated by the submitter. Once a freight document has been issued, it will no longer be editable and all mandatory fields are applicable. To create a draft, POST with field 'status' set to `DRAFT`. POSTing a freight document with the status set to `ISSUED` will save the document as issued and make it unchangeable. If the submitter account does not have sufficient credits the POST will fail with error 4.41.\n\nConsignor, consignee and carrier are roles that are part of the freight document. Together with the submitter they represent the legal parties in the freight document. The consignee actually becomes a legal party on the freight document when he receives the cargo, signs the freight document or files a claim. The place of taking over, place of delivery and substitute carriers are never legal parties on the freight document and, with the exception of place of taking over, they can be added to the freight document after it's creation in `DRAFT`.\n\nWhen the freight document is saved (both in `DRAFT` and `ISSUED` status) an email will be sent out to the roles notifying them that they have been associated with a freight document. If the submittedAccountEmail is not associated with an existing account, the user will be sent an email and invited to register with TransFollow.\n\nDuring the creation process, the user is allowed to add attachments to a freight document using the `/freightdocuments/{freightDocumentId}/attachments` endpoint.\n\nA transport reference can be specified on freight documents, allowing to group them as a transport (for example a mission number).\n\nNote: A single account cannot create multiple freightdocuments with status `ISSUED` concurrently! You must create them sequentially.\n",
        "operationId": "create_fd",
        "security": [
          {
            "bearer": []
          },
          {
            "x-api_key": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "Create issued freight document": {
                  "$ref": "#/components/examples/create-fd-simple"
                },
                "Create minimal draft freight document": {
                  "$ref": "#/components/examples/create-fd-minimal-draft"
                }
              },
              "schema": {
                "$ref": "#/components/schemas/FreightDocument"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Item created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FreightDocumentCreateResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/freightdocuments/{freightDocumentId}": {
      "get": {
        "tags": [
          "freight document"
        ],
        "summary": "Get freight document",
        "description": "Get information about the Freight Document.\n",
        "operationId": "get_freight_document",
        "parameters": [
          {
            "$ref": "#/components/parameters/freightDocumentId"
          },
          {
            "name": "Accept",
            "in": "header",
            "description": "Is used to set specified media type.",
            "example": "application/json",
            "schema": {
              "type": "string",
              "enum": [
                "application/json",
                "application/pdf"
              ]
            }
          }
        ],
        "security": [
          {
            "bearer": []
          },
          {
            "x-api_key": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FreightDocument"
                }
              },
              "application/pdf": {
                "schema": {
                  "description": "PDF of the freight document.",
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      },
      "patch": {
        "parameters": [
          {
            "$ref": "#/components/parameters/freightDocumentId"
          }
        ],
        "tags": [
          "freight document"
        ],
        "summary": "Record ETAs",
        "description": "Record ETAs of individual FreightDocument. Only users who have the `ETA` permission on the role or freight document are allowed to update the attributes of this endpoint.\n",
        "operationId": "patch_fd",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FreightDocumentPatchRequest"
              }
            }
          }
        },
        "responses": {
          "205": {
            "description": "Item updated. No content."
          },
          "400": {
            "$ref": "../../components/responses/BadRequest.yaml"
          },
          "401": {
            "$ref": "../../components/responses/Unauthorized.yaml"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "x-api_key": []
          }
        ]
      },
      "put": {
        "parameters": [
          {
            "$ref": "#/components/parameters/freightDocumentId"
          }
        ],
        "tags": [
          "freight document"
        ],
        "summary": "Update freight document",
        "description": "Updates a freight document. The freight document must be in `DRAFT` status.\n\nIn order to alter a freight document, you need to do the following steps to keep all information already in the freight document:\n* perform a GET with this end-point\n* alter the freight document as received\n* PUT the whole freight document with this end-point\n\nSome of the attributes are 'read-only' and cannot be modified. If you want to modify this freight document, the best approach is to copy and change the result from the previous GET call. You can use the PUT `/api/freightdocuments/{id}` endpoint with the resulting body.\n\nAll omitted or altered information, which is not mandatory for PUT a freight document, which was present in the freight document after the GET will not be present or is altered in the freight document after the PUT.\n\nAdding references to a freight document is done by adding references without a `referenceId` as body to the `/api/freightdocuments/{id}` PUT. Updating an existing reference to a freight document is done by altering the reference with their `referenceId`.\n",
        "operationId": "put_fd",
        "security": [
          {
            "bearer": []
          },
          {
            "x-api_key": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "issued": {
                  "$ref": "#/components/examples/update-fd-simple"
                }
              },
              "schema": {
                "$ref": "#/components/schemas/FreightDocument"
              }
            }
          }
        },
        "responses": {
          "205": {
            "description": "Item updated. No content."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/freightdocuments/{freightDocumentId}/pdf": {
      "get": {
        "tags": [
          "freight document"
        ],
        "summary": "Get freight document PDF",
        "description": "Get data of the Freight Document PDF file as an Attachment (Base64 encoded).\n",
        "operationId": "get_freight_document_pdf",
        "parameters": [
          {
            "$ref": "#/components/parameters/freightDocumentId"
          }
        ],
        "security": [
          {
            "bearer": []
          },
          {
            "x-api_key": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Attachment"
                },
                "example": {
                  "attachmentId": "null,",
                  "content": "JVBERi0xLjQKJaqrrK0KMSAwIG9iago8PAovQ3JlYXRvciAoQXBhY2hlIEZPUCBWZXJzaW9uIDIuOCkKL1Byb2R1Y2VyIC...",
                  "mimeType": "application/pdf",
                  "name": null,
                  "originalFileName": "NL0021121324TFL.pdf",
                  "size": null,
                  "type": null,
                  "sealed": false
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/freightdocuments/{freightDocumentId}/pdf/{pdfTemplateType}": {
      "get": {
        "tags": [
          "freight document"
        ],
        "summary": "Get freight document PDF by template type",
        "description": "Get Freight Document PDF file by template type.\n",
        "operationId": "get_freight_document_pdf_by_template_type",
        "parameters": [
          {
            "$ref": "#/components/parameters/freightDocumentId"
          },
          {
            "$ref": "#/components/parameters/pdfTemplateType"
          }
        ],
        "security": [
          {
            "bearer": []
          },
          {
            "x-api_key": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/pdf": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                },
                "example": "binary pdf file of the freight document"
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/ResourceNotFound"
          }
        }
      }
    },
    "/freightdocuments/{freightDocumentId}/partial": {
      "patch": {
        "parameters": [
          {
            "$ref": "#/components/parameters/freightDocumentId"
          }
        ],
        "tags": [
          "freight document"
        ],
        "summary": "Partial update freight document",
        "description": "Partial update of freight document info in ISSUED and TRANSIT status.\nOnly accounts which own the `SUBMITTER` role are allowed to use this endpoint.\nTo change the value of a field, just declare it inside the `replace` node. If a field is provided at the root of the `replace` node with a `null` value, this `null` value will be taken into account and the values of the object corresponding to the field will be erased. All omitted root fields will be ignored. When a root field is provided, such as `structuredGoodsInfo`, then all attributes of `structuredGoodsInfo` you would like to change or keep must be provided. If not, they will be set to null.\n\nSpecial rules applied to the `structuredGoods` collection:\n* If provided item has a `productId` that matches one on the current freight document, then it is updated but keeps the same `productId`\n* If provided item does not have a `productId`, it is created with a `productId` which is calculated as the increment of the maximum value of all productIds ever used on the freight document, so that the new value won't overlap any `productId` already used in the past\n* Removal of goods items is not supported by this endpoint\n",
        "operationId": "fd_partial_update",
        "security": [
          {
            "bearer": []
          },
          {
            "x-api_key": []
          }
        ],
        "requestBody": {
          "description": "Properties of the freight document to update.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FreightDocumentPartialUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Item updated. Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommitIdResponse"
                }
              }
            }
          },
          "205": {
            "description": "Item not updated updated. No content."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/freightdocuments/{freightDocumentId}/delegate": {
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/freightDocumentId"
          }
        ],
        "tags": [
          "delegate"
        ],
        "summary": "Delegate freight document",
        "description": "An account can delegate its rights of a specific role within the freight document to another account (named “delegatee account”):\n* Submitter, consignor, consignee, carrier or other role may delegate its own role to another account.\n* Submitter can delegate a role of an assigned account to its existing sub-account. In this case, Submitter needs to know exact username of such sub-account.\n* All roles can delegate the `VIEWER` role: this gives the delegatee view only rights on the freight document.\n\nIn case of a role delegation other than VIEWER, the delegatee account will:\n* have all rights of its delegated role within the freight document (e.g. sign a Freight Document, add comments etc).\n* be able to delegate its newly received rights to a third account.\n\nIf the delegate account email address does not correspond to an existing account an email invitation will be send to the delegatee. This is similar to the new account handling for freight document roles.\n\nIf your account has the Single Sign On (SSO) feature enabled you can also use SSO group claims in the delegation calls through the `ssoGroupClaim` attribute. Accounts that do not have this feature enabled should ignore the attribute.\n",
        "operationId": "fd_delegate",
        "security": [
          {
            "bearer": []
          },
          {
            "x-api_key": []
          }
        ],
        "requestBody": {
          "description": "Properties of the delegatee",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FreightDocumentDelegationRequest"
              },
              "examples": {
                "email": {
                  "value": {
                    "role": "CARRIER",
                    "emailAddressOfDelegatee": "delegatee@test.tld"
                  }
                },
                "username": {
                  "value": {
                    "role": "CARRIER",
                    "username": "usrname"
                  }
                },
                "ssoGroupClaim": {
                  "value": {
                    "role": "CARRIER",
                    "ssoGroupClaim": "location_1"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Success. No content."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/freightdocuments/{freightDocumentId}/delegates": {
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/freightDocumentId"
          }
        ],
        "tags": [
          "delegate"
        ],
        "summary": "Delegate freight document multiple rights",
        "description": "Delegate multiple rights within the freight document to other accounts. This endpoint has the same functionality as the `/delegate [POST]` endpoint (see it for more details), but allows multiple delegations in one request. Any delegation already present will be skipped. All delegations must either succeed or be skipped for the request to be successful.\n",
        "operationId": "fd_delegates",
        "security": [
          {
            "bearer": []
          },
          {
            "x-api_key": []
          }
        ],
        "requestBody": {
          "description": "Properties of the delegates.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "delegations": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/FreightDocumentDelegationRequest"
                    }
                  }
                }
              },
              "example": {
                "delegations": [
                  {
                    "role": "CARRIER",
                    "emailAddressOfDelegatee": "delegatee@test.tld"
                  },
                  {
                    "role": "CARRIER",
                    "username": "username"
                  },
                  {
                    "role": "CARRIER",
                    "ssoGroupClaim": "location_1"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Success. No content."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/freightdocuments/{freightDocumentId}/revoke": {
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/freightDocumentId"
          }
        ],
        "tags": [
          "delegate"
        ],
        "summary": "Revoke delegated freight document rights",
        "description": "Revoke the rights previously delegated to another account using the `/delegate` endpoint.\n",
        "operationId": "fd_revoke",
        "security": [
          {
            "bearer": []
          },
          {
            "x-api_key": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FreightDocumentDelegationRequest"
              },
              "examples": {
                "email": {
                  "value": {
                    "role": "CARRIER",
                    "emailAddressOfDelegatee": "delegatee@test.tld"
                  }
                },
                "username": {
                  "value": {
                    "role": "CARRIER",
                    "username": "usrname"
                  }
                },
                "ssoGroupClaim": {
                  "value": {
                    "role": "CARRIER",
                    "ssoGroupClaim": "location_1"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Success. No content."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/freightdocuments/{freightDocumentId}/revocations": {
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/freightDocumentId"
          }
        ],
        "tags": [
          "delegate"
        ],
        "summary": "Revoke multiple delegated freight document rights",
        "description": "Revoke multiple previously delegated rights of specific roles within the freight document from other accounts. This endpoint is similar to `/revoke [POST]` but allows multiple revocations in one request. Revocations that were not delegated are ignored. All revocations must succeed or be ignored for the request to be successful.\n\nRevoke the rights previously delegated to another account using the /delegate endpoint.\n",
        "operationId": "fd_revoke_multiple",
        "security": [
          {
            "bearer": []
          },
          {
            "x-api_key": []
          }
        ],
        "requestBody": {
          "description": "Properties of the delegates.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "delegations": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/FreightDocumentDelegationRequest"
                    }
                  }
                }
              },
              "example": {
                "revocations": [
                  {
                    "role": "CARRIER",
                    "emailAddressOfDelegatee": "delegatee@test.tld"
                  },
                  {
                    "role": "CARRIER",
                    "username": "username"
                  },
                  {
                    "role": "CARRIER",
                    "ssoGroupClaim": "location_1"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Success. No content."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/freightdocuments/{freightDocumentId}/attachments": {
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/freightDocumentId"
          }
        ],
        "tags": [
          "document attachments"
        ],
        "summary": "Create attachment",
        "description": "Create a new attachment linked to a freight document. A submitter can add `GENERAL` and `GOODS` attachment, but only when the freight document is in `DRAFT` status. The attachments of type `SUPPLEMENT` can always be added to the freight document.\n\nIf the attachment is a supplement then this attachment is not legally applied to a freight document, in other words you don't sign for those types of attachments.\n",
        "operationId": "fd_add_attachment",
        "security": [
          {
            "bearer": []
          },
          {
            "x-api_key": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Attachment"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "attachmentId": {
                      "description": "Attachment id of the newly added attachment.",
                      "type": "string",
                      "example": "78798"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/freightdocuments/{freightDocumentId}/attachments/{attachmentId}": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/freightDocumentId"
          },
          {
            "name": "attachmentId",
            "in": "path",
            "example": "12312",
            "description": "The id of the attachment",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "document attachments"
        ],
        "summary": "Get attachment",
        "description": "Get data and content of attachment for this Freight Document.\n",
        "operationId": "get_fd_attachment",
        "security": [
          {
            "bearer": []
          },
          {
            "x-api_key": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Attachment"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      },
      "put": {
        "parameters": [
          {
            "$ref": "#/components/parameters/freightDocumentId"
          },
          {
            "name": "attachmentId",
            "in": "path",
            "example": "12312",
            "description": "The id of the attachment",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "document attachments"
        ],
        "summary": "Update attachment",
        "description": "Update an existing attachment.\n\nIf the attachment is a supplement then this attachment is not legally applied to a freight document, in other words you don't sign for the attachments.\n\nIf the old or updated attachment is not a supplement then only the submitter can update them and only when the freight document is in the `DRAFT` status.\n",
        "operationId": "fd_update_attachment",
        "security": [
          {
            "bearer": []
          },
          {
            "x-api_key": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Attachment"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Success. No content."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/components/parameters/freightDocumentId"
          },
          {
            "name": "attachmentId",
            "in": "path",
            "example": "12312",
            "description": "The id of the attachment",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "document attachments"
        ],
        "summary": "Delete attachment",
        "description": "Delete an existing attachment. The same rules as updating an attachment apply.\n",
        "operationId": "fd_delete_attachment",
        "security": [
          {
            "bearer": []
          },
          {
            "x-api_key": []
          }
        ],
        "responses": {
          "204": {
            "description": "Success. No content."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/freightdocuments/{freightDocumentId}/references": {
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/freightDocumentId"
          }
        ],
        "tags": [
          "references"
        ],
        "summary": "Create reference",
        "description": "Create a new reference linked to a specific role on a freight document. Possible roles that can create / delete references are consignor, place of taking over, carrier, subsequent carrier, place of delivery and consignee. For a submitter it is not possible to create / delete references like this. A submitter can only create / delete references while the freight document is in status `DRAFT`. The submitter can use the `/freightdocuments POST` and `/freightdocuments/{id} PUT` endpoint.\n\nThe new reference is added to the list of references in the freight document resource. References created by the submitter while in `DRAFT` and references created by other roles can be distinguished by `roleId`. If the `roleId` is `null` it concerns a reference created by a submitter. If the `roleId` as a value it is a reference for a specific role.\n",
        "operationId": "fd_add_reference",
        "security": [
          {
            "bearer": []
          },
          {
            "x-api_key": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FreightDocumentReferenceRoleBasedCreateRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "referenceId": {
                      "description": "Reference id of the newly added reference.",
                      "type": "string",
                      "example": "78798"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/freightdocuments/{freightDocumentId}/references/{referenceId}": {
      "delete": {
        "parameters": [
          {
            "$ref": "#/components/parameters/freightDocumentId"
          },
          {
            "name": "referenceId",
            "in": "path",
            "example": "34324",
            "description": "The id of the freight document reference",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "references"
        ],
        "summary": "Delete reference",
        "description": "Delete an existing reference. Only accounts that are associated with the role linked to this reference can perform this action. For example only a carrier can delete a reference that belongs to a carrier. Submitters can only delete references while the freight document is in `DRAFT` using the `/freightdocuments POST` and `/freightdocuments/{id} PUT `endpoints. When the status of the freight document is `ISSUED` it is no longer possible for the submitter to make changes to references.\n",
        "operationId": "delete_reference",
        "security": [
          {
            "bearer": []
          },
          {
            "x-api_key": []
          }
        ],
        "responses": {
          "204": {
            "description": "Success. No content."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/freightdocuments/{freightDocumentId}/cancel": {
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/freightDocumentId"
          }
        ],
        "tags": [
          "freight document"
        ],
        "summary": "Cancel freight document",
        "description": "Cancels the current Freight Document, changing the `status` of the Freight Document from `DRAFT`, `ISSUED` or `TRANSIT` to `CANCELLED`. All fields documented as mandatory are applicable.\n",
        "operationId": "fd_cancel",
        "security": [
          {
            "bearer": []
          },
          {
            "x-api_key": []
          }
        ],
        "responses": {
          "205": {
            "description": "Item updated. No content."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/freightdocuments/{freightDocumentId}/issue": {
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/freightDocumentId"
          }
        ],
        "tags": [
          "freight document"
        ],
        "summary": "Issue freight document",
        "description": "Issues the current Freight Document, changing the `status` of the Freight Document from `DRAFT` to `ISSUED`. All fields documented as mandatory are applicable. \n\nNote: A single account cannot create freightdocuments with status `ISSUED` concurrently! You can create them sequentially.\n",
        "operationId": "fd_issue",
        "security": [
          {
            "bearer": []
          },
          {
            "x-api_key": []
          }
        ],
        "responses": {
          "205": {
            "description": "Item updated. No content."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/freightdocuments/{freightDocumentId}/subscriptions": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/freightDocumentId"
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Is used to set specified media type. Always `application/vnd.freightdocument.subscription.v1+json`.",
              "example": "application/vnd.freightdocument.subscription.v1+json"
            }
          }
        ],
        "tags": [
          "document subscriptions"
        ],
        "summary": "Get subscriptions",
        "description": "Retrieves a list of existing subscriptions on this freight document..\n",
        "operationId": "fd_get_subscriptions",
        "security": [
          {
            "bearer": []
          },
          {
            "x-api_key": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "headers": {
              "Content-Type": {
                "schema": {
                  "description": "Always `application/vnd.freightdocument.subscription.v1+json`.",
                  "type": "string"
                }
              }
            },
            "content": {
              "application/vnd.freightdocument.subscription.v1+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FreightDocumentSubscription"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/freightDocumentId"
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Is used to set specified media type. Always `application/vnd.freightdocument.subscription.v1+json`.",
              "example": "application/vnd.freightdocument.subscription.v1+json"
            }
          }
        ],
        "tags": [
          "document subscriptions"
        ],
        "summary": "Create subscription",
        "description": "Creates a new subscription on this freight document. On a status change on the freight document (to `ISSUED`, `TRANSIT`, `DELIVERED` or `CANCELLED` for example) the subscription will execute a `POST` call to the callback URL.\n\nTo prevent unauthorized requests to the `callbackUrl` use HTTP Basic Auth to secure it and specify the credentials in the optional `basicAuthCredentials` field. If specified the `POST` callback from TransFollow to the `callbackUrl` will contain the appropriate Authorization header.\n",
        "operationId": "fd_create_subscription",
        "security": [
          {
            "bearer": []
          },
          {
            "x-api_key": []
          }
        ],
        "requestBody": {
          "description": "Properties of the subscription to create.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FreightDocumentSubscription"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Item created.",
            "headers": {
              "Content-Type": {
                "schema": {
                  "description": "Always `application/vnd.freightdocument.subscription.v1+json`.",
                  "type": "string"
                }
              }
            },
            "content": {
              "application/vnd.freightdocument.subscription.v1+json:": {
                "schema": {
                  "$ref": "#/components/schemas/FreightDocumentSubscription"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/freightdocuments/{freightDocumentId}/subscriptions/{subscriptionId}": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/freightDocumentId"
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The id of the subscription",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Is used to set specified media type. Always `application/vnd.freightdocument.subscription.v1+json`.",
              "example": "application/vnd.freightdocument.subscription.v1+json"
            }
          }
        ],
        "tags": [
          "document subscriptions"
        ],
        "summary": "Get subscription",
        "description": "Retrieves an existing subscription on this freight document..\n",
        "operationId": "fd_get_subscription",
        "security": [
          {
            "bearer": []
          },
          {
            "x-api_key": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK.",
            "headers": {
              "Content-Type": {
                "schema": {
                  "description": "Always `application/vnd.freightdocument.subscription.v1+json`.",
                  "type": "string"
                }
              }
            },
            "content": {
              "application/vnd.freightdocument.subscription.v1+json": {
                "schema": {
                  "$ref": "#/components/schemas/FreightDocumentSubscription"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/ResourceNotFound"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "put": {
        "parameters": [
          {
            "$ref": "#/components/parameters/freightDocumentId"
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The id of the subscription",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Is used to set specified media type. Always `application/vnd.freightdocument.subscription.v1+json`.",
              "example": "application/vnd.freightdocument.subscription.v1+json"
            }
          }
        ],
        "tags": [
          "document subscriptions"
        ],
        "summary": "Update subscription",
        "description": "Modifies an existing subscription with the given id.\n",
        "operationId": "fd_update_subscription",
        "security": [
          {
            "bearer": []
          },
          {
            "x-api_key": []
          }
        ],
        "requestBody": {
          "description": "Properties of the subscription.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FreightDocumentSubscription"
              }
            }
          }
        },
        "responses": {
          "205": {
            "description": "Item updated. No content."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/freightdocuments/{freightDocumentId}/subsequentCarriers": {
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/freightDocumentId"
          }
        ],
        "tags": [
          "roles"
        ],
        "summary": "Add subsequent carrier",
        "description": "Adds a new subsequent carrier to the freight document. The body of the request must be a single `FreightDocumentRole`, see endpoint `/freightdocuments [POST]` for a description of the type. Only the `submitter` of the freight document has permission to access the endpoint.\n\nSubsequent carriers added through this endpoint cannot be removed currently.\n",
        "operationId": "fd_add_subcarrier",
        "security": [
          {
            "bearer": []
          },
          {
            "x-api_key": []
          }
        ],
        "requestBody": {
          "description": "Properties of the subsequent carrier to create.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FreightDocumentCarrierRole"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Role added to freight document.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "roleId": {
                      "type": "string",
                      "example": "123123",
                      "description": "The role Id of the newly added subsequent carrier."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/freightdocuments/{freightDocumentId}/roles/{roleId}/licenseplates": {
      "put": {
        "parameters": [
          {
            "$ref": "#/components/parameters/freightDocumentId"
          },
          {
            "name": "roleId",
            "in": "path",
            "description": "The id of the role",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "roles"
        ],
        "summary": "Update license plates",
        "description": "Replace the license plates information which are associated to a role. This endpoint is restricted to the carrier roles (carrier and subsequent carrier) and the submitter of the freight document. For instance if the current user is the carrier, he can change the license plates information associated to the carrier role in the freight document. This change can be made when the freight document is in status `DRAFT`, `ISSUED` or `TRANSIT`.\n",
        "operationId": "fd_update_lps",
        "security": [
          {
            "bearer": []
          },
          {
            "x-api_key": []
          }
        ],
        "requestBody": {
          "description": "Properties of the license plates to update.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LicensePlateData"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update successful for an `ISSUED` or `TRANSIT` freight document."
          },
          "204": {
            "description": "Update successful for a `DRAFT` freight document."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/freightdocuments/{freightDocumentId}/roles/{roleType}": {
      "put": {
        "parameters": [
          {
            "$ref": "#/components/parameters/freightDocumentId"
          },
          {
            "name": "roleType",
            "in": "path",
            "description": "The type of the role.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/FreightDocumentRoleType"
            }
          }
        ],
        "tags": [
          "roles"
        ],
        "summary": "Update role",
        "description": "Allow the submitter and the carrier to update a role after the document was `ISSUED`. The place of taking over can be changed before the document is in `TRANSIT` (before the goods have been picked up). The consignee and the place of delivery can be updated before it was `DELIVERED`. The consignee can only be changed by the submitter, not the carrier. The carrier can only update roles if configuration parameter `allowRoleUpdateForCarrier` is properly set The body of the request must be a single `FreightDocumentRole`, see endpoint `/freightdocuments [POST]` for a description.\n",
        "operationId": "fd_update_role",
        "security": [
          {
            "bearer": []
          },
          {
            "x-api_key": []
          }
        ],
        "requestBody": {
          "description": "Properties of the role carrier to update.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FreightDocumentRole"
              }
            }
          }
        },
        "responses": {
          "205": {
            "description": "Item updated. No content."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/freightdocuments/{freightDocumentId}/times": {
      "put": {
        "parameters": [
          {
            "$ref": "#/components/parameters/freightDocumentId"
          }
        ],
        "tags": [
          "times"
        ],
        "summary": "Update times",
        "description": "Allow the submitter to update agreed date/time of the specific freight document. Agreed times can be updated only when the freight document is in `ISSUED` or `TRANSIT` state.\n",
        "operationId": "fd_update_times",
        "security": [
          {
            "bearer": []
          },
          {
            "x-api_key": []
          }
        ],
        "requestBody": {
          "description": "Properties of the role carrier to update.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "agreedDateOfDelivery": {
                    "description": "Same information as agreedDateTimeOfDelivery but without specifying any time. Date formatted according to ISO 8601(ISO 8601:2004): `YYYY-MM-DD`",
                    "example": "2022-01-01T00:00:00Z",
                    "format": "date",
                    "type": "string"
                  },
                  "agreedDateTimeOfDelivery": {
                    "description": "The planned date and time of delivery of the goods by the carrier. This is not the ETA datetime but a date that was agreed on by the relevant parties. Datetime formatted according to ISO 8601 (ISO 8601:2004): `YYYY-MM-DDThh:mm:ssZ`",
                    "example": "2023-05-25T10:54:31Z",
                    "format": "date-time",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "205": {
            "description": "Item updated. No content."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/freightdocuments/{freightDocumentId}/events": {
      "get": {
        "tags": [
          "events"
        ],
        "summary": "Get a list of events registered on the freight document.",
        "description": "Some description of the operation.\nYou can use `Markdown` here.\n",
        "operationId": "freightDocumentEventsGet",
        "parameters": [
          {
            "$ref": "#/components/parameters/freightDocumentId"
          }
        ],
        "security": [
          {
            "bearer": []
          },
          {
            "x-api_key": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FreightDocumentEvent"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        }
      },
      "post": {
        "tags": [
          "events"
        ],
        "summary": "Register an event on the freight document.",
        "description": "Some description of the operation.\nYou can use `Markdown` here.\n",
        "operationId": "freightDocumentEventsPost",
        "parameters": [
          {
            "$ref": "#/components/parameters/freightDocumentId"
          }
        ],
        "requestBody": {
          "description": "A user having a role in the freight document (see list of roles below) can register an event.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FreightDocumentEvent"
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "x-api_key": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommitIdResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/freightdocuments/{freightDocumentId}/carrier/accesscodes": {
      "post": {
        "parameters": [
          {
            "$ref": "#/components/parameters/freightDocumentId"
          }
        ],
        "tags": [
          "access codes"
        ],
        "summary": "Add access codes",
        "description": "A user having a submitter or carrier role in the freight document can add access codes. The freight document must be in one of the following statuses `DRAFT`, `ISSUED` or `TRANSIT`. It is only possible to add new codes but impossible to update or delete existing ones (the codes provided in the request do not replace the current ones but are added to them).\n",
        "operationId": "fd_add_access_codes",
        "security": [
          {
            "bearer": []
          },
          {
            "x-api_key": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccessCodes"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Item created."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/components/parameters/freightDocumentId"
          }
        ],
        "tags": [
          "access codes"
        ],
        "summary": "Delete access codes",
        "description": "A user having a submitter or carrier role in the freight document can remove their access codes. All codes must exist on the freight document, and all of them must belong to the user.\n",
        "operationId": "fd_delete_access_codes",
        "security": [
          {
            "bearer": []
          },
          {
            "x-api_key": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccessCodes"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Success. No content."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/freightdocuments/ext/{externalIdentifier}": {
      "get": {
        "tags": [
          "freight document"
        ],
        "summary": "Get document by external id",
        "description": "Get information about the Freight Document.\n",
        "operationId": "fd_get_by_external_id",
        "parameters": [
          {
            "name": "externalIdentifier",
            "in": "path",
            "description": "The external id of the freight document.",
            "example": "external_id_123",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Accept",
            "in": "header",
            "description": "Is used to set specified media type.",
            "example": "application/json",
            "schema": {
              "type": "string",
              "enum": [
                "application/json"
              ]
            }
          }
        ],
        "security": [
          {
            "bearer": []
          },
          {
            "x-api_key": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FreightDocument"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/batch/freightdocuments": {
      "post": {
        "tags": [
          "freight documents"
        ],
        "summary": "Create multiple documents",
        "description": "This endpoint allows the creation of multiple freight documents in one call.\n",
        "operationId": "fd_create_batch",
        "security": [
          {
            "bearer": []
          },
          {
            "x-api_key": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "Create multiple issued": {
                  "$ref": "#/components/examples/create-fd-batch"
                }
              },
              "schema": {
                "type": "object",
                "properties": {
                  "freightDocuments": {
                    "description": "Collection of freight documents (see endpoint `/freightdocuments [POST]` for a description of the type).",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/FreightDocument"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FreightDocumentBatchCreationResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/attachments/{attachmentId}": {
      "get": {
        "parameters": [
          {
            "name": "attachmentId",
            "in": "path",
            "description": "The id of the attachment",
            "required": true,
            "example": "1232",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "attachments"
        ],
        "summary": "Get attachment",
        "description": "Get data and content of Attachment.\n",
        "operationId": "get_attachment",
        "security": [
          {
            "bearer": []
          },
          {
            "x-api_key": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Attachment"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/attachments/{attachmentId}/content": {
      "get": {
        "parameters": [
          {
            "name": "attachmentId",
            "in": "path",
            "description": "The id of the attachment.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "encodeBase64",
            "in": "query",
            "description": "If set to `false` or non-existent, will stream the binary. If set to `true` will stream a base64. encoded content.",
            "example": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "tags": [
          "attachments"
        ],
        "summary": "Get attachment content",
        "description": "Gets the content of the file attachment. This endpoint can reply the file content in binary format, or as a base64 encoded string.\n",
        "operationId": "get_attachment_content",
        "security": [
          {
            "bearer": []
          },
          {
            "x-api_key": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "headers": {
              "Content-Type": {
                "schema": {
                  "description": "MIME type of the served file.",
                  "type": "string",
                  "enum": [
                    "application/pdf",
                    "image/png",
                    "image/jpeg"
                  ]
                }
              }
            },
            "content": {
              "application/pdf": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "image/png": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "image/jpeg": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "text/plain": {
                "schema": {
                  "description": "If `encodeBase64` request query param is true.",
                  "type": "string",
                  "format": "base64"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/validateemailtoken/{token}": {
      "get": {
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "description": "The email token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "email token"
        ],
        "summary": "Validate email token",
        "description": "Validates the token received by email when a new email is associated to a role of a Freight Document. The call never returns an error but provides a description of the result of the validation.\n\nThe token is validated successfully if not expired and the email linked to it has not been already used to create a new account.\n\nThe latter is due to the fact that a new email address can be linked as a role to more than one Freight Document before a new account with the same address is created. Thus only the first call will be successful.\n\nIf the token has expired, a new email containing a valid token is sent automatically by the server to the same email address.\n",
        "operationId": "validate_email_token",
        "security": [
          {
            "bearer": []
          },
          {
            "x-api_key": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "description": "The result of the validation.",
                      "type": "boolean",
                      "example": true
                    },
                    "description": {
                      "description": "Description of the response.",
                      "type": "string"
                    },
                    "reason": {
                      "type": "string",
                      "enum": [
                        "SUCCESS",
                        "INVALID_EMAIL_TOKEN",
                        "EXPIRED_EMAIL_TOKEN",
                        "EMAIL_IN_USE"
                      ],
                      "example": "SUCCESS"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/ResourceNotFound"
          }
        }
      }
    },
    "/dangerousgoods": {
      "get": {
        "tags": [
          "adr"
        ],
        "summary": "Search definitions",
        "description": "Search for Dangerous Goods definitions.\n",
        "operationId": "get_adrs",
        "parameters": [
          {
            "name": "searchText",
            "description": "Free text to search in goods names and descriptions.",
            "in": "query",
            "required": true,
            "example": "FLAMMABLE",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lang",
            "description": "Language. Default is `en`.",
            "in": "query",
            "required": false,
            "example": "en",
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "bearer": []
          },
          {
            "x-api_key": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DangerousGoodSubstance"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/ResourceNotFound"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/dangerousgoods/UN/{code}": {
      "get": {
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "description": "UN code to search for",
            "required": true,
            "schema": {
              "type": "string",
              "example": "3226"
            }
          },
          {
            "name": "lang",
            "description": "Language. Default is `en`.",
            "in": "query",
            "required": false,
            "example": "en",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "adr"
        ],
        "summary": "Search definitions with UN code",
        "description": "Search for Dangerous Goods definitions.\n",
        "operationId": "get_adrs_un_code",
        "security": [
          {
            "bearer": []
          },
          {
            "x-api_key": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DangerousGoodSubstance"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/ResourceNotFound"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/dangerousgoods/{id}/textonbill": {
      "post": {
        "description": "Takes a list of question/answer as input to determine the legal text to put on the transport document for the provided dangerous goods item (ADR). Questions and answers are specified using their unique identifier (see the References chapter to get the full list of available questions and answers).\n\nThe response will contain the list of previously answered questions with their responses and, either the next question to be answered, or a list of errors if this list of previously answered questions is not correct/consistent. If no questions are sent, then the first question in the question tree will be sent back as the next question to be answered.\n\n## Example of Requests/Responses workflow:\n\n### First request to start\n\n```json\n{\n  \"languages\": [\n    \"en\"\n  ]\n}\n```\n\n### First response\n\n```json\n{\n  \"nextQuestion\": {\n    \"questionId\": \"0\",\n    \"questionLabel\": \"Use default text or specific text on transport document?\",\n    \"answers\": [\n      {\n        \"answerId\": \"0\",\n        \"answerLabel\": \"Use default text\"\n      },\n      {\n        \"answerId\": \"1\",\n        \"answerLabel\": \"Use specific text\"\n      }\n    ]\n  }\n}\n```\n\n### Second request as an answer to the first question\n\n```json\n{\n  \"languages\": [\n    \"en\"\n  ],\n  \"questions\": [\n    {\n      \"questionId\": \"0\",\n      \"answerId\": \"0\"\n    }\n  ]\n}\n```\n\n### Second and final response\n\n```json\n{\n  \"previousQuestions\": [\n    {\n      \"questionId\": \"0\",\n      \"answerId\": \"0\"\n    }\n  ],\n  \"resultTexts\": {\n    \"lang\": \"en\",\n    \"value\": \"UN 0478 SUBSTANCES, EXPLOSIVE, N.O.S. (technical name), 1.3G, (C5000D)\"\n  }\n}\n```",
        "operationId": "adr_text_on_bill",
        "parameters": [
          {
            "description": "UN code to search for",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "example": "3226",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "First request to start": {
                  "value": {
                    "languages": [
                      "en"
                    ]
                  }
                },
                "Second request as an answer to the first question": {
                  "value": {
                    "languages": [
                      "en"
                    ],
                    "questions": [
                      {
                        "questionId": "0",
                        "answerId": "0"
                      }
                    ]
                  }
                }
              },
              "schema": {
                "$ref": "#/components/schemas/TextOnBillRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TextOnBillResponse"
                },
                "examples": {
                  "First response": {
                    "value": {
                      "nextQuestion": {
                        "questionId": "0",
                        "questionLabel": "Use default text or specific text on transport document?",
                        "answers": [
                          {
                            "answerId": "0",
                            "answerLabel": "Use default text"
                          },
                          {
                            "answerId": "1",
                            "answerLabel": "Use specific text"
                          }
                        ]
                      }
                    }
                  },
                  "Second and final response": {
                    "value": {
                      "previousQuestions": [
                        {
                          "questionId": "0",
                          "answerId": "0"
                        }
                      ],
                      "resultTexts": [
                        {
                          "lang": "en",
                          "value": "UN 0478 SUBSTANCES, EXPLOSIVE, N.O.S. (technical name), 1.3G, (C5000D)"
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": "Success. `nextQuestion`, `errors`, `resultTexts` are mutually exclusive."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/ResourceNotFound"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "x-api_key": []
          }
        ],
        "summary": "Determine legal text",
        "tags": [
          "adr"
        ]
      }
    },
    "/freightdocuments/{freightDocumentId}/transportconditions/content": {
      "get": {
        "parameters": [
          {
            "name": "encodeBase64",
            "in": "query",
            "description": "If set to `false` or non-existent, will stream the binary. If set to `true` will stream a base64. encoded content.",
            "example": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "tags": [
          "freight document private"
        ],
        "summary": "Get transport conditions content",
        "description": "Gets the content of the transport conditions. This endpoint can reply the file content in binary format, or as a base64 encoded string.\n",
        "operationId": "get_transport_conditions_content",
        "security": [
          {
            "bearer": []
          },
          {
            "x-api_key": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "headers": {
              "Content-Type": {
                "schema": {
                  "description": "MIME type of the served file.",
                  "type": "string",
                  "enum": [
                    "application/pdf"
                  ]
                }
              }
            },
            "content": {
              "application/pdf": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    }
  },
  "webhooks": {
    "subscriptionEvent": {
      "post": {
        "security": [
          {
            "basic_auth": []
          }
        ],
        "summary": "Subscription event",
        "description": "Information about a new event that user is subscribed to.",
        "operationId": "subscription_event",
        "tags": [
          "subscriptions"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubscriptionCallback"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully."
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "main_auth": {
        "type": "oauth2",
        "flows": {
          "implicit": {
            "authorizationUrl": "http://example.com/api/oauth/dialog",
            "scopes": {
              "read:users": "read users info",
              "write:users": "modify or remove users"
            }
          }
        }
      },
      "bearer": {
        "type": "apiKey",
        "name": "Authorization",
        "in": "header",
        "description": "Used to send a valid OAuth 2 access token. The format is: `Bearer {token}`.\n"
      },
      "x-api_key": {
        "type": "apiKey",
        "in": "header",
        "name": "X-API-Key",
        "description": "API key based authentication; see walkthrough TODO link.\n"
      },
      "basic_auth": {
        "type": "http",
        "scheme": "basic",
        "description": "The POST request authenticates the caller with client_id and client_secret by offering a Basic Authorization header. The Basic string is the base64 encoded form of {client_id}:{client_secret}. The authorization server requires client authentication, it will authenticate the client, and validate the user password credentials. For example, to authorize as `demo / p@55w0rd` the client would send `Authorization: Basic ZGVtbzpwQDU1dzByZA==`"
      }
    },
    "schemas": {
      "HeartbeatResponse": {
        "type": "object",
        "properties": {
          "buildVersion": {
            "description": "API build version.",
            "type": "string",
            "examples": [
              "1.894.0"
            ]
          },
          "compatibilityVersion": {
            "description": "The compatibility version.",
            "type": "string",
            "examples": [
              "2022-11-22"
            ],
            "format": "date"
          }
        },
        "additionalProperties": false
      },
      "OAuthResponse": {
        "type": "object",
        "properties": {
          "access_token": {
            "description": "The access token that should be used with requests that need authentication.",
            "type": "string",
            "examples": [
              "a515aac4-9478-4409-ad1e-257478e69cad"
            ],
            "format": "uuid"
          },
          "token_type": {
            "description": "The type of the token, which is always: `bearer`",
            "type": "string",
            "examples": [
              "bearer"
            ]
          },
          "refresh_token": {
            "description": "The refresh token belonging to this access token, when the access token is expired you can use this token to retrieve a new access token.",
            "type": "string",
            "examples": [
              "d19871ee-5d5e-4365-a4a7-87366c33b135"
            ],
            "format": "uuid"
          },
          "expires_in": {
            "description": "The number of seconds until the access token will expire",
            "type": "integer",
            "examples": [
              899
            ]
          },
          "scope": {
            "description": "The requested oauth scope",
            "type": "string",
            "examples": [
              "transfollow"
            ]
          },
          "accountSecret": {
            "description": "Base64 encoded account secret (64 bytes long)",
            "type": "string",
            "examples": [
              "ZyI1m+gJYItSMdwWaKSvDWTy8vVqZQDT5trw1Pm2C5hDRLsHVfknf/wc8RXz8QS9Dhq8+kAP7jpdEg6dyW6/zw=="
            ]
          },
          "accountId": {
            "description": "ID of the logged in account",
            "type": "string",
            "examples": [
              "abc001"
            ]
          }
        },
        "additionalProperties": false
      },
      "ApiError": {
        "additionalProperties": false,
        "properties": {
          "code": {
            "description": "Error code.",
            "examples": [
              "5.0"
            ],
            "type": "string"
          },
          "description": {
            "description": "User friendly description of the error.",
            "examples": [
              "User friendly description of the error"
            ],
            "type": "string"
          },
          "field": {
            "description": "The name of the field this error is about.",
            "example": "someField",
            "type": "string",
            "x-nullable": true
          },
          "invalidValue": {
            "description": "The invalid value of the field.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiErrors": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "description": "Array of errors occurred.",
            "items": {
              "$ref": "#/components/schemas/ApiError"
            }
          }
        },
        "additionalProperties": false
      },
      "CollectionDeliverySigningMethod": {
        "type": "string",
        "description": "Signing method.",
        "example": "TFA",
        "anyOf": [
          {
            "title": "TFA",
            "type": "string",
            "description": "TransFollow secure electronic signature involving two registered parties equipped with devices with the TransFollow app installed"
          },
          {
            "title": "OWN",
            "type": "string",
            "description": "Implicit signature by the carrier with no signature from the counterparty."
          },
          {
            "title": "SIGN_ON_GLASS",
            "type": "string",
            "description": "Counterparty signing on the carrier’s device with a hand-written signature (no counterparty device needed)"
          },
          {
            "title": "SIGNING_CODE_EMAIL",
            "type": "string",
            "description": "Counterparty is identified by a code sent by email at signing moment (no counterparty device needed)"
          },
          {
            "title": "SIGNING_ID_CODE",
            "description": "Counterparty is identified by scanning an external unique QRCode (or barcode) (no counterparty device needed)",
            "type": "string"
          },
          {
            "title": "DOCUMENT_UPLOAD",
            "description": "The file of a CMR is uploaded as a proof of transfer.",
            "type": "string"
          }
        ]
      },
      "Carrier2CarrierSigningMethod": {
        "type": "string",
        "description": "Signing method.",
        "example": "TFA",
        "anyOf": [
          {
            "title": "TFA",
            "description": "TransFollow secure electronic signature involving two registered parties equipped with devices with the TransFollow app installed"
          },
          {
            "title": "OWN",
            "description": "Implicit signature by the carrier with no signature from the counterparty."
          },
          {
            "title": "SIGNING_CODE_EMAIL",
            "description": "Counterparty is identified by a code sent by email at signing moment (no counterparty device needed)"
          }
        ]
      },
      "AvailableSigningMethods": {
        "type": "object",
        "required": [
          "collection",
          "carrierToCarrier",
          "delivery"
        ],
        "properties": {
          "collection": {
            "description": "Signing methods the carrier is allowed to use during collection.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CollectionDeliverySigningMethod"
            }
          },
          "carrierToCarrier": {
            "description": "Signing methods the carrier is allowed to use during a carrierToCarrier transaction.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Carrier2CarrierSigningMethod"
            }
          },
          "delivery": {
            "description": "Signing methods the carrier is allowed to use during delivery.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CollectionDeliverySigningMethod"
            }
          }
        }
      },
      "ExcludedTransferType": {
        "type": "string",
        "example": "CARRIER_TO_CARRIER",
        "anyOf": [
          {
            "title": "CARRIER_TO_CARRIER",
            "description": "Transfer from one carrier to another"
          },
          {
            "title": "DELIVERY",
            "description": "Delivery"
          },
          {
            "title": "DELIVERY_FOR_FURTHER_INSPECTION",
            "description": "Delivery for further inspection"
          },
          {
            "title": "LEAVE_AT_INTERMEDIATE",
            "description": "Leave cargo at an intermediate location"
          },
          {
            "title": "PICKUP_FROM_INTERMEDIATE",
            "description": "Pickup cargo from an intermediate location"
          }
        ]
      },
      "PredefinedReturnableTransportItem": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 255,
            "description": "Description or name."
          },
          "ssccCode": {
            "maxLength": 25,
            "description": "Serial Shipping Container Code according to SSCC-18 barcode specification.",
            "type": "string"
          },
          "internalCode": {
            "description": "Can be used as an external identifier.",
            "maxLength": 100,
            "type": "string"
          },
          "shortName": {
            "description": "Short summary.",
            "maxLength": 100,
            "type": "string"
          },
          "gsOneCode": {
            "description": "The assigned GS1 code.",
            "maxLength": 100,
            "type": "string"
          },
          "imageUrl": {
            "minLength": 5,
            "maxLength": 1000,
            "example": "https://example.com/image.png",
            "type": "string",
            "description": "Url of the image of this returnable transport item"
          }
        }
      },
      "TimesConfiguration": {
        "type": "object",
        "properties": {
          "mandatoryArrivalTime": {
            "description": "Whether the carrier is required to register arrival time during times inspection.",
            "type": "boolean",
            "example": true
          },
          "mandatoryDepartureTime": {
            "description": "Whether the carrier is required to register departure time during times inspection.",
            "type": "boolean",
            "example": true
          },
          "mandatoryStartLoadingUnloadingTime": {
            "description": "Whether the carrier is required to register start loading/unloading time during times inspection.",
            "type": "boolean",
            "example": true
          },
          "mandatoryEndLoadingUnloadingTime": {
            "description": "Whether the carrier is required to register end loading/unloading time during times inspection.",
            "type": "boolean",
            "example": true
          }
        }
      },
      "CommentsAndAttachmentsConfiguration": {
        "type": "object",
        "properties": {
          "mandatoryCollectionPicture": {
            "description": "Whether the carrier is required to add an observation with a picture during the comments and attachments inspection when collecting the goods.",
            "type": "boolean",
            "example": true
          },
          "mandatoryDeliveryPicture": {
            "description": "Whether the carrier is required to add an observation with a picture during the comments and attachments inspection when delivering the goods.",
            "type": "boolean",
            "example": true
          },
          "signingMethodsWithMandatoryPicture": {
            "description": "Signing methods for which the carrier is required to add an observation with a picture.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CollectionDeliverySigningMethod"
            }
          }
        }
      },
      "SigningInspections": {
        "type": "object",
        "properties": {
          "showGoods": {
            "description": "Whether goods should be reviewed by the driver in the Transfollow mobile app before signing.",
            "type": "boolean",
            "example": true
          },
          "showRtis": {
            "description": "Whether rtis should be reviewed by the driver in the Transfollow mobile app before signing.",
            "type": "boolean",
            "example": true
          },
          "showTimes": {
            "description": "Whether arrival/departure times should be reviewed by the driver in the Transfollow mobile app before signing.",
            "type": "boolean",
            "example": true
          },
          "timesConfiguration": {
            "description": "Configuration of the times inspection behavior.",
            "$ref": "#/components/schemas/TimesConfiguration"
          },
          "showReferences": {
            "description": "Whether references should be reviewed by the driver in the Transfollow mobile app before signing.",
            "type": "boolean",
            "example": true
          },
          "showLicensePlates": {
            "description": "Whether license plates should be reviewed by the driver in the Transfollow mobile app before signing.",
            "type": "boolean",
            "example": true
          },
          "showCommentsAndAttachments": {
            "description": "Whether comments and attachments should be reviewed by the driver before signing.",
            "type": "boolean",
            "example": true
          },
          "commentsAndAttachmentsConfiguration": {
            "description": "Configuration of the comments and attachments signing inspection behavior.",
            "$ref": "#/components/schemas/CommentsAndAttachmentsConfiguration"
          },
          "showTemperatureControl": {
            "description": "Whether a temperature control should be done by the driver before signing.",
            "type": "boolean",
            "example": true
          },
          "showAddress": {
            "description": "Whether the signing location should be reviewed by the driver before signing.",
            "type": "boolean",
            "example": true
          },
          "showCleaning": {
            "description": "Whether the cleaning information should be reviewed by the driver before signing .",
            "type": "boolean",
            "example": true
          }
        }
      },
      "SignOnGlassConfiguration": {
        "type": "object",
        "description": "Configuration of the sign on glass process. When this configuration is provided at least one of the two fields must be set to true. The TransFollow Drive App requires at least one of the fields is filled in by the signatory.",
        "properties": {
          "companyNameRequired": {
            "type": "boolean",
            "example": false,
            "description": "If enabled the name of the company is mandatory for sign on glass."
          },
          "signatoryNameRequired": {
            "type": "boolean",
            "example": true,
            "description": "If enabled the name of the initiator party (like the driver) is mandatory for sign on glass."
          }
        }
      },
      "SigningInstructions": {
        "type": "object",
        "description": "Instructions given to the driver right at the beginning of the signing process",
        "properties": {
          "collection": {
            "x-nullable": true,
            "type": "string",
            "description": "Instructions displayed when starting signing for collection",
            "example": "Please refer to the desk in case of dispute or call 1 800 800 800"
          },
          "delivery": {
            "x-nullable": true,
            "type": "string",
            "description": "Instructions displayed when starting signing for delivery",
            "example": "Make sure consignee agrees with delivered goods and then call 1 800 800 800"
          }
        }
      },
      "FreightDocumentConfiguration": {
        "properties": {
          "allowRoleUpdateForCarrier": {
            "description": "Decides if the carrier can update the place of taking over and the place of delivery to a freight document in status `ISSUED` or `TRANSIT` using the mobile application. The default value is `false`.",
            "example": false,
            "type": "boolean"
          },
          "allowRtiAddition": {
            "description": "Decides if the carrier or subsequent carriers can add new returnable transport items (RTI) to a freight document in status `ISSUED` or `TRANSIT` using the mobile application. A null value will be interpreted as `false`.",
            "example": true,
            "type": "boolean"
          },
          "availableSigningMethods": {
            "$ref": "#/components/schemas/AvailableSigningMethods",
            "description": "The signing methods the carrier is allowed to sign with."
          },
          "counterpartySigningInspections": {
            "description": "Inspections to be made by the counterparty when signing the freight document.",
            "type": "object",
            "properties": {
              "showSeals": {
                "description": "Whether counterparty seals inspection is enabled.",
                "type": "boolean",
                "example": true
              }
            }
          },
          "disableContainerAddition": {
            "description": "If set to `true` carrier can no longer add a container using the TFApp",
            "example": true,
            "type": "boolean"
          },
          "disableTimesRegistration": {
            "description": "If set to `true` carrier can no longer view or update the arrival time, start loading time, end loading time and departure time using the TFApp.",
            "example": true,
            "type": "boolean"
          },
          "disableUpdatingGoodsItems": {
            "description": "If set to `true` carrier can no longer edit goods items or ADRs in the TFApp.",
            "example": true,
            "type": "boolean"
          },
          "disableUpdatingReturnableTransportItems": {
            "description": "If set to `true` carrier can no longer edit RTIs in the TFApp.",
            "example": true,
            "type": "boolean"
          },
          "excludedTransferTypes": {
            "description": "Transfer types that will not be displayed as a choice for carrier when signing. Both `DELIVERY_FOR_FURTHER_INSPECTION` and `DELIVERY` can't be excluded at the same time as there would be no possibility for the driver to sign for delivery",
            "items": {
              "$ref": "#/components/schemas/ExcludedTransferType"
            },
            "type": "array"
          },
          "forceCarrierSoGSignature": {
            "description": "Force the Carrier to put his signature on glass when using \"sign on glass\" signing method. The default value is `false`.",
            "example": false,
            "type": "boolean"
          },
          "predefinedComments": {
            "description": "List of comments from which the carrier can choose when adding a new comment. The predefined text is appended to the comment text.",
            "example": [
              "Predefined comment 1",
              "Predefined comment 2"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "predefinedReturnableTransportItems": {
            "description": "A list of templates for new returnable transport items that can be added by the carrier.",
            "items": {
              "$ref": "#/components/schemas/PredefinedReturnableTransportItem"
            },
            "type": "array"
          },
          "signingInspections": {
            "$ref": "#/components/schemas/SigningInspections",
            "description": "Inspections to be made by the carrier when signing the freight document. If none provided, the `signingInspections` values of the submitter's account settings will be used."
          },
          "skipFreightDocumentDetails": {
            "description": "Whether to skip the details screen when clicking on the freight document in the freight document overview in the app. The default value is `false`.",
            "example": false,
            "type": "boolean"
          },
          "freightDocumentDetailsReadOnly": {
            "description": "Whether the freight document details screen in TF Drive should be readonly to prevent the carrier from changing any data on that screen.. The default value is `false`.",
            "example": false,
            "type": "boolean"
          },
          "skipProofOfTransfer": {
            "description": "Do not display the proof of transfer code at then end of the signing process. The default value is `false`.",
            "example": false,
            "type": "boolean"
          },
          "blockSigningOnError": {
            "type": "boolean",
            "example": false,
            "description": "If warnings are raised during the TFA accounts validation, then the signing process is blocked. The default value is `false`."
          },
          "allowCheckIn": {
            "type": "boolean",
            "example": false,
            "description": "If enabled the driver can start a _check-in_ that allows him to be identified before entering the loading/unloading site. The check-in is performed separately from the signing process."
          },
          "showFirstReference": {
            "type": "boolean",
            "example": false,
            "description": "If enabled the freight document's first reference (if it exists) is displayed in the overview and details."
          },
          "signOnGlass": {
            "$ref": "#/components/schemas/SignOnGlassConfiguration"
          },
          "excludedRtiTransferenceTypes": {
            "description": "RTI transference types that will not be available for the carrier to choose in the TF Drive app when adding or updating RTIs. All types can't be excluded.",
            "type": "array",
            "example": [
              "DELIVER_AT_CONSIGNOR",
              "DELIVER_AT_CONSIGNEE"
            ],
            "items": {
              "type": "string",
              "enum": [
                "DELIVER_AT_CONSIGNOR",
                "PICK_UP_AT_CONSIGNOR",
                "DELIVER_AT_CONSIGNEE",
                "PICK_UP_AT_CONSIGNEE"
              ]
            }
          },
          "signingInstructions": {
            "$ref": "#/components/schemas/SigningInstructions"
          }
        },
        "type": "object"
      },
      "AccountConfiguration": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/FreightDocumentConfiguration"
          },
          {
            "type": "object",
            "properties": {
              "methodsOfPackaging": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        ]
      },
      "AccountLanguage": {
        "description": "The language preference for the account.",
        "enum": [
          "en",
          "nl",
          "fr",
          "de",
          "es",
          "cs"
        ],
        "examples": [
          "en"
        ],
        "maxLength": 2,
        "minLength": 2,
        "readOnly": false,
        "type": "string"
      },
      "Account": {
        "additionalProperties": false,
        "properties": {
          "acceptTermsAndConditions": {
            "description": "Whether or not the user has accepted the terms and conditions",
            "examples": [
              true
            ],
            "readOnly": true,
            "type": "boolean"
          },
          "useMainAccountCreditsAllowed": {
            "description": "Whether sub-account is allowed to use it's main account credits.",
            "type": "boolean",
            "examples": [
              true
            ]
          },
          "requiredToChangePasswordOnNextLogin": {
            "description": "Whether the user must change the password on next login. The user will be prompted to change the password in the TransFollow app.",
            "type": "boolean",
            "examples": [
              true
            ]
          },
          "accountId": {
            "description": "The unique id of the account",
            "examples": [
              "123"
            ],
            "readOnly": true,
            "type": "string"
          },
          "accountNumber": {
            "description": "An 8-digit account number",
            "examples": [
              2
            ],
            "maxLength": 8,
            "minLength": 8,
            "readOnly": true,
            "type": "string"
          },
          "accountType": {
            "description": "Account type",
            "enum": [
              "BASIC",
              "ENABLER"
            ],
            "examples": [
              "BASIC"
            ],
            "readOnly": true,
            "type": "string"
          },
          "configuration": {
            "$ref": "#/components/schemas/AccountConfiguration",
            "description": "Freight document configuration.",
            "readOnly": false
          },
          "credits": {
            "description": "The number of credits",
            "examples": [
              "999999970"
            ],
            "readOnly": true,
            "type": "string"
          },
          "email": {
            "description": "The account email address",
            "examples": [
              "test-user@transfollow.nl"
            ],
            "format": "email",
            "maxLength": 255,
            "readOnly": true,
            "type": "string"
          },
          "glnCode": {
            "description": "The GLN code (see https://www.gs1.org/standards/id-keys/gln)",
            "examples": [
              123456789012
            ],
            "maxLength": 13,
            "readOnly": false,
            "type": "string"
          },
          "idCode": {
            "description": "The code that will be displayed as a QRCode to identify the counterparty account when using `SIGNING_ID_CODE` signing method. This code will be automatically generated if none is provided in order to make `SIGNING_ID_CODE` signing method to be always available by default to any account.",
            "examples": [
              "936DA01F-9ABD-4D9D-80C7-02AF85C822A8"
            ],
            "maxLength": 255,
            "readOnly": false,
            "type": "string"
          },
          "language": {
            "$ref": "#/components/schemas/AccountLanguage"
          },
          "mainAccount": {
            "$ref": "#/components/schemas/Account",
            "description": "The main account information (only available if the caller is a sub-account).",
            "readOnly": true
          },
          "name": {
            "description": "The name of the account",
            "examples": [
              "test-user"
            ],
            "minLength": 1,
            "readOnly": false,
            "type": "string"
          },
          "phoneNumber": {
            "description": "Valid phone number format, matching the regular expression `/^[0-9+(][0-9()#.\\s/ext-]{9,}$/`",
            "examples": [
              123456789
            ],
            "maxLength": 100,
            "readOnly": false,
            "type": "string"
          },
          "signingInspections": {
            "$ref": "#/components/schemas/SigningInspections",
            "deprecated": true,
            "description": "Inspections to be made by the carrier in the Transfollow mobile app when signing the freight document.",
            "writeOnly": true
          },
          "username": {
            "description": "The username of the account (only available if he is a sub-account).",
            "example": "my_username",
            "maxLength": 255,
            "readOnly": true,
            "type": "string",
            "x-nullable": true
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "NotificationSettingsDetailed": {
        "type": "object",
        "properties": {
          "email": {
            "description": "Indicates whether notification by email is activated.",
            "type": "boolean",
            "example": true
          },
          "push": {
            "description": "Indicates whether notification on mobile device is activated",
            "type": "boolean",
            "example": false
          }
        }
      },
      "NotificationSettingsDetailedWithValue": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/NotificationSettingsDetailed"
          },
          {
            "type": "object",
            "properties": {
              "value": {
                "description": "Additional value valid only for creditsWarning that defines the number of credits below which the notification is triggered.",
                "type": "string",
                "example": "100"
              }
            }
          }
        ]
      },
      "NotificationSettings": {
        "type": "object",
        "properties": {
          "attachmentAddedDetailed": {
            "description": "Notification when attachment is added.",
            "$ref": "#/components/schemas/NotificationSettingsDetailed"
          },
          "carrierRightsDelegatedDetailed": {
            "description": "Notification when account receives carrier rights on a freightdocument.",
            "$ref": "#/components/schemas/NotificationSettingsDetailed"
          },
          "carrierRightsRevokedDetailed": {
            "description": "Notification when those rights are revoked",
            "$ref": "#/components/schemas/NotificationSettingsDetailed"
          },
          "commentsDetailed": {
            "description": "Notification when a comment is posted.",
            "$ref": "#/components/schemas/NotificationSettingsDetailed"
          },
          "consigneeRightsDelegatedDetailed": {
            "description": "Notification when account receives consignee rights on a freightdocument.",
            "$ref": "#/components/schemas/NotificationSettingsDetailed"
          },
          "consigneeRightsRevokedDetailed": {
            "description": "Notification when consignee rights are revoked.",
            "$ref": "#/components/schemas/NotificationSettingsDetailed"
          },
          "consignorRightsDelegatedDetailed": {
            "description": "Notification when account receives consignor rights on a freightdocument.",
            "$ref": "#/components/schemas/NotificationSettingsDetailed"
          },
          "consignorRightsRevokedDetailed": {
            "description": "Notification when consignor rights are revoked.",
            "$ref": "#/components/schemas/NotificationSettingsDetailed"
          },
          "creditsTransferDetailed": {
            "description": "Notification when credit balance is changed due to a credit transfer.",
            "$ref": "#/components/schemas/NotificationSettingsDetailed"
          },
          "creditsWarningDetailed": {
            "description": "Notification when credits are running out.",
            "$ref": "#/components/schemas/NotificationSettingsDetailedWithValue"
          },
          "etasUpdatedDetailed": {
            "description": "Notification when ETAs are updated.",
            "$ref": "#/components/schemas/NotificationSettingsDetailed"
          },
          "freightDocumentCreatedDetailed": {
            "description": "Notification when freight document created and account has role on document.",
            "$ref": "#/components/schemas/NotificationSettingsDetailed"
          },
          "placeOfDeliveryRightsDelegatedDetailed": {
            "description": "Notification when account receives place of delivery rights on a freightdocument.",
            "$ref": "#/components/schemas/NotificationSettingsDetailed"
          },
          "placeOfDeliveryRightsRevokedDetailed": {
            "description": "Notification when place of delivery rights rights are revoked.",
            "$ref": "#/components/schemas/NotificationSettingsDetailed"
          },
          "placeOfTakingOverRightsDelegatedDetailed": {
            "description": "Notification when account receives place of taking over rights on a freightdocument.",
            "$ref": "#/components/schemas/NotificationSettingsDetailed"
          },
          "placeOfTakingOverRightsRevokedDetailed": {
            "description": "Notification when place of taking over rights rights are revoked.",
            "$ref": "#/components/schemas/NotificationSettingsDetailed"
          },
          "statusUpdatesDeliveredDetailed": {
            "description": "Notification when status becomes delivered.",
            "$ref": "#/components/schemas/NotificationSettingsDetailed"
          },
          "statusUpdatesTransitDetailed": {
            "description": "Notification when status becomes transit.",
            "$ref": "#/components/schemas/NotificationSettingsDetailed"
          },
          "statusUpdatesCancelledDetailed": {
            "description": "Notification when status becomes cancelled.",
            "$ref": "#/components/schemas/NotificationSettingsDetailed"
          },
          "submitterRightsDelegatedDetailed": {
            "description": "Notification when account receives submitter rights on a freightdocument.",
            "$ref": "#/components/schemas/NotificationSettingsDetailed"
          },
          "submitterRightsRevokedDetailed": {
            "description": "Notification when submitter rights rights are revoked.",
            "$ref": "#/components/schemas/NotificationSettingsDetailed"
          },
          "transferredToAnotherCarrierDetailed": {
            "description": "Notification when a freight has been transferred from a carrier to another.",
            "$ref": "#/components/schemas/NotificationSettingsDetailed"
          },
          "goodsUpdated": {
            "description": "Notification when a good was updated.",
            "$ref": "#/components/schemas/NotificationSettingsDetailed"
          }
        },
        "additionalProperties": false
      },
      "ChangePasswordRequest": {
        "type": "object",
        "required": [
          "newPassword",
          "oldPassword"
        ],
        "properties": {
          "newPassword": {
            "type": "string",
            "minLength": 12,
            "description": "The new password.",
            "example": "MyNewP@SSw0rd"
          },
          "oldPassword": {
            "type": "string",
            "minLength": 12,
            "description": "The old password.",
            "example": "MyOldP@SSw0rd"
          }
        }
      },
      "FreightDocumentRoleType": {
        "type": "string",
        "description": "Type of freight document role.",
        "oneOf": [
          {
            "const": "SUBMITTER",
            "type": "string",
            "description": "The submitter of the freight document"
          },
          {
            "const": "CONSIGNOR",
            "type": "string",
            "description": "The consignor"
          },
          {
            "const": "PLACEOFTAKINGOVER",
            "type": "string",
            "description": "The place where the goods are taken over"
          },
          {
            "const": "CARRIER",
            "type": "string",
            "description": "The carrier"
          },
          {
            "const": "SUBSEQUENTCARRIER",
            "type": "string",
            "description": "The subsequent carrier"
          },
          {
            "const": "CONSIGNEE",
            "type": "string",
            "description": "The consignee"
          },
          {
            "const": "PLACEOFDELIVERY",
            "type": "string",
            "description": "The place where the goods are delivered"
          },
          {
            "const": "CLIENT",
            "type": "string",
            "description": "The client that ordered the transport"
          }
        ],
        "example": "CARRIER"
      },
      "DelegateRole": {
        "type": "object",
        "required": [
          "roles",
          "emailAddressOfDelegatee"
        ],
        "properties": {
          "emailAddressOfDelegatee": {
            "description": "Email address of the delegatee.",
            "type": "string",
            "format": "email",
            "example": "delegatee@example.com"
          },
          "roles": {
            "description": "Delegatee role on the freight document.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FreightDocumentRoleType"
            },
            "example": [
              "CONSIGNEE",
              "PLACEOFDELIVERY"
            ]
          }
        }
      },
      "SubaccountRequest": {
        "type": "object",
        "required": [
          "username",
          "password",
          "useMainAccountCreditsAllowed",
          "pending"
        ],
        "properties": {
          "name": {
            "description": "Name of the account.",
            "type": "string",
            "examples": [
              "demo user"
            ]
          },
          "username": {
            "description": "The username of the account, will be used as login. `@` character is not allowed in username.",
            "type": "string",
            "examples": [
              "username_1"
            ]
          },
          "password": {
            "description": "The password of the account. _Required if the account is being created_.",
            "minLength": 12,
            "type": "string",
            "examples": [
              "password123123123"
            ]
          },
          "useMainAccountCreditsAllowed": {
            "description": "Allow sub-account to use it's main account credits.",
            "type": "boolean",
            "examples": [
              true
            ]
          },
          "requiredToChangePasswordOnNextLogin": {
            "description": "Whether the user must change the password on next login. The user will be prompted to change the password in the TransFollow app.",
            "type": "boolean",
            "examples": [
              true
            ]
          },
          "requestGPSTracking": {
            "type": "boolean",
            "description": "The user will be requested to allow GPS tracking when they are the active carrier on a freight document.",
            "examples": [
              true
            ]
          },
          "pending": {
            "type": "boolean",
            "description": "Whether the subaccount will be pending or active after creation.",
            "examples": [
              false
            ]
          }
        },
        "additionalProperties": false
      },
      "SubaccountUpdateRequest": {
        "type": "object",
        "properties": {
          "name": {
            "description": "Name of the account.",
            "type": "string",
            "examples": [
              "demo user"
            ]
          },
          "password": {
            "description": "The password of the account. _Required if the account is being created_.",
            "minLength": 12,
            "type": "string",
            "examples": [
              "password123123123"
            ]
          },
          "useMainAccountCreditsAllowed": {
            "description": "Allow sub-account to use it's main account credits.",
            "type": "boolean",
            "examples": [
              true
            ]
          },
          "requiredToChangePasswordOnNextLogin": {
            "description": "Whether the user must change the password on next login. The user will be prompted to change the password in the TransFollow app. If no value provided then the property is not updated.",
            "type": "boolean",
            "examples": [
              true
            ]
          },
          "requestGPSTracking": {
            "type": "boolean",
            "description": "The user will be requested to allow GPS tracking when they are the active carrier on a freight document.",
            "examples": [
              true
            ]
          },
          "pending": {
            "type": "boolean",
            "description": "Whether the subaccount will be pending or active after creation.",
            "examples": [
              false
            ]
          }
        },
        "additionalProperties": false
      },
      "Location": {
        "type": "object",
        "properties": {
          "latitude": {
            "description": "GPS Latitude coordinate.",
            "type": "number",
            "format": "double",
            "example": 49.6839305,
            "minimum": -90,
            "maximum": 90
          },
          "longitude": {
            "description": "GPS Longitude coordinate.",
            "type": "number",
            "format": "double",
            "example": 24.0338217,
            "minimum": -180,
            "maximum": 180
          },
          "accuracy": {
            "description": "Accuracy of the location in meters. TF Drive App uses https://developer.android.com/reference/android/location/Location#getAccuracy()",
            "type": "number",
            "format": "float",
            "example": 5.5,
            "minimum": 0
          },
          "crs": {
            "description": "Coordinate reference system. Default value is \"EPSG:4326\".",
            "type": "string",
            "example": "EPSG:4326"
          },
          "provider": {
            "description": "Provider of this location.",
            "type": "string",
            "maxLength": 255,
            "example": "fused"
          }
        },
        "additionalProperties": false
      },
      "CountryCode3": {
        "format": "ISO3 code",
        "description": "Country code according to ISO 3166 - alpha-3 (ISO3 code)",
        "maxLength": 3,
        "minLength": 3,
        "type": "string",
        "example": "NLD"
      },
      "Partner": {
        "additionalProperties": false,
        "properties": {
          "addressComplement": {
            "description": "The address complement of the partner.",
            "examples": [
              "The house close to the beach"
            ],
            "maxLength": 255,
            "type": "string"
          },
          "addressLocation": {
            "$ref": "#/components/schemas/Location",
            "description": "The GPS location of the address of the partner."
          },
          "buildingNumber": {
            "description": "The building number of the partner.",
            "examples": [
              "4"
            ],
            "maxLength": 100,
            "type": "string"
          },
          "carrierCode": {
            "description": "The carrier code of the partner",
            "examples": [
              "LKHZUGJB"
            ],
            "maxLength": 12,
            "type": "string"
          },
          "cityName": {
            "description": "The city name of the partner.",
            "examples": [
              "Geneva"
            ],
            "type": "string"
          },
          "contactEmail": {
            "description": "The contact email address of the partner.",
            "examples": [
              "contact@test.tld"
            ],
            "format": "email",
            "maxLength": 100,
            "type": "string"
          },
          "contactFaxNumber": {
            "description": "The contact fax number of the partner.",
            "examples": [
              440808080101
            ],
            "maxLength": 100,
            "type": "string"
          },
          "contactName": {
            "description": "The contact name of the partner.",
            "examples": [
              "Mr Cheng"
            ],
            "maxLength": 100,
            "type": "string"
          },
          "contactNote": {
            "description": "The contact note.",
            "examples": [
              "First floor"
            ],
            "type": "string"
          },
          "contactPhoneNumber": {
            "description": "The contact phone number of the partner.",
            "examples": [
              "+440808080808"
            ],
            "maxLength": 100,
            "type": "string"
          },
          "countryCode": {
            "$ref": "#/components/schemas/CountryCode3",
            "description": "The country code of the partner."
          },
          "email": {
            "description": "The email address of the partner.",
            "examples": [
              "cheng@test.tld"
            ],
            "format": "email",
            "maxLength": 100,
            "type": "string"
          },
          "glnCode": {
            "description": "The GS1 GLN code of the address (unique identification).",
            "example": "GLN",
            "maxLength": 13,
            "type": "string"
          },
          "name": {
            "description": "The name of the partner.",
            "examples": [
              "name 1"
            ],
            "maxLength": 255,
            "type": "string"
          },
          "partnerId": {
            "description": "The id of the partner.",
            "examples": [
              "1"
            ],
            "readOnly": true,
            "type": "string"
          },
          "phoneNumber": {
            "description": "The contact phone number of the partner.",
            "examples": [
              "+440808080808"
            ],
            "maxLength": 100,
            "type": "string"
          },
          "postalBox": {
            "description": "The postal box of the partner.",
            "examples": [
              "56"
            ],
            "maxLength": 100,
            "type": "string"
          },
          "postalCode": {
            "description": "The postal code of the partner.",
            "examples": [
              "74258"
            ],
            "maxLength": 100,
            "type": "string"
          },
          "roles": {
            "description": "Collection of roles associated to the partner.",
            "items": {
              "enum": [
                "CONSIGNOR",
                "PLACEOFTAKINGOVER",
                "CARRIER",
                "CONSIGNEE",
                "PLACEOFDELIVERY",
                "CLIENT"
              ],
              "example": "CARRIER",
              "type": "string"
            },
            "type": "array"
          },
          "streetName": {
            "description": "The street name of the partner.",
            "examples": [
              "Baker Str."
            ],
            "maxLength": 100,
            "type": "string"
          },
          "taxIdentificationNumber": {
            "description": "The tax identification number of the partner.",
            "examples": [
              "987"
            ],
            "maxLength": 100,
            "type": "string"
          },
          "taxIdentificationNumberType": {
            "description": "The tax identification number type of the partner (NIF, SIREN or other).",
            "examples": [
              "SIREN"
            ],
            "maxLength": 30,
            "type": "string"
          },
          "traderIdentificationNumber": {
            "description": "The trader identification number (TIN) of the partner, which is used for by different authorities, such as customs or others. Example: EORI in EU.",
            "examples": [
              "12345"
            ],
            "maxLength": 100,
            "type": "string"
          },
          "externalIdentifier": {
            "description": "Identifier that can help identify this partner in an external system (for example TMS, WMS, ERP ...).",
            "examples": [
              "ext-123456"
            ],
            "maxLength": 255,
            "type": "string"
          }
        },
        "required": [
          "name",
          "roles"
        ],
        "type": "object"
      },
      "VehicleType": {
        "description": "Type of the vehicle",
        "enum": [
          "TRUCK",
          "TRAILER"
        ],
        "example": "TRUCK",
        "type": "string"
      },
      "AccountHeaderResponse": {
        "additionalProperties": false,
        "properties": {
          "accountId": {
            "description": "The unique id of the account",
            "examples": [
              "123"
            ],
            "readOnly": true,
            "type": "string"
          },
          "email": {
            "description": "The account email address",
            "examples": [
              "test-user@transfollow.nl"
            ],
            "format": "email",
            "maxLength": 255,
            "readOnly": true,
            "type": "string"
          },
          "intendGPSTracking": {
            "description": "Whether the users intends to track GPS coordinates when they are the active carrier on a freight document.",
            "examples": [
              true
            ],
            "type": "boolean"
          },
          "name": {
            "description": "The name of the account",
            "examples": [
              "test-user"
            ],
            "minLength": 1,
            "readOnly": false,
            "type": "string"
          },
          "requestGPSTracking": {
            "description": "The user will be requested to allow GPS tracking when they are the active carrier on a freight document.",
            "examples": [
              true
            ],
            "type": "boolean"
          },
          "requiredToChangePasswordOnNextLogin": {
            "description": "Whether the user must change the password on next login. The user will be prompted to change the password in the TransFollow app.",
            "examples": [
              true
            ],
            "type": "boolean"
          },
          "useMainAccountCreditsAllowed": {
            "description": "Whether sub-account is allowed to use it's main account credits.",
            "examples": [
              true
            ],
            "type": "boolean"
          },
          "username": {
            "description": "The username of the account (only available if he is a sub-account).",
            "example": "my_username",
            "maxLength": 255,
            "readOnly": true,
            "type": "string",
            "x-nullable": true
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "Vehicle": {
        "additionalProperties": false,
        "required": [
          "type",
          "licensePlateNumber"
        ],
        "properties": {
          "username": {
            "maxLength": 100,
            "type": "string",
            "writeOnly": true,
            "description": "Username of existing subaccount.",
            "x-nullable": true,
            "examples": [
              "subaccount_username"
            ]
          },
          "licensePlateNumber": {
            "maxLength": 20,
            "description": "License plate number.",
            "examples": [
              "OB-12-GN"
            ],
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/VehicleType"
          },
          "vehicleId": {
            "description": "The id of the vehicle.",
            "examples": [
              "1"
            ],
            "readOnly": true,
            "type": "string"
          },
          "vehicleIdentificationNumber": {
            "maxLength": 100,
            "description": "Vehicle Identification Number (VIN).",
            "examples": [
              "3B7KC22Z1WG105898"
            ],
            "type": "string"
          },
          "account": {
            "readOnly": true,
            "x-nullable": true,
            "description": "Subaccount to which the license plate belongs to.",
            "$ref": "#/components/schemas/AccountHeaderResponse"
          }
        },
        "type": "object"
      },
      "EmployeeCommon": {
        "type": "object",
        "required": [
          "firstName",
          "lastName"
        ],
        "properties": {
          "employeeId": {
            "type": "string",
            "readOnly": true,
            "description": "The unique identifier for the employee.",
            "example": "21343"
          },
          "firstName": {
            "maxLength": 100,
            "description": "First name of the driver.",
            "type": "string",
            "examples": [
              "John"
            ]
          },
          "lastName": {
            "maxLength": 100,
            "description": "Last name of the driver.",
            "type": "string",
            "examples": [
              "Smith"
            ]
          },
          "email": {
            "maxLength": 100,
            "description": "Email of the driver.",
            "type": "string",
            "examples": [
              "johnsmith@company.tld"
            ],
            "format": "email"
          },
          "phoneNumber": {
            "description": "Phone number of the driver.",
            "type": "string",
            "examples": [
              "+440808080808"
            ]
          },
          "username": {
            "maxLength": 100,
            "description": "Username of an existing subaccount.",
            "type": "string",
            "examples": [
              "johnsmith"
            ]
          },
          "driver": {
            "type": "boolean",
            "description": "Whether the employee is a driver.",
            "examples": [
              true
            ]
          },
          "idCode": {
            "type": "string",
            "description": "Id code.",
            "example": "8878"
          },
          "account": {
            "readOnly": true,
            "description": "The account of an employee.",
            "$ref": "#/components/schemas/AccountHeaderResponse"
          }
        },
        "additionalProperties": false
      },
      "Driver": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EmployeeCommon"
          },
          {
            "properties": {
              "driverId": {
                "readOnly": true,
                "description": "The id of the driver.",
                "example": "123",
                "type": "string"
              }
            }
          }
        ]
      },
      "Subscription": {
        "type": "object",
        "required": [
          "callbackUrl",
          "eventType"
        ],
        "properties": {
          "basicAuthCredentials": {
            "description": "optional credentials used during delivery of the event",
            "type": "object",
            "x-nullable": true,
            "required": [
              "username",
              "password"
            ],
            "properties": {
              "username": {
                "description": "The username used in basic auth header.",
                "type": "string",
                "examples": [
                  "tfuser"
                ]
              },
              "password": {
                "description": "The password used in basic auth header.",
                "type": "string",
                "examples": [
                  "password1"
                ]
              }
            },
            "additionalProperties": false
          },
          "callbackUrl": {
            "description": "The callback url",
            "type": "string",
            "examples": [
              "https://www.my-domain.tld/account/callback"
            ],
            "format": "url"
          },
          "mtlsCertificateAlias": {
            "example": "mtls_alias",
            "type": "string",
            "description": "mTLS certificate used for authentication with the webhook endpoint. Certificates can only be setup by TransFollow, please contact support if you want to use this functionality."
          }
        },
        "additionalProperties": false
      },
      "AccountSubscription": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Subscription"
          },
          {
            "type": "object",
            "properties": {
              "eventType": {
                "description": "The event type.",
                "type": "string",
                "enum": [
                  "CREDIT_USED"
                ],
                "examples": [
                  "CREDIT_USED"
                ]
              }
            }
          }
        ]
      },
      "AccountRegisterByEmail": {
        "type": "object",
        "required": [
          "emailToken",
          "name",
          "password",
          "acceptTermsAndConditions"
        ],
        "properties": {
          "name": {
            "description": "The name of the account.",
            "type": "string",
            "examples": [
              "user name"
            ]
          },
          "phoneNumber": {
            "description": "Valid phone number format, matching the regular expression `/^[0-9+(][0-9()#.\\s/ext-]{9,}$/`",
            "examples": [
              123456789
            ],
            "maxLength": 100,
            "type": "string"
          },
          "password": {
            "description": "The password of the account.",
            "minLength": 12,
            "type": "string",
            "examples": [
              "password12312312321"
            ]
          },
          "emailToken": {
            "description": "The email token that was sent to the email address.",
            "type": "string",
            "examples": [
              "a1fbf1e67c6f7d2118b190ec79e07a043f34ab4b1cdec788de753a74d1392fe6"
            ]
          },
          "acceptTermsAndConditions": {
            "description": "A flag for whether the terms and conditions have been accepted. **Must be `true`**.",
            "type": "boolean",
            "examples": [
              true
            ]
          },
          "language": {
            "$ref": "#/components/schemas/AccountLanguage"
          }
        },
        "additionalProperties": false
      },
      "AvcConditions": {
        "type": "object",
        "properties": {
          "name": {
            "description": "Conditions name.",
            "type": "string",
            "examples": [
              "avc2002"
            ]
          },
          "imageUrl": {
            "description": "URL pointing to a AVC 2002 logo image (PNG only).",
            "type": "string",
            "examples": [
              "http://host:8080/static/rest-api/images/avc2002.png"
            ],
            "format": "url"
          },
          "text": {
            "description": "The AVC 2002 conditions in plain text (default) or html format.",
            "type": "string",
            "examples": [
              "These are the conditions for avc2002."
            ]
          }
        },
        "additionalProperties": false
      },
      "TermsAndConditions": {
        "type": "object",
        "properties": {
          "version": {
            "description": "Version of the returned terms and conditions.",
            "type": "string",
            "examples": [
              20191114
            ]
          },
          "language": {
            "description": "Language of the returned terms and conditions.",
            "type": "string",
            "examples": [
              "nl"
            ]
          },
          "text": {
            "description": "This is the english terms and conditions.",
            "type": "string",
            "examples": [
              "These are the conditions for avc2002."
            ]
          }
        },
        "additionalProperties": false
      },
      "FreightDocumentAdditionalDocument": {
        "properties": {
          "viewPdfUrl": {
            "type": "string",
            "description": "Url to open the freight document PDF for the corresponding pdfTemplateType. The url requires no authentication.",
            "example": "https://partner.transfollow.com/api/freightdocuments/pdf/?token=xyzxyz&templateType=EUROPEENNE",
            "format": "URL",
            "readOnly": true
          },
          "pdfTemplateType": {
            "type": "string",
            "description": "The PDF template type of the freight document.",
            "enum": [
              "ECMR",
              "EUROPEENNE",
              "CARTA_DE_PORTE",
              "DOCUMENTO_DE_CONTROL",
              "NAKLADNI_LIST_CZ",
              "LIEFERSCHEIN"
            ],
            "example": "EUROPEENNE"
          }
        },
        "required": [
          "pdfTemplateType"
        ],
        "type": "object"
      },
      "AccountReferenceResponse": {
        "additionalProperties": false,
        "properties": {
          "accountId": {
            "description": "The unique id of the account",
            "examples": [
              "123"
            ],
            "readOnly": true,
            "type": "string"
          },
          "accountNumber": {
            "description": "An 8-digit account number",
            "examples": [
              2
            ],
            "maxLength": 8,
            "minLength": 8,
            "readOnly": true,
            "type": "string"
          },
          "email": {
            "description": "The account email address",
            "examples": [
              "test-user@transfollow.nl"
            ],
            "format": "email",
            "maxLength": 255,
            "readOnly": true,
            "type": "string"
          },
          "name": {
            "description": "The name of the account",
            "examples": [
              "test-user"
            ],
            "minLength": 1,
            "readOnly": false,
            "type": "string"
          },
          "phoneNumber": {
            "description": "Valid phone number format, matching the regular expression `/^[0-9+(][0-9()#.\\s/ext-]{9,}$/`",
            "examples": [
              123456789
            ],
            "maxLength": 100,
            "readOnly": false,
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "ApprovalAction": {
        "type": "string",
        "description": "Action for the approval.",
        "enum": [
          "DELIVERY",
          "COLLECTION",
          "CARRIER_TO_CARRIER"
        ],
        "example": "DELIVERY"
      },
      "ApprovalType": {
        "description": "The type of approval.",
        "enum": [
          "TFA",
          "SIGN_ON_GLASS",
          "OWN",
          "SIGNING_CODE",
          "SIGNING_ID_CODE"
        ],
        "example": "SIGN_ON_GLASS"
      },
      "SigningCodeValidationResponse": {
        "type": "object",
        "properties": {
          "result": {
            "type": "boolean",
            "description": "The result of the validation."
          },
          "reason": {
            "type": "string",
            "description": "The reason of the result.",
            "oneOf": [
              {
                "const": "SUCCESS",
                "description": "Signing code is correct"
              },
              {
                "const": "CODE_NO_LONGER_VALID",
                "description": "Signing code not valid for the latest version of the document."
              },
              {
                "const": "CODE_NOT_VALID",
                "description": "Signing code is not valid for this document."
              }
            ]
          },
          "description": {
            "description": "The description of the result.",
            "type": "string"
          }
        }
      },
      "TfaEvidence": {
        "type": "object",
        "properties": {
          "responseCode": {
            "type": "string",
            "description": "The response code given by the counter-party of the carrier in the approval.",
            "example": "TODO"
          },
          "responseCodeValidated": {
            "$ref": "#/components/schemas/SigningCodeValidationResponse"
          },
          "type": {
            "type": "string",
            "description": "Type of the evidence.",
            "enum": [
              "TFA"
            ],
            "example": "TFA"
          },
          "allContentHashes": {
            "description": "In case of version 4: all the content hashes of all the freight documents over which the signature was generated",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "allTransFollowNumbers": {
            "description": "In case of version 4: all the TransFollowNumbers of all the freight documents over which the signature was generated",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "documentIndex": {
            "description": "In case of version 4: the index of this document within the list of freight documents over which the signature was generated",
            "type": "integer",
            "minimum": 0
          }
        }
      },
      "AttachmentMimeType": {
        "type": "string",
        "description": "MIME type of the attachment.",
        "enum": [
          "application/pdf",
          "image/png",
          "image/jpeg"
        ],
        "example": "image/jpeg"
      },
      "AttachmentType": {
        "type": "string",
        "description": "The type of the attachment. When adding attachment to a freight document can only be one of: `SUPPLEMENT`, `GOODS`, `GENERAL`, `EDITABLE_PDF`",
        "enum": [
          "GOODS",
          "GENERAL",
          "SIGNONGLASS",
          "SUPPLEMENT",
          "EDITABLE_PDF",
          "COMMENT",
          "CLEANING_CERTIFICATE",
          "APPROVAL_DOCUMENT"
        ],
        "example": "GENERAL"
      },
      "Attachment": {
        "properties": {
          "attachmentId": {
            "description": "The unique id of the attachment.",
            "example": "1",
            "readOnly": true,
            "type": "string"
          },
          "content": {
            "contentEncoding": "Base64",
            "description": "The actual content of the attachment (2 MB maximum).. Base64 encoded jpg image. `attachment/{id}` will return the resource, `attachment/{id}/content` the content. Afterwards attachments can be uploaded (as comments) without limit. The `mimeType` field will be automatically be populated based on the content.",
            "example": "/9j/4AAQSkZJRgABAQAAyADIAAD/2wBDAAEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQH/2wBDAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQH/wAARCAABAAEDAREAAhEBAxEB/8QAFAABAAAAAAAAAAAAAAAAAAAACf/EABQQAQAAAAAAAAAAAAAAAAAAAAD/xAAVAQEBAAAAAAAAAAAAAAAAAAAJCv/EABQRAQAAAAAAAAAAAAAAAAAAAAD/2gAMAwEAAhEDEQA/ABfFOv4f/9k="
          },
          "documentType": {
            "description": "The type of the document.",
            "enum": [
              "PACKING_SLIP"
            ],
            "example": "PACKING_SLIP",
            "type": "string",
            "x-nullable": true
          },
          "mimeType": {
            "readOnly": true,
            "$ref": "#/components/schemas/AttachmentMimeType"
          },
          "name": {
            "description": "The description of the file.",
            "example": "An Attachment name",
            "type": "string"
          },
          "originalFileName": {
            "description": "The name of the file",
            "example": "Architecture 2013-11-05.jpg",
            "type": "string"
          },
          "sealed": {
            "description": "If `true`, then only parties that have attachment view permissions will be able to see the attachment. By default carriers and subsequent carriers will not have attachment view permissions if the sealed flag is set to `true`.",
            "example": false,
            "type": "boolean"
          },
          "size": {
            "readOnly": true,
            "description": "Attachment's size in bytes",
            "example": 234567,
            "minimum": 0,
            "type": "integer"
          },
          "type": {
            "$ref": "#/components/schemas/AttachmentType"
          }
        },
        "required": [
          "originalFileName",
          "sealed",
          "content",
          "type"
        ],
        "type": "object"
      },
      "SignedBy": {
        "type": "object",
        "description": "The information about the signor.",
        "properties": {
          "name": {
            "description": "The name of the signor.",
            "type": "string",
            "example": "John Doe"
          },
          "email": {
            "description": "The email address of the signor.",
            "type": "string",
            "format": "email",
            "example": "signor@example.com"
          }
        }
      },
      "SignOnGlassEvidence": {
        "type": "object",
        "properties": {
          "attachments": {
            "description": "Attachment that contains an image of the sign-on-glass signature.",
            "$ref": "#/components/schemas/Attachment"
          },
          "signedOnGlassBy": {
            "description": "The name and email address of the signor. The signor had the option to enter these fields when signing for the document.",
            "$ref": "#/components/schemas/SignedBy"
          },
          "type": {
            "type": "string",
            "description": "Type of the evidence.",
            "enum": [
              "SIGN_ON_GLASS"
            ],
            "example": "SIGN_ON_GLASS"
          }
        }
      },
      "SigningCodeEmailEvidence": {
        "type": "object",
        "properties": {
          "signedBy": {
            "$ref": "#/components/schemas/SignedBy"
          },
          "signingCode": {
            "type": "string",
            "description": "The code used to sign",
            "example": "1234"
          }
        }
      },
      "SigningEmployeeIdCodeEvidence": {
        "type": "object",
        "properties": {
          "employeeId": {
            "type": "string",
            "description": "Id of the employee that signed (`null` if the employee has not been identified).",
            "example": "123"
          },
          "employeeName": {
            "type": "string",
            "description": "Name of the employee that signed (`null` if the employee has not been identified).",
            "example": "Jane Doe"
          },
          "signingIdCodeResult": {
            "type": "boolean",
            "description": "Whether the employee has been identified or not.",
            "example": true
          }
        }
      },
      "ApprovalResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "approvedByAccount": {
            "readOnly": true,
            "description": "The account of the user for which this approval is for.",
            "$ref": "#/components/schemas/AccountReferenceResponse"
          },
          "submittedBy": {
            "readOnly": true,
            "description": "The account that sunmitted the approval.",
            "$ref": "#/components/schemas/AccountReferenceResponse"
          },
          "action": {
            "$ref": "#/components/schemas/ApprovalAction"
          },
          "approvalId": {
            "type": "string",
            "description": "A unique id to identify the approval.",
            "example": "898"
          },
          "approvalLinkId": {
            "description": "A unique identifier in the scope of the freight document to be able to link to another approval on the same freight document with the same identifier. Used to group approvals that belong to the same signing moment.",
            "type": "string",
            "format": "UUID",
            "minLength": 36,
            "maxLength": 36,
            "example": "5810aec7-f2c5-43d1-9d0f-afc2c1225844"
          },
          "commitId": {
            "readOnly": true,
            "type": "string",
            "description": "A unique id to identify the commit.",
            "example": "123"
          },
          "location": {
            "description": "The location where the approval took place.",
            "$ref": "#/components/schemas/Location"
          },
          "missingLocationReason": {
            "description": "If the `location` field is missing, this field can contain the reason why user location could not be captured.",
            "type": "string",
            "enum": [
              "UNKNOWN",
              "NO_GPS_HARDWARE",
              "DEVICE_GPS_DISABLED",
              "PERMISSION_DENIED",
              "NOT_RETRIEVED"
            ],
            "example": "NO_GPS_HARDWARE"
          },
          "counterpartyEanNumber": {
            "description": "EAN number of the company where the signing takes place.",
            "type": "string",
            "example": "31231553897"
          },
          "role": {
            "description": "Role of the actor who is the author of the signature.",
            "type": "string",
            "enum": [
              "NONE",
              "SUBMITTER",
              "CONSIGNOR",
              "PLACEOFTAKINGOVER",
              "CARRIER",
              "SUBSEQUENTCARRIER",
              "CONSIGNEE",
              "PLACEOFDELIVERY"
            ],
            "example": "CARRIER"
          },
          "smdBatchSize": {
            "description": "The total amount of freight documents that were signed when signing for multiple freight documents.",
            "type": "integer",
            "minimum": 1,
            "maximum": 25
          },
          "smdLinkId": {
            "description": "A unique identifier that indicates this signature was placed when signing for multiple freight documents. When this is filled in, this signature and it's evidence are marked as the \"parent\".",
            "type": "string",
            "format": "UUID",
            "maxLength": 36,
            "minLength": 36
          },
          "type": {
            "$ref": "#/components/schemas/ApprovalType"
          },
          "evidence": {
            "description": "Various evidence types depending on approval `type`.",
            "type": "object",
            "oneOf": [
              {
                "$ref": "#/components/schemas/TfaEvidence"
              },
              {
                "$ref": "#/components/schemas/SignOnGlassEvidence"
              },
              {
                "$ref": "#/components/schemas/SigningCodeEmailEvidence"
              },
              {
                "$ref": "#/components/schemas/SigningEmployeeIdCodeEvidence"
              }
            ]
          },
          "submitForFurtherInspection": {
            "type": "boolean",
            "description": "Whether the approval was submitted for the consignee to approve after inspecting the goods. This is only has an impact on the action `DELIVERY`.",
            "example": false
          },
          "external": {
            "type": "boolean",
            "description": "Whether the approval was submitted has not been done by the system but uploaded by an external system.",
            "example": false
          }
        }
      },
      "FreightDocumentRole": {
        "required": [
          "countryCode",
          "name"
        ],
        "properties": {
          "accountId": {
            "readOnly": true,
            "description": "The string value of the id of the account",
            "example": "123123",
            "type": "string"
          },
          "addressComplement": {
            "description": "The address complement.",
            "type": "string"
          },
          "addressLocation": {
            "$ref": "#/components/schemas/Location",
            "description": "GPS location of the address. Used for convenience when GPS navigation is required."
          },
          "buildingNumber": {
            "description": "Building number.",
            "example": "11",
            "type": "string",
            "maxLength": 100
          },
          "cityName": {
            "description": "City name.",
            "example": "London",
            "type": "string",
            "maxLength": 100
          },
          "contactEmailAddress": {
            "description": "In cases where the role is a company, this could be used as the contact email.",
            "example": "role@example.com",
            "format": "email",
            "type": "string",
            "maxLength": 100
          },
          "contactFaxNumber": {
            "description": "In cases where the role is a company, this could be used as the contact fax number.",
            "example": 380631231237,
            "type": "string"
          },
          "contactName": {
            "description": "Contact name of the role.",
            "example": "Jane Doe",
            "type": "string",
            "maxLength": 100
          },
          "contactNote": {
            "description": "Any additional contact information or note.",
            "example": "contact note",
            "type": "string"
          },
          "contactPhoneNumber": {
            "description": "In cases where the role is a company, this could be used as the 'contact' phone number.",
            "example": 380631231237,
            "type": "string",
            "maxLength": 100
          },
          "countryCode": {
            "$ref": "#/components/schemas/CountryCode3",
            "description": "The country code."
          },
          "countryName": {
            "description": "The name of the country.",
            "example": "France",
            "type": "string"
          },
          "glnCode": {
            "description": "The GS1 GLN code of the address (unique identification).",
            "type": "string",
            "maxLength": 13
          },
          "name": {
            "description": "Name of the role. In the case where the role is a person, the name is in this field.",
            "example": "John Doe",
            "type": "string"
          },
          "postalBox": {
            "description": "Postal box.",
            "example": "PB12",
            "type": "string",
            "maxLength": 100
          },
          "postalCode": {
            "description": "Postal code.",
            "example": "2676NJ",
            "type": "string",
            "maxLength": 100
          },
          "roleId": {
            "readOnly": true,
            "description": "The id of the role.",
            "example": "33",
            "type": "string"
          },
          "streetName": {
            "description": "The name of the street.",
            "example": "Example Str.",
            "type": "string",
            "maxLength": 100
          },
          "submittedAccountEmailAddress": {
            "description": "This email is used to look up the account that will be associated with a role. If no account exists, then user will be sent an invitation email.",
            "example": "email@example.com",
            "format": "email",
            "type": "string"
          },
          "taxIdentificationNumber": {
            "description": "The tax identification number of the role.",
            "maxLength": 100,
            "type": "string"
          },
          "taxIdentificationNumberType": {
            "description": "The tax identification number type of the role (NIF, SIREN or other).",
            "maxLength": 30,
            "type": "string"
          },
          "traderIdentificationNumber": {
            "description": "The trader identification number (TIN) of the role, which is used for by different authorities, such as customs or others. Example: EORI in EU.",
            "example": "TIN",
            "maxLength": 100,
            "type": "string"
          },
          "externalIdentifier": {
            "description": "Identifier that can help identify this role in an external system (for example TMS, WMS, ERP ...).",
            "examples": [
              "ext-123456"
            ],
            "maxLength": 255,
            "type": "string"
          }
        },
        "type": "object"
      },
      "MileageUnit": {
        "type": "string",
        "description": "The unit used for fields representing distance (currently kilometer and mile).",
        "enum": [
          "KM",
          "MI"
        ],
        "example": "KM"
      },
      "LicensePlate": {
        "properties": {
          "distanceDriven": {
            "description": "Distance driven with this vehicle",
            "properties": {
              "mileageAtArrival": {
                "description": "Mileage when the driver arrives (stops driving in the context of this freight document).",
                "example": 2288.22,
                "format": "float",
                "type": "number"
              },
              "mileageAtDeparture": {
                "description": "Mileage when the driver departs (starts driving in the context of this freight document).",
                "example": 3388.22,
                "format": "float",
                "type": "number"
              },
              "mileageUnit": {
                "$ref": "#/components/schemas/MileageUnit"
              },
              "traversedDistance": {
                "description": "The distance that has been traveled in the context of this freight document.",
                "example": 123.12,
                "format": "float",
                "type": "number"
              }
            },
            "type": "object"
          },
          "licensePlateNumber": {
            "example": "NF-123-XC",
            "description": "License plate number",
            "type": "string"
          },
          "vehicleType": {
            "$ref": "#/components/schemas/VehicleType"
          }
        },
        "type": "object"
      },
      "LicensePlateData": {
        "type": "object",
        "description": "Information about the carrier vehicles.",
        "properties": {
          "licensePlates": {
            "description": "A collection of all license plates for the role.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LicensePlate"
            }
          }
        }
      },
      "FreightDocumentCarrierRole": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/FreightDocumentRole"
          },
          {
            "type": "object",
            "properties": {
              "licensePlateData": {
                "$ref": "#/components/schemas/LicensePlateData"
              },
              "permitNumber": {
                "type": "string",
                "maxLength": 100,
                "example": "PN123"
              }
            }
          }
        ]
      },
      "GoodsDescription": {
        "type": "string",
        "description": "Description of the goods item to be transported when the cleaning was performed.",
        "example": "The goods were dirty."
      },
      "IdtfCode": {
        "description": "Code describing goods intended for animal feed in a bulk transport.",
        "type": "string",
        "minLength": 5,
        "maxLength": 5,
        "example": "IDTFC"
      },
      "CleaningRegime": {
        "type": "string",
        "description": "Regime of the cleaning performed on the trailer.",
        "enum": [
          "NONE",
          "A",
          "B",
          "C",
          "D"
        ],
        "example": "B"
      },
      "Cleaning": {
        "type": "object",
        "required": [
          "scheme"
        ],
        "properties": {
          "scheme": {
            "description": "Name of the cleaning scheme the freight document should comply with (at the moment, only `QUALIMAT` is supported)",
            "type": "string",
            "example": "QUALIMAT",
            "enum": [
              "QUALIMAT"
            ]
          },
          "performedCleaning": {
            "description": "Cleaning information related to the ongoing transport. Information usually provided by the one in charge of the cleaning.",
            "type": "object",
            "required": [
              "goodsDescription",
              "idtfCode",
              "cleaningEntity"
            ],
            "properties": {
              "goodsDescription": {
                "$ref": "#/components/schemas/GoodsDescription"
              },
              "idtfCode": {
                "$ref": "#/components/schemas/IdtfCode"
              },
              "cleaningRegime": {
                "$ref": "#/components/schemas/CleaningRegime"
              },
              "cleaningProduct": {
                "minLength": 0,
                "type": "string",
                "description": "Code of the detergent or disinfectant used for cleaning, if any."
              },
              "cleaningEntity": {
                "description": "Entity that performed the cleaning.",
                "type": "object",
                "properties": {
                  "type": {
                    "description": "Type of the cleaning entity.",
                    "type": "string",
                    "enum": [
                      "SELF",
                      "STATION"
                    ],
                    "example": "STATION"
                  },
                  "name": {
                    "type": "string",
                    "description": "Name of the cleaning entity.",
                    "example": "Cleaning Inc."
                  }
                }
              }
            }
          },
          "previousLoads": {
            "description": "List of previous transports with loads and cleaning information. Loads ordering is stored as provided in the array (from most recent to least recent)",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "goodsDescription": {
                  "$ref": "#/components/schemas/GoodsDescription"
                },
                "idtfCode": {
                  "$ref": "#/components/schemas/IdtfCode"
                },
                "cleaningRegime": {
                  "$ref": "#/components/schemas/CleaningRegime"
                }
              }
            }
          },
          "cleaningCertificate": {
            "description": "Certificate of the last cleaning performed on the trailer (attachment type is `CLEANING_CERTIFICATE`)",
            "$ref": "#/components/schemas/Attachment"
          }
        }
      },
      "FreightDocumentMission": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "groupingIdentifier"
        ],
        "properties": {
          "groupingIdentifier": {
            "maxLength": 100,
            "description": "Allows this freight document to be assigned to a specific mission. All freight documents in a transport with the same `transportReference` will be grouped under the same mission. When using the mission module, the driver will then receive a mission with all the freight documents belonging to the group. This can make the workflow of a driver easier because it is no longer needed to manually select the relevant freight documents at each loading or unloading stop..",
            "type": "string",
            "example": "mission_grouping_id"
          }
        }
      },
      "CommentImportance": {
        "type": "string",
        "enum": [
          "INFORMATION",
          "WARNING",
          "IRREGULARITY"
        ],
        "example": "INFORMATION"
      },
      "FreightDocumentCommentEventType": {
        "type": "string",
        "description": "The event during which the comment was placed.",
        "x-nullable": true,
        "enum": [
          "PICKUP",
          "TRANSFER_TO_ANOTHER_CARRIER",
          "DELIVER_AT_MIDDLE_LOCATION",
          "PICKUP_AT_MIDDLE_LOCATION",
          "DELIVERY",
          "VERIFICATION_AFTER_DELIVERY"
        ],
        "example": "DELIVERY"
      },
      "Comment": {
        "required": [
          "text",
          "attachments"
        ],
        "properties": {
          "accountId": {
            "description": "The accountId logged-in user who submitted the comment.",
            "example": "989",
            "type": "string",
            "readOnly": true
          },
          "attachments": {
            "description": "Attachments of this comments.",
            "items": {
              "$ref": "#/components/schemas/Attachment"
            },
            "type": "array"
          },
          "clientMeta": {
            "deprecated": true,
            "description": "Any additional meta data can be added to this field. This field is intended to be used by third-party applications.",
            "type": "string"
          },
          "commentId": {
            "readOnly": true,
            "description": "A unique id to identify the comment.",
            "example": "123",
            "type": "string"
          },
          "createDateTimeClient": {
            "readOnly": true,
            "description": "The calculated date and time when the comment was created by the client. The client sends a `secondsSinceCreation` value equal or bigger than zero as part of the POST. The backend calculates the UTC value of the moment the client actually created the comment. Formatted according to ISO 8601 (ISO 8601:2004): `YYYY-MM-DDThh:mm:ss.sZ`",
            "format": "date-time",
            "type": "string",
            "example": "2023-05-25T10:54:31.134Z"
          },
          "createDateTimeServer": {
            "readOnly": true,
            "description": "The date and time when the comment was received by the server. Formatted according to ISO 8601 (ISO 8601:2004): `YYYY-MM-DDThh:mm:ss.sZ`",
            "format": "date-time",
            "type": "string",
            "example": "2023-05-25T10:54:31.134Z"
          },
          "creatorName": {
            "description": "The name of the author who wrote the comment.",
            "type": "string"
          },
          "authorName": {
            "description": "The name of the author who wrote the comment.",
            "writeOnly": true,
            "type": "string"
          },
          "importance": {
            "$ref": "#/components/schemas/CommentImportance"
          },
          "eventType": {
            "$ref": "#/components/schemas/FreightDocumentCommentEventType"
          },
          "creatorRole": {
            "description": "The freight document role of the logged-in user who submitted the comment.",
            "$ref": "#/components/schemas/FreightDocumentRoleType"
          },
          "type": {
            "readOnly": true,
            "deprecated": true,
            "type": "string",
            "description": "The type of comment. It is always `LEGAL_COMMENT`.",
            "example": "LEGAL_COMMENT"
          },
          "text": {
            "description": "The comment text.",
            "maxLength": 10000,
            "type": "string",
            "example": "This is my vigilant observation!"
          },
          "location": {
            "$ref": "#/components/schemas/Location"
          },
          "productId": {
            "type": "integer",
            "description": "The structured good productId that this observation belongs to.",
            "example": "989"
          },
          "secondsSinceCreation": {
            "writeOnly": true,
            "type": "integer",
            "minimum": 0,
            "description": "Number of seconds since this object was created before it was sent to the server."
          },
          "clientCommitId": {
            "description": "A unique identifier generated by the TfApp",
            "type": "string",
            "format": "UUID"
          }
        },
        "type": "object"
      },
      "TimeSpan": {
        "properties": {
          "startDateTime": {
            "description": "Start of the time span.",
            "format": "date-time",
            "type": "string",
            "example": "2023-05-25T10:54:31Z"
          },
          "endDateTime": {
            "description": "End of the time span.",
            "format": "date-time",
            "example": "2023-06-25T10:54:31Z"
          }
        },
        "type": "object"
      },
      "FreightDocumentConsigneeRole": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/FreightDocumentRole"
          },
          {
            "type": "object",
            "properties": {
              "timeWindow": {
                "$ref": "#/components/schemas/TimeSpan",
                "description": "The time window for picking up and/or delivering of the goods."
              }
            }
          }
        ]
      },
      "WeightUnit": {
        "type": "string",
        "description": "The weight unit.",
        "enum": [
          "GRAM",
          "KILOGRAM",
          "POUND",
          "METRIC_TON,",
          "SHORT_TON",
          "LONG_TON"
        ],
        "example": "KILOGRAM"
      },
      "Container": {
        "type": "object",
        "required": [
          "number"
        ],
        "properties": {
          "number": {
            "maxLength": 255,
            "type": "string",
            "description": "Number of the container.",
            "example": "CNT-NUM"
          },
          "type": {
            "maxLength": 255,
            "description": "Type of container (e.g. 20ft Dry Van, 20ft Reefer)",
            "type": "string",
            "example": "20ft Reefer"
          },
          "verifiedGrossMass": {
            "type": "number",
            "format": "float",
            "description": "Verified gross mass of the container.",
            "minimum": 0
          },
          "verifiedGrossMassUnit": {
            "description": "Weight unit of the `verifiedGrossMass`. If `verifiedGrossMass` is defined, this field is mandatory.",
            "$ref": "#/components/schemas/WeightUnit"
          },
          "netWeight": {
            "description": "The net weight of the container.",
            "type": "number",
            "format": "float",
            "minimum": 0,
            "example": 44.44
          },
          "netWeightUnit": {
            "description": "The net weight unit of the item `netWeight`.  If `netWeight` is defined, this field is mandatory.",
            "$ref": "#/components/schemas/WeightUnit"
          }
        }
      },
      "ControlledTemperature": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "Value of the recorded temperature",
            "example": "17C"
          },
          "dateTime": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time of the event formatted according to ISO 8601 (ISO 8601:2004): `YYYY-MM-DDThh:mm:ssZ`"
          }
        }
      },
      "ControlledTemperatures": {
        "type": "object",
        "description": "Controlled temperatures.",
        "properties": {
          "atDelivery": {
            "description": "Temperature recorded at delivery when the refrigeration system was controlled.",
            "$ref": "#/components/schemas/ControlledTemperature"
          },
          "atPreviousLocation": {
            "description": "Temperature recorded at the previous location before delivery when the refrigeration system was controlled.",
            "$ref": "#/components/schemas/ControlledTemperature"
          }
        }
      },
      "TransferType": {
        "type": "string",
        "description": "Transfer type.",
        "example": "COLLECTION",
        "oneOf": [
          {
            "const": "COLLECTION",
            "description": "Collection",
            "type": "string"
          },
          {
            "const": "CARRIER_TO_CARRIER",
            "description": "Transfer from one carrier to another",
            "type": "string"
          },
          {
            "const": "DELIVERY",
            "description": "Delivery",
            "type": "string"
          },
          {
            "const": "DELIVERY_FOR_FURTHER_INSPECTION",
            "description": "Delivery for further inspection",
            "type": "string"
          },
          {
            "const": "LEAVE_AT_INTERMEDIATE",
            "description": "Leave cargo at an intermediate location",
            "type": "string"
          },
          {
            "const": "PICKUP_FROM_INTERMEDIATE",
            "description": "Pickup cargo from an intermediate location",
            "type": "string"
          }
        ]
      },
      "Timestamp": {
        "type": "string",
        "format": "date-time",
        "example": "2014-11-07T22:00:00Z",
        "description": "Formatted formatted according to ISO 8601 (ISO 8601:2004): `YYYY-MM-DDThh:mm:ssZ`"
      },
      "FreightDocumentEventRole": {
        "type": "string",
        "description": "The role which registered the event. The user has to have this role on the freight document.",
        "example": "CARRIER",
        "oneOf": [
          {
            "const": "CARRIER",
            "description": "The carrier",
            "type": "string"
          },
          {
            "const": "CONSIGNOR",
            "description": "The consignor",
            "type": "string"
          },
          {
            "const": "CONSIGNEE",
            "description": "The consignee",
            "type": "string"
          },
          {
            "const": "PLACEOFTAKINGOVER",
            "description": "The place of taking over",
            "type": "string"
          },
          {
            "const": "PLACEOFDELIVERY",
            "description": "The place of delivery",
            "type": "string"
          }
        ]
      },
      "FreightDocumentEventType": {
        "type": "string",
        "description": "Type of freight document event.",
        "oneOf": [
          {
            "title": "CARRIER_ARRIVAL",
            "type": "string",
            "description": "The carrier arrive on site"
          },
          {
            "title": "CARRIER_DEPARTURE",
            "type": "string",
            "description": "The carrier leaves the site"
          },
          {
            "title": "LOADING_START",
            "type": "string",
            "description": "The carrier starts loading the goods"
          },
          {
            "title": "LOADING_END",
            "type": "string",
            "description": "The carrier has finished loading the goods"
          },
          {
            "title": "UNLOADING_START",
            "type": "string",
            "description": "The carrier starts unloading the goods"
          },
          {
            "title": "UNLOADING_END",
            "type": "string",
            "description": "The carrier has finished unloading the goods"
          },
          {
            "title": "CONTROL_STAMP",
            "type": "string",
            "description": "The carrier has registered a control stamp at the entrance of the site"
          },
          {
            "title": "TEMPERATURE_CONTROL",
            "type": "string",
            "description": "The temperature has been controlled"
          },
          {
            "title": "TEMPERATURE_CONTROL_AT_DELIVERY",
            "type": "string",
            "description": "The temperature has been controlled at the delivery"
          }
        ],
        "example": "TEMPERATURE_CONTROL"
      },
      "FreightDocumentEvent": {
        "properties": {
          "action": {
            "$ref": "#/components/schemas/TransferType",
            "description": "Transfer type during which the event occurred."
          },
          "dateTime": {
            "$ref": "#/components/schemas/Timestamp",
            "description": "The date and time of the event. Formatted formatted according to ISO 8601 (ISO 8601:2004): `YYYY-MM-DDThh:mm:ssZ`"
          },
          "location": {
            "$ref": "#/components/schemas/Location",
            "description": "The geographic location where the event has occurred."
          },
          "role": {
            "$ref": "#/components/schemas/FreightDocumentEventRole"
          },
          "submittedBy": {
            "description": "The actor who submitted the event.",
            "properties": {
              "accountId": {
                "description": "The account id of the actor who submitted the event",
                "example": 777,
                "type": "integer"
              },
              "name": {
                "description": "The name of the actor who submitted the event.",
                "example": "John Doe",
                "type": "string"
              }
            },
            "readOnly": true,
            "type": "object"
          },
          "type": {
            "$ref": "#/components/schemas/FreightDocumentEventType"
          },
          "value": {
            "description": "The value associated with the event.",
            "example": "-15",
            "type": "string"
          }
        },
        "required": [
          "type",
          "role",
          "dateTime",
          "value"
        ],
        "type": "object"
      },
      "HandlingInstructions": {
        "type": "object",
        "description": "Instructions regarding in what circumstances the goods should be transported",
        "properties": {
          "controlledTemperature": {
            "x-nullable": true,
            "type": "boolean",
            "description": "Indication of whether or not the temperature in which the goods remain needs to be controlled",
            "example": true
          },
          "temperature": {
            "x-nullable": true,
            "type": "string",
            "description": "The temperature conditions the goods should be transported in. For example a single temperature or a temperature range and in which temperature unit (C/F)",
            "example": 18
          }
        }
      },
      "AdditionalNotificationTypes": {
        "type": "string",
        "description": "Notification type",
        "example": "STATUS_TO_DELIVERED",
        "anyOf": [
          {
            "title": "STATUS_TO_TRANSIT",
            "description": "Notifies about the Freight Document status being set to Transit"
          },
          {
            "title": "STATUS_TO_DELIVERED",
            "description": "Notifies about the Freight Document status being set to Delivered"
          },
          {
            "title": "RECEIVE_PACKING_SLIP",
            "description": "Sends the packing slip attachment when the status of the Freight Document is set to Issued"
          }
        ]
      },
      "AdditionalEmailNotification": {
        "type": "object",
        "required": [
          "emailAddress",
          "notificationTypes"
        ],
        "properties": {
          "emailAddress": {
            "maxLength": 255,
            "type": "string",
            "description": "Email address of the additional party that should be notified.",
            "format": "email",
            "example": "party@example.com"
          },
          "notificationTypes": {
            "description": "List of notification types that should be sent to the provided email address. <div><u>Important</u>:&nbsp;if left empty, the additionalEmailNotification entry will be removed from the list.</div>",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AdditionalNotificationTypes"
            }
          }
        }
      },
      "Notifications": {
        "type": "object",
        "description": "List of supplementary notifications to be sent to external parties. Only user having the role of submitter can set and get the `notifications` attribute.",
        "properties": {
          "additionalEmailNotifications": {
            "description": "List of notification emails to be sent to each party for the corresponding notification types",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AdditionalEmailNotification"
            }
          }
        }
      },
      "OwnDelegate": {
        "properties": {
          "role": {
            "$ref": "#/components/schemas/FreightDocumentRoleType",
            "description": "Role that was delegated."
          },
          "submittedAccountEmailAddress": {
            "description": "The email address of the account that received the delegated rights.",
            "example": "submitter@example.com",
            "format": "email",
            "type": "string"
          },
          "username": {
            "description": "The username of the sub-account that received the delegated rights.",
            "example": "subaccount-guy",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Permission": {
        "type": "object",
        "properties": {
          "roleId": {
            "type": "string",
            "description": "The roleId identifies the freight document role on which the permissions apply to.",
            "example": "888"
          },
          "permissions": {
            "description": "A list of permission that the user has.",
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "VIEW",
                "SUBMIT_APPROVAL",
                "SUBMIT_APPROVAL_FOR_OTHER_PARTY",
                "UPDATE",
                "ETA",
                "COMMENT",
                "DELEGATE",
                "VIEW_SEALED_ATTACHMENT",
                "CHANGE_STATUS",
                "CHANGE_STRUCTURED_GOODS",
                "UPDATE_ROLE_REFERENCE"
              ],
              "example": "CHANGE_STRUCTURED_GOODS"
            }
          },
          "role": {
            "description": "The freight document role.",
            "$ref": "#/components/schemas/FreightDocumentRoleType"
          }
        }
      },
      "PdfTemplateType": {
        "type": "string",
        "description": "The PDF template type of the freight document. If not provided, defaults to ECMR and can't be modified after the document is created. Note that this field only impacts the format of the downloaded PDF document and does not depend on the `type` of the document being created.",
        "enum": [
          "ECMR",
          "EUROPEENNE",
          "CARTA_DE_PORTE",
          "DOCUMENTO_DE_CONTROL",
          "NAKLADNI_LIST_CZ",
          "LIEFERSCHEIN"
        ],
        "example": "ECMR"
      },
      "FreightDocumentPodRole": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/FreightDocumentRole"
          },
          {
            "type": "object",
            "properties": {
              "timeWindow": {
                "$ref": "#/components/schemas/TimeSpan",
                "description": "The time window for picking up and/or delivering of the goods."
              }
            }
          }
        ]
      },
      "FreightDocumentPotoRole": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/FreightDocumentRole"
          },
          {
            "type": "object",
            "properties": {
              "timeWindow": {
                "$ref": "#/components/schemas/TimeSpan",
                "description": "The time window for picking up and/or delivering of the goods."
              }
            }
          }
        ]
      },
      "ReportedLocations": {
        "type": "object",
        "description": "Describes some specifically recorded locations not relating to general GPS tracking.",
        "properties": {
          "locationCollectionCarrierArrival": {
            "description": "The geographic location where the `collectionCarrierArrival` was set",
            "$ref": "#/components/schemas/Location"
          },
          "locationCollectionCarrierDeparture": {
            "description": "The geographic location where the `collectionCarrierDeparture` was set",
            "$ref": "#/components/schemas/Location"
          },
          "locationDeliveryCarrierArrival": {
            "description": "The geographic location where the `deliveryCarrierArrival` was set",
            "$ref": "#/components/schemas/Location"
          },
          "locationDeliveryCarrierDeparture": {
            "description": "The geographic location where the `deliveryCarrierDeparture` was set",
            "$ref": "#/components/schemas/Location"
          },
          "locationLoadingStartTime": {
            "description": "The geographic location where the startTime for `timeWindowOfTakingOver` was set",
            "$ref": "#/components/schemas/Location"
          },
          "locationLoadingEndTime": {
            "description": "The geographic location where the endTime for `timeWindowOfTakingOver` was set",
            "$ref": "#/components/schemas/Location"
          },
          "locationUnloadingStartTime": {
            "description": "The geographic location where the startTime for `timeWindowOfTakingOver` was set",
            "$ref": "#/components/schemas/Location"
          },
          "locationUnloadingEndTime": {
            "description": "The geographic location where the endTime for `timeWindowOfTakingOver` was set",
            "$ref": "#/components/schemas/Location"
          }
        }
      },
      "Reference": {
        "properties": {
          "allowCarrierEdit": {
            "description": "Whether the carrier is allowed to modify this reference.",
            "example": true,
            "type": "boolean"
          },
          "createdByRoleId": {
            "readOnly": true,
            "description": "The id of the role linked to this reference or null if it is freight document / submitter role",
            "example": "123",
            "type": "string"
          },
          "name": {
            "description": "The name (or key) of the reference value",
            "example": "ref-name",
            "maxLength": 100,
            "minLength": 1,
            "type": "string"
          },
          "referenceId": {
            "readOnly": true,
            "description": "The unique id of the reference. Required when updating an existing reference. Adding references to a freight document is done by adding references without a `referenceId` as body to the `/api/freightdocuments/{id}` PUT. Updating an existing reference to a freight document is done by altering the reference with their `referenceId`.",
            "example": "878",
            "type": "string"
          },
          "value": {
            "description": "The reference value",
            "example": "ref-value",
            "maxLength": 100,
            "minLength": 1,
            "type": "string"
          },
          "submitterOnly": {
            "writeOnly": true,
            "description": "If true, the reference is private for the submitter. TF products won't return it to other parties. Email notifications never display it.",
            "type": "boolean",
            "example": false
          },
          "technical": {
            "type": "boolean",
            "description": "If true, the reference is only returned in API calls. TF products won't display the reference at all.",
            "writeOnly": true,
            "example": false
          },
          "mandatoryForTransferType": {
            "description": "Transfer type in which filling out the reference value becomes mandatory during inspection. If defined, requires `allowCarrierEdit` to be `true`.",
            "type": "string",
            "example": "COLLECTION",
            "enum": [
              "COLLECTION",
              "CARRIER_TO_CARRIER",
              "DELIVERY",
              "DELIVERY_FOR_FURTHER_INSPECTION",
              "LEAVE_AT_INTERMEDIATE",
              "PICKUP_FROM_INTERMEDIATE"
            ]
          }
        },
        "required": [
          "name",
          "value"
        ],
        "type": "object"
      },
      "FreightDocumentStatus": {
        "type": "string",
        "description": "Status of the freight document.",
        "enum": [
          "DRAFT",
          "ISSUED",
          "TRANSIT",
          "DELIVERED",
          "CANCELLED"
        ],
        "example": "ISSUED"
      },
      "GoodsCommon": {
        "type": "object",
        "properties": {
          "internalCode": {
            "description": "Can be used as an external identifier.",
            "example": "external_id",
            "maxLength": 100,
            "type": "string"
          },
          "name": {
            "description": "Description or name.",
            "example": "The name",
            "maxLength": 255,
            "type": "string"
          },
          "numberOfPackages": {
            "description": "The total number of packages.",
            "example": 22,
            "minimum": 0,
            "type": "integer"
          },
          "numberOfPackagesRefusedAtDelivery": {
            "description": "The number of packages refused at delivery.",
            "example": 22,
            "minimum": 0,
            "type": "integer"
          },
          "netWeight": {
            "description": "The net weight. If defined, net weight unit is mandatory.",
            "example": 44.44,
            "format": "float",
            "minimum": 0,
            "type": "number"
          },
          "netWeightUnit": {
            "$ref": "#/components/schemas/WeightUnit",
            "description": "The net weight unit of the item `weight`. If net weight is defined, this field is mandatory."
          },
          "references": {
            "description": "A collection of references.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Reference"
            }
          }
        },
        "required": [
          "name"
        ]
      },
      "VolumeUnit": {
        "type": "string",
        "description": "The volume unit.",
        "enum": [
          "LITRE",
          "CUBIC_METRE",
          "CUBIC_FEET",
          "US_GALLON"
        ],
        "example": "LITRE"
      },
      "AtIssuance": {
        "type": "object",
        "description": "Value of the good when the freight document has been issued.",
        "properties": {
          "numberOfPackages": {
            "description": "The total number of packages at issuance.",
            "example": 22,
            "minimum": 0,
            "type": "integer"
          },
          "weight": {
            "description": "The weight at issuance. `null` if there was no weight specified.",
            "example": 44.44,
            "format": "float",
            "minimum": 0,
            "type": "number"
          },
          "weightUnit": {
            "$ref": "#/components/schemas/WeightUnit",
            "description": "The weight unit of the item `weight` at issuance. `null` if there was no weight specified."
          },
          "netWeight": {
            "description": "The net weight at issuance. `null` if there was no net weight specified.",
            "example": 44.44,
            "format": "float",
            "minimum": 0,
            "type": "number"
          },
          "netWeightUnit": {
            "$ref": "#/components/schemas/WeightUnit",
            "description": "The net weight unit of the item `netWeight` at issuance. `null` if there was no net weight specified."
          }
        }
      },
      "GoodsItemADRCommon": {
        "type": "object",
        "properties": {
          "type": {
            "description": "Always `GOOD`.",
            "enum": [
              "GOOD"
            ],
            "example": "GOOD",
            "type": "string"
          },
          "commercialValue": {
            "description": "Precision is also indicated by ISO4217.",
            "example": 666.777,
            "format": "float",
            "type": "number"
          },
          "currency": {
            "description": "Value according to list ISO4217 (ISO 4217:2008). Mandatory if commercialValue is defined.",
            "example": "USD",
            "maxLength": 3,
            "minLength": 3,
            "type": "string"
          },
          "customMeasurementQuantity": {
            "description": "Custom measurement quantity.",
            "example": 2.22,
            "format": "float",
            "type": "number"
          },
          "customMeasurementUnit": {
            "description": "Custom measurement unit of the item custom measurement quantity.",
            "example": "inch",
            "maxLength": 100,
            "type": "string"
          },
          "methodOfPackaging": {
            "description": "The method of packaging.",
            "example": "Pallets",
            "maxLength": 100,
            "type": "string"
          },
          "statisticalNumber": {
            "description": "Statistical number.",
            "example": 123,
            "type": "integer"
          },
          "tareWeight": {
            "description": "The tare weight. If defined, tare weight unit is mandatory.",
            "example": 44.44,
            "format": "float",
            "minimum": 0,
            "type": "number"
          },
          "tareWeightUnit": {
            "$ref": "#/components/schemas/WeightUnit",
            "description": "The weight unit of the item `tareWeight`. If tare weight is defined, this field is mandatory."
          },
          "volume": {
            "description": "Total volume. If defined, volume unit is mandatory.",
            "format": "float",
            "minimum": 0,
            "type": "number"
          },
          "volumeUnit": {
            "$ref": "#/components/schemas/VolumeUnit",
            "description": "The volume unit of the item `volume`. If volume is defined, this field is mandatory.",
            "example": 55.55
          },
          "weight": {
            "description": "The weight. If defined, weight unit is mandatory.",
            "example": 44.44,
            "format": "float",
            "minimum": 0,
            "type": "number"
          },
          "weightUnit": {
            "$ref": "#/components/schemas/WeightUnit",
            "description": "The weight unit of the item `weight`. If weight is defined, this field is mandatory."
          },
          "idtfCode": {
            "type": "string",
            "minLength": 5,
            "maxLength": 5,
            "description": "International Database Transport for Feed number. Mandatory if cleaning scheme is `QUALIMAT`.",
            "example": "78788"
          },
          "atIssuance": {
            "readOnly": true,
            "$ref": "#/components/schemas/AtIssuance"
          }
        }
      },
      "GoodsItem": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GoodsCommon"
          },
          {
            "$ref": "#/components/schemas/GoodsItemADRCommon"
          }
        ]
      },
      "PackingGroup": {
        "type": "string",
        "description": "The packing group.",
        "enum": [
          "I",
          "II",
          "II"
        ],
        "example": "II"
      },
      "ADR": {
        "type": "object",
        "description": "Dangerous goods item.",
        "allOf": [
          {
            "$ref": "#/components/schemas/GoodsCommon"
          },
          {
            "$ref": "#/components/schemas/GoodsItemADRCommon"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "description": "Always `ADR`.",
                "enum": [
                  "ADR"
                ],
                "example": "ADR",
                "type": "string"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "description": "Always `GOOD`.",
                "enum": [
                  "GOOD"
                ],
                "example": "GOOD",
                "type": "string"
              },
              "commercialValue": {
                "description": "Precision is also indicated by ISO4217.",
                "example": 666.777,
                "format": "float",
                "type": "number"
              },
              "currency": {
                "description": "Value according to list ISO4217 (ISO 4217:2008). Mandatory if commercialValue is defined.",
                "example": "USD",
                "maxLength": 3,
                "minLength": 3,
                "type": "string"
              },
              "customMeasurementQuantity": {
                "description": "Custom measurement quantity.",
                "example": 2.22,
                "format": "float",
                "type": "number"
              },
              "customMeasurementUnit": {
                "description": "Custom measurement unit of the item custom measurement quantity.",
                "example": "inch",
                "maxLength": 100,
                "type": "string"
              },
              "methodOfPackaging": {
                "description": "The method of packaging.",
                "example": "Pallets",
                "maxLength": 100,
                "type": "string"
              },
              "statisticalNumber": {
                "description": "Statistical number.",
                "example": 123,
                "type": "integer"
              },
              "tareWeight": {
                "description": "The tare weight. If defined, tare weight unit is mandatory.",
                "example": 44.44,
                "format": "float",
                "minimum": 0,
                "type": "number"
              },
              "tareWeightUnit": {
                "$ref": "#/components/schemas/WeightUnit",
                "description": "The weight unit of the item `tareWeight`. If tare weight is defined, this field is mandatory."
              },
              "volume": {
                "description": "Total volume. If defined, volume unit is mandatory.",
                "format": "float",
                "minimum": 0,
                "type": "number"
              },
              "volumeUnit": {
                "$ref": "#/components/schemas/VolumeUnit",
                "description": "The volume unit of the item `volume`. If volume is defined, this field is mandatory.",
                "example": 55.55
              },
              "weight": {
                "description": "The weight. If defined, weight unit is mandatory.",
                "example": 44.44,
                "format": "float",
                "minimum": 0,
                "type": "number"
              },
              "weightUnit": {
                "$ref": "#/components/schemas/WeightUnit",
                "description": "The weight unit of the item `weight`. If weight is defined, this field is mandatory."
              },
              "idtfCode": {
                "type": "string",
                "minLength": 5,
                "maxLength": 5,
                "description": "International Database Transport for Feed number. Mandatory if cleaning scheme is `QUALIMAT`.",
                "example": "78788"
              },
              "technicalName": {
                "type": "string",
                "maxLength": 255,
                "description": "Technical (chemical) name.",
                "example": "FLAMMABLE LIQUID, N.O.S."
              },
              "packingGroup": {
                "$ref": "#/components/schemas/PackingGroup"
              },
              "UNNumber": {
                "type": "string",
                "maxLength": 4,
                "minLength": 4,
                "description": "The UN number."
              },
              "tunnelRestrictionCode": {
                "type": "string",
                "maxLength": 30,
                "description": "Tunnel restriction code.",
                "example": "C/D"
              },
              "labels": {
                "type": "string",
                "maxLength": 255,
                "description": "Labels.",
                "example": "1.5 (3)"
              },
              "textOnBill": {
                "type": "string",
                "maxLength": 500,
                "description": "Specific text to be displayed on transport document."
              }
            }
          }
        ],
        "required": [
          "type"
        ]
      },
      "RTI": {
        "type": "object",
        "description": "Returnable transport item.",
        "allOf": [
          {
            "$ref": "#/components/schemas/GoodsCommon"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "description": "Always `RTI`.",
                "enum": [
                  "RTI"
                ],
                "example": "RTI",
                "type": "string"
              },
              "gsOneCode": {
                "description": "The assigned GS1 code.",
                "type": "string",
                "maxLength": 100,
                "example": "GS1Code"
              },
              "quality": {
                "description": "The quality of the RTI.",
                "$ref": "#/components/schemas/Quality"
              },
              "transferenceType": {
                "$ref": "#/components/schemas/TransferenceType"
              },
              "numberOfLoadingPlaces": {
                "type": "integer",
                "minimum": 0,
                "example": 22,
                "description": "The number of places there are in the truck for the item."
              },
              "imageUrl": {
                "description": "Url of the image of this returnable transport item.",
                "type": "string",
                "format": "URL",
                "example": "https://example.com/image.png"
              },
              "shortName": {
                "description": "Short summary.",
                "example": "Short name of the goods",
                "maxLength": 100,
                "type": "string"
              },
              "ssccCode": {
                "description": "Serial Shipping Container Code acccording to SSCC-18 barcode specification.",
                "example": "SSCC-code",
                "maxLength": 25,
                "type": "string"
              }
            }
          }
        ]
      },
      "Quality": {
        "type": "string",
        "description": "The quality of the RTI",
        "enum": [
          "UNKNOWN",
          "GOOD",
          "MODERATE",
          "NO_FINANCIAL_VALUE"
        ],
        "example": "GOOD"
      },
      "TransferenceType": {
        "type": "string",
        "description": "The transference type of the RTI",
        "enum": [
          "DELIVER_AT_CONSIGNOR",
          "PICK_UP_AT_CONSIGNOR",
          "DELIVER_AT_CONSIGNEE",
          "PICK_UP_AT_CONSIGNEE"
        ],
        "example": "PICK_UP_AT_CONSIGNOR"
      },
      "StructuredGoodsInfo": {
        "type": "object",
        "properties": {
          "totalNumberOfPackages": {
            "type": "integer",
            "description": "The total number of packages of structured goods.",
            "example": 123
          },
          "totalCustomMeasurementQuantity": {
            "type": "number",
            "format": "float",
            "description": "The total custom measurement quantity. If defined, custom measurement unit is mandatory.",
            "example": 88.88
          },
          "totalCustomMeasurementUnit": {
            "type": "string",
            "description": "The total custom measurement unit of the item custom measurement quantity. If custom measurement quantity is defined, this field is mandatory.",
            "example": "83.38"
          },
          "totalGrossWeight": {
            "description": "The total weight of structured goods. If total weight unit is defined, this field is mandatory.",
            "type": "number",
            "format": "float",
            "example": 77.33
          },
          "totalGrossWeightUnit": {
            "description": "The total weight unit of the structured good weight. If gross weight is defined, this field is mandatory.",
            "$ref": "#/components/schemas/WeightUnit"
          },
          "totalNetWeight": {
            "description": "The total net weight of structured goods. If total net weight unit is defined, this field is mandatory.",
            "type": "number",
            "format": "float",
            "example": 77.33
          },
          "totalNetWeightUnit": {
            "description": "The total net weight unit of the structured good weight. If total net weight is defined, this field is mandatory.",
            "$ref": "#/components/schemas/WeightUnit"
          },
          "totalTareWeight": {
            "description": "The total tare weight of structured goods. If total tare weight unit is defined, this field is mandatory.",
            "type": "number",
            "format": "float",
            "example": 77.33
          },
          "totalTareWeightUnit": {
            "description": "The tare weight unit of the structured good weight.  If total tare weight is defined, this field is mandatory.",
            "$ref": "#/components/schemas/WeightUnit"
          },
          "totalVolume": {
            "description": "The total tare volume of structured goods. If volume unit is defined, this field is mandatory.",
            "type": "number",
            "format": "float",
            "example": 77.33
          },
          "totalVolumeUnit": {
            "description": "The total volume unit of the structured good volume. If volume is defined, this field is mandatory.",
            "$ref": "#/components/schemas/VolumeUnit"
          },
          "totalCommercialValue": {
            "type": "number",
            "format": "float",
            "description": "The total commercial value of structured goods. A number from `0` to `9999999999.9999` (besides digits only '.' character is allowed for decimal separation). The number of decimals is dependent on the amount of fraction digits used with the currency.",
            "example": 555.55
          },
          "totalCommercialValueCurrency": {
            "description": "Value according to list ISO4217 (ISO 4217:2008). Mandatory if totalCommercialValue is defined.",
            "example": "USD",
            "maxLength": 3,
            "minLength": 3,
            "type": "string"
          },
          "totalLoadingMeters": {
            "description": "The total amount of loading meters.",
            "type": "number",
            "format": "float",
            "example": 88.88
          },
          "emergencyPhoneNumber": {
            "maxLength": 30,
            "type": "string",
            "description": "The emergency phone number.",
            "example": 380631231237
          },
          "emergencyContactName": {
            "maxLength": 255,
            "type": "string",
            "description": "The emergency contact name.",
            "example": "John Doe"
          },
          "sealNumbers": {
            "maxLength": 255,
            "type": "string",
            "description": "Seal numbers.",
            "example": "SEAL"
          },
          "europeanOrganicCertificationBodyCode": {
            "type": "string",
            "description": "European organic certification company code (see https://ec.europa.eu/agriculture/ofis_public/actor_cbeu/ctrl.cfm?targetUrl=home)"
          }
        }
      },
      "FreightDocumentSubscription": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Subscription"
          },
          {
            "type": "object",
            "properties": {
              "eventTypes": {
                "description": "The event types (if none provided the default is `STATUS`)",
                "type": "array",
                "example": [
                  "STATUS",
                  "COMMENT"
                ],
                "items": {
                  "type": "string",
                  "enum": [
                    "STATUS",
                    "COMMENT"
                  ],
                  "examples": [
                    "STATUS"
                  ]
                }
              }
            }
          }
        ]
      },
      "TransportConditionsFilename": {
        "properties": {
          "filename": {
            "description": "The actual name of the transport conditions. It is unique and used as a 'key'.",
            "example": "conditions_domestic1.pdf",
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "filename"
        ]
      },
      "FreightDocumentUpdate": {
        "type": "object",
        "properties": {
          "account": {
            "description": "The account of the user that submitted the status update.",
            "$ref": "#/components/schemas/AccountReferenceResponse"
          },
          "commitId": {
            "type": "string",
            "example": "123",
            "description": "A unique id to identify the commit."
          },
          "createDateTimeClient": {
            "description": "The calculated date and time when the status update was created by the client. The client sends a `secondsSinceCreation` value equal or bigger than zero as part of the POST. The backend calculates the UTC value of the moment the client actually created the comment. Formatted according to ISO 8601 (ISO 8601:2004): `YYYY-MM-DDThh:mm:ss.sZ`",
            "format": "date-time",
            "type": "string",
            "example": "2023-05-25T10:54:31.134Z"
          },
          "createDateTimeServer": {
            "description": "The date and time when the status update was received by the server. Formatted according to ISO 8601 (ISO 8601:2004): `YYYY-MM-DDThh:mm:ss.sZ`",
            "format": "date-time",
            "type": "string",
            "example": "2023-05-25T10:54:31.134Z"
          },
          "newFreightDocumentStatus": {
            "description": "The new status that the document was changed to.",
            "type": "string",
            "enum": [
              "TRANSIT",
              "DELIVERED"
            ],
            "example": "DELIVERED"
          }
        }
      },
      "FreightDocument": {
        "properties": {
          "additionalDocuments": {
            "description": "Collection of additional freight document PDFs.",
            "items": {
              "$ref": "#/components/schemas/FreightDocumentAdditionalDocument"
            },
            "type": "array"
          },
          "agreedDateOfDelivery": {
            "description": "Same information as agreedDateTimeOfDelivery but without specifying any time. Date formatted according to ISO 8601(ISO 8601:2004): `YYYY-MM-DD`",
            "example": "2022-01-01",
            "format": "date",
            "type": "string"
          },
          "agreedDateOfTakingOver": {
            "description": "Same information as `agreedDateTimeOfTakingOver` but without specifying any time. Date formatted according to ISO 8601(ISO 8601:2004): `YYYY-MM-DD`",
            "example": "2022-01-01",
            "format": "date",
            "type": "string"
          },
          "agreedDateTimeOfDelivery": {
            "description": "The planned date and time of delivery of the goods by the carrier. This is not the ETA datetime but a date that was agreed on by the relevant parties. Datetime formatted according to ISO 8601 (ISO 8601:2004): `YYYY-MM-DDThh:mm:ssZ`",
            "example": "2023-05-25T10:54:32Z",
            "format": "date-time",
            "type": "string"
          },
          "agreedDateTimeOfTakingOver": {
            "description": "The planned date and time of taking over the goods by the carrier. This is not the ETA datetime but a date that was agreed on by the relevant parties. Datetime formatted according to ISO 8601 (ISO 8601:2004): `YYYY-MM-DDThh:mm:ssZ`",
            "example": "2023-05-25T10:54:31Z",
            "format": "date-time",
            "type": "string"
          },
          "plannedDateOfDelivery": {
            "description": "Same information as plannedDateTimeOfDelivery but without specifying any time. Date formatted according to ISO 8601(ISO 8601:2004): `YYYY-MM-DD`",
            "example": "2022-01-01",
            "format": "date",
            "type": "string"
          },
          "plannedDateOfTakingOver": {
            "description": "Same information as `plannedDateTimeOfTakingOver` but without specifying any time. Date formatted according to ISO 8601(ISO 8601:2004): `YYYY-MM-DD`",
            "example": "2022-01-01",
            "format": "date",
            "type": "string"
          },
          "plannedDateTimeOfDelivery": {
            "description": "The planned date and time of delivery of the goods by the carrier. This is not the ETA datetime but a date that was planned on by the relevant parties. Datetime formatted according to ISO 8601 (ISO 8601:2004): `YYYY-MM-DDThh:mm:ssZ`",
            "example": "2023-05-25T10:54:32Z",
            "format": "date-time",
            "type": "string"
          },
          "plannedDateTimeOfTakingOver": {
            "description": "The planned date and time of taking over the goods by the carrier. This is not the ETA datetime but a date that was planned on by the relevant parties. Datetime formatted according to ISO 8601 (ISO 8601:2004): `YYYY-MM-DDThh:mm:ssZ`",
            "example": "2023-05-25T10:54:31Z",
            "format": "date-time",
            "type": "string"
          },
          "approvals": {
            "readOnly": true,
            "description": "Collection of all approvals in the freight document. See Approval definition.",
            "items": {
              "$ref": "#/components/schemas/ApprovalResponse"
            },
            "type": "array"
          },
          "attachments": {
            "description": "Collection of all attachments in the freight document.",
            "items": {
              "$ref": "#/components/schemas/Attachment"
            },
            "type": "array"
          },
          "authorityReference": {
            "description": "A specific reference to the freight document that complies with local authority regulations. This reference should be used when displaying a freight document.",
            "example": "NLvscode-yaml-sort.octal.000000029TFL",
            "minLength": 4,
            "readOnly": true,
            "type": "string"
          },
          "carrier": {
            "$ref": "#/components/schemas/FreightDocumentCarrierRole",
            "description": "The carrier of the freight document."
          },
          "carrierAccessCodes": {
            "description": "Codes that can be used to sign in the TransFollow mobile application without an account. The user then can view/update and sign as a carrier freight documents registered with this code. Only the submitter and the carrier can see those codes.",
            "items": {
              "example": "access_code",
              "type": "string",
              "minLength": 4,
              "maxLength": 255
            },
            "type": "array"
          },
          "carrierCode": {
            "description": "Number of the carrier.",
            "example": "123123123123",
            "maxLength": 12,
            "minLength": 12,
            "type": "string"
          },
          "carrierToDriverInstructions": {
            "description": "Instructions given by the carrier to the driver.",
            "example": "Goods should be handled with great care.",
            "maxLength": 10000,
            "type": "string"
          },
          "cleaning": {
            "$ref": "#/components/schemas/Cleaning",
            "description": "Cleaning information related to goods transport."
          },
          "client": {
            "$ref": "#/components/schemas/FreightDocumentRole",
            "description": "The client of the freight document."
          },
          "collectionCarrierArrival": {
            "readOnly": true,
            "description": "Datetime formatted according to ISO 8601 (ISO 8601:2004): `YYYY-MM-DDThh:mm:ssZ`",
            "example": "2023-05-25T10:54:31Z",
            "format": "date-time",
            "type": "string"
          },
          "collectionCarrierDeparture": {
            "readOnly": true,
            "description": "Datetime formatted according to ISO 8601 (ISO 8601:2004): `YYYY-MM-DDThh:mm:ssZ`",
            "example": "2023-05-25T10:54:31Z",
            "format": "date-time",
            "type": "string"
          },
          "collectionMission": {
            "writeOnly": true,
            "$ref": "#/components/schemas/FreightDocumentMission",
            "description": "Specification of collection mission."
          },
          "comments": {
            "readOnly": true,
            "description": "Collection of all comments in the freight document.",
            "items": {
              "$ref": "#/components/schemas/Comment"
            },
            "type": "array"
          },
          "configuration": {
            "$ref": "#/components/schemas/FreightDocumentConfiguration",
            "description": "Freight document configuration."
          },
          "consignee": {
            "$ref": "#/components/schemas/FreightDocumentConsigneeRole",
            "description": "The receiver of the cargo."
          },
          "consignor": {
            "$ref": "#/components/schemas/FreightDocumentRole",
            "description": "Sender of the cargo."
          },
          "containers": {
            "description": "Collection of all containers in the freight document.",
            "items": {
              "$ref": "#/components/schemas/Container"
            },
            "type": "array"
          },
          "controlledTemperatures": {
            "readOnly": true,
            "$ref": "#/components/schemas/ControlledTemperatures"
          },
          "deliveryCarrierArrival": {
            "readOnly": true,
            "description": "The date and time the carrier arrived at the consignee/place of delivery. A carrier or subsequent carrier can update this timestamp. Formatted according to ISO 8601 (ISO 8601:2004): `YYYY-MM-DDThh:mm:ssZ`.",
            "example": "2023-05-25T10:54:31Z",
            "format": "date-time",
            "type": "string"
          },
          "deliveryCarrierDeparture": {
            "readOnly": true,
            "description": "The date and time the carrier departed from the consignee/place of delivery. A carrier or subsequent carrier can update this timestamp. Formatted according to ISO 8601 (ISO 8601:2004): `YYYY-MM-DDThh:mm:ssZ`.",
            "example": "2023-05-25T10:54:31Z",
            "format": "date-time",
            "type": "string"
          },
          "deliveryDate": {
            "readOnly": true,
            "description": "Date of delivery. Set by the server when the document is updated as `DELIVERED`, it can't be specified or modified. Formatted according to ISO 8601(ISO 8601:2004): `YYYY-MM-DD`",
            "format": "date",
            "type": "string"
          },
          "deliveryMission": {
            "writeOnly": true,
            "$ref": "#/components/schemas/FreightDocumentMission",
            "description": "Specification of delivery mission."
          },
          "establishedCountry": {
            "minLength": 3,
            "maxLength": 3,
            "$ref": "#/components/schemas/CountryCode3",
            "description": "Country at which the agreement was established. Country code according to ISO 3166 - alpha-3 (ISO3 code)"
          },
          "establishedDate": {
            "description": "Date of establishment of Transport Agreement. Formatted according to ISO 8601(ISO 8601:2004): `YYYY-MM-DD`",
            "example": "2023-05-25",
            "format": "date-time",
            "type": "string"
          },
          "establishedPlace": {
            "description": "Place at which the agreement was established.",
            "example": "France",
            "type": "string"
          },
          "estimatedDateTimeOfDelivery": {
            "description": "Estimated time when cargo will be delivered. Carrier or subsequent carrier will update this timestamp every time they have new information. Formatted according to ISO 8601 (ISO 8601:2004): `YYYY-MM-DDThh:mm:ssZ`",
            "example": "2023-05-25T10:54:31Z",
            "format": "date-time",
            "type": "string"
          },
          "estimatedDateTimeOfTakingOver": {
            "description": "Estimated time when cargo will be picked up. Carrier or subsequent carrier will update this timestamp every time they have new information. Formatted according to ISO 8601 (ISO 8601:2004): `YYYY-MM-DDThh:mm:ssZ`",
            "example": "2023-05-25T10:34:31Z",
            "format": "date-time",
            "type": "string"
          },
          "events": {
            "readOnly": true,
            "description": "List of registered events (like carrier departure).",
            "items": {
              "$ref": "#/components/schemas/FreightDocumentEvent"
            }
          },
          "externalIdentifier": {
            "description": "Custom value that is used to identify the freight document to an external system (TMS, ERP...)",
            "example": "7878787",
            "type": "string"
          },
          "freightDocumentId": {
            "readOnly": true,
            "description": "The id of the freight document.",
            "example": "123123",
            "type": "string"
          },
          "goods": {
            "readOnly": true,
            "deprecated": true,
            "description": "Large free form text which describe the goods which should be transported. When leading spaces are needed, unicode character `U+00A0` (NO-BREAK SPACE) can be used instead of the regular space (`U+0020`). Or when `structuredGoods` are provided.",
            "example": "Deprecated goods",
            "maxLength": 10000,
            "type": "string"
          },
          "goodsAdjusted": {
            "readOnly": true,
            "description": "Indicates if the goods have been modified after issuance",
            "example": false,
            "type": "boolean"
          },
          "handlingInstructions": {
            "$ref": "#/components/schemas/HandlingInstructions"
          },
          "incoterms": {
            "description": "International Commercial Terms",
            "type": "string"
          },
          "lastModifiedDateTime": {
            "readOnly": true,
            "description": "The date and time when this freight document was last modified. Formatted according to ISO 8601(ISO 8601:2004): `YYYY-MM-DD`",
            "example": "2023-05-25T10:54:31.134Z",
            "format": "date-time",
            "type": "string"
          },
          "mileageAtArrival": {
            "readOnly": true,
            "description": "Mileage when the driver arrives (stops driving in the context of this freight document)",
            "example": 2288.22,
            "format": "float",
            "type": "number"
          },
          "mileageAtDeparture": {
            "readOnly": true,
            "description": "Mileage when the driver departs (starts driving in the context of this freight document)",
            "example": 3388.22,
            "format": "float",
            "type": "number"
          },
          "mileageUnit": {
            "readOnly": true,
            "$ref": "#/components/schemas/MileageUnit"
          },
          "notifications": {
            "$ref": "#/components/schemas/Notifications"
          },
          "orderNumber": {
            "description": "Order number.",
            "example": "order_number",
            "type": "string"
          },
          "ownDelegates": {
            "readOnly": true,
            "description": "accounts to which the current user has delegated their permissions.",
            "items": {
              "$ref": "#/components/schemas/OwnDelegate"
            },
            "type": "array"
          },
          "ownPermissions": {
            "readOnly": true,
            "description": "A collection of permissions for each role that the logged in user has.",
            "items": {
              "$ref": "#/components/schemas/Permission"
            },
            "type": "array"
          },
          "paymentForCarriage": {
            "description": "Payment for carriage.",
            "example": "10 EUR",
            "type": "string"
          },
          "pdfTemplateType": {
            "$ref": "#/components/schemas/PdfTemplateType"
          },
          "placeOfDelivery": {
            "$ref": "#/components/schemas/FreightDocumentPodRole",
            "description": "Optional role which receives the cargo on behalf of the consignee (for example a warehouse)."
          },
          "placeOfTakingOver": {
            "$ref": "#/components/schemas/FreightDocumentPotoRole",
            "description": "Mandatory role which holds the cargo. Examples: The Consignor or a warehouse."
          },
          "recordedLocations": {
            "readOnly": true,
            "$ref": "#/components/schemas/ReportedLocations"
          },
          "references": {
            "description": "These are user generated document numbers, consisting of name-value pairs. This field allows external systems to add unique identifiers to the document.",
            "items": {
              "$ref": "#/components/schemas/Reference"
            },
            "type": "array"
          },
          "reimbursementAmount": {
            "description": "Precision is also indicated by ISO4217.",
            "example": 1.1,
            "type": "number",
            "format": "float"
          },
          "reimbursementCurrency": {
            "description": "Value according to list ISO4217 (ISO 4217:2008).",
            "example": "EUR",
            "maxLength": 3,
            "minLength": 3,
            "type": "string"
          },
          "senderInstructions": {
            "description": "Instructions given by the consignor to either the carrier or consignee.",
            "example": "Goods should be handled with great care.",
            "maxLength": 10000,
            "type": "string"
          },
          "specialAgreements": {
            "description": "Describes special agreements between parties.",
            "example": "Goods should be handled with great care.",
            "maxLength": 10000,
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/FreightDocumentStatus"
          },
          "structuredGoods": {
            "description": "Collection that can contain goods items (type `GOOD`) and/or returnable transport items (type `RTI`) and/or dangerous goods items (type `ADR`). If no items are used, then this collection will be empty.",
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/GoodsItem"
                },
                {
                  "$ref": "#/components/schemas/ADR"
                },
                {
                  "$ref": "#/components/schemas/RTI",
                  "discriminator": {
                    "propertyName": "type",
                    "mapping": {
                      "goodsItem": "#/components/schemas/GoodsItem",
                      "adr": "#/components/schemas/ADR",
                      "rti": "#/components/schemas/RTI"
                    }
                  }
                }
              ]
            },
            "type": "array"
          },
          "structuredGoodsInfo": {
            "$ref": "#/components/schemas/StructuredGoodsInfo",
            "description": "General information about the structured goods found in this freight document."
          },
          "submitter": {
            "readOnly": true,
            "$ref": "#/components/schemas/FreightDocumentRole",
            "description": "The submitter of the freight document."
          },
          "submitterAccountId": {
            "readOnly": true,
            "deprecated": true,
            "description": "Use `submitter.accountId` property instead. The accountId of the submitter of this freight document.",
            "type": "string"
          },
          "submitterName": {
            "readOnly": true,
            "deprecated": true,
            "description": "Use `submitter.name` property instead. The name of the submitter of this freight document.",
            "type": "string"
          },
          "subscriptions": {
            "description": "Susbcriptions (see `/freightdocuments/{{id}}/subcriptions`)",
            "items": {
              "$ref": "#/components/schemas/FreightDocumentSubscription"
            },
            "type": "array"
          },
          "subsequentCarriers": {
            "description": "Subsequent transportation partners.",
            "items": {
              "$ref": "#/components/schemas/FreightDocumentCarrierRole"
            },
            "type": "array"
          },
          "timeWindowOfDelivery": {
            "$ref": "#/components/schemas/TimeSpan",
            "description": "Time window while the driver is unloading the goods"
          },
          "timeWindowOfTakingOver": {
            "$ref": "#/components/schemas/TimeSpan",
            "description": "Time window while the driver is loading the goods"
          },
          "transFollowNumber": {
            "description": "A 12-digit freight document number. Also see the field `authorityReference`.",
            "example": 123123123123,
            "maxLength": 12,
            "minLength": 12,
            "readOnly": true,
            "type": "string"
          },
          "transportConditions": {
            "description": "Transport conditions.",
            "enum": [
              "AVC2002",
              "NONE"
            ],
            "example": "AVC2002",
            "type": "string"
          },
          "additionalTransportConditions": {
            "description": "Custom transport conditions to be used on this freight document.",
            "$ref": "#/components/schemas/TransportConditionsFilename",
            "type": "object"
          },
          "transportReference": {
            "maxLength": 100,
            "description": "Reference of the transport.",
            "example": "T_REF",
            "type": "string"
          },
          "traversedDistance": {
            "readOnly": true,
            "description": "The distance that has been traveled in the context of this freight document",
            "example": 23.32,
            "format": "float",
            "type": "number"
          },
          "type": {
            "description": "Describes the type of the freight document.",
            "enum": [
              "WAYBILL",
              "WAYBILL_FRA",
              "WAYBILL_ESP",
              "WAYBILL_CZE",
              "WAYBILL_DEU"
            ],
            "example": "WAYBILL",
            "type": "string"
          },
          "updates": {
            "readOnly": true,
            "description": "Collection of all updates in the freight document.",
            "items": {
              "$ref": "#/components/schemas/FreightDocumentUpdate"
            },
            "type": "array"
          },
          "viewPdfUrl": {
            "readOnly": true,
            "description": "Url to open the freight document pdf. The url requires no authentication.",
            "example": "https://partner.transfollow.com/api/freightdocuments/pdf/?token=xyzxyz",
            "format": "URL",
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "carrier",
          "consignee",
          "consignor",
          "establishedDate",
          "establishedPlace",
          "placeOfTakingOver",
          "status",
          "transportConditions",
          "type"
        ]
      },
      "FreightDocumentCreateResponse": {
        "additionalProperties": false,
        "properties": {
          "authorityReference": {
            "description": "The authority reference of the freight document.",
            "examples": [
              "000000489031"
            ],
            "type": "string"
          },
          "collectionMissionIdentifier": {
            "description": "Identifier of the collection mission.",
            "examples": [
              "12-5798435"
            ],
            "type": "string"
          },
          "deliveryMissionIdentifier": {
            "description": "Identifier of the delivery mission.",
            "examples": [
              "12-5798435"
            ],
            "type": "string"
          },
          "freightDocumentId": {
            "description": "The id of the freight document.",
            "examples": [
              "abc987"
            ],
            "type": "string"
          },
          "orderNumber": {
            "description": "The order number of the freight document.",
            "examples": [
              "4560-243"
            ],
            "type": "string"
          },
          "transportReference": {
            "description": "The transport reference of the freight document.",
            "examples": [
              "6798432-324"
            ],
            "type": "string"
          },
          "viewPdfUrl": {
            "description": "URL to view freight document PDF.",
            "examples": [
              "https://api.transfollow.com/v1/api//v1/freightdocuments/pdf/?token=af1e16db-638d-461e-b6a8-ae578bd88296"
            ],
            "format": "url",
            "type": "string"
          }
        },
        "type": "object"
      },
      "FreightDocumentPatchRequest": {
        "type": "object",
        "properties": {
          "estimatedDateTimeOfTakingOver": {
            "description": "DateTime formatted according to ISO 8601 (ISO 8601:2004): `YYYY-MM-DDThh:mm:ssZ`.",
            "type": "string",
            "examples": [
              "2014-03-31T22:00:00Z"
            ],
            "format": "date-time"
          },
          "estimatedDateTimeOfDelivery": {
            "description": "DateTime formatted according to ISO 8601 (ISO 8601:2004): `YYYY-MM-DDThh:mm:ssZ`.",
            "type": "string",
            "examples": [
              "2014-03-31T23:00:00Z"
            ],
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "Moment": {
        "type": "object",
        "properties": {
          "date": {
            "type": "string",
            "format": "YYYY-MM-DD"
          },
          "time": {
            "type": "string",
            "format": "HH24:MI:SS at UTC"
          }
        }
      },
      "FreightDocumentPartialUpdate": {
        "properties": {
          "replace": {
            "description": "The replace operation.",
            "properties": {
              "structuredGoods": {
                "description": "Collection that can contain goods items (type `GOOD`) and/or returnable transport items (type `RTI`) and/or dangerous goods items (type `ADR`) (See special rules above).",
                "items": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/GoodsItem"
                    },
                    {
                      "$ref": "#/components/schemas/ADR"
                    },
                    {
                      "$ref": "#/components/schemas/RTI"
                    }
                  ]
                },
                "type": "array"
              },
              "structuredGoodsInfo": {
                "description": "Additional information about the structured goods.",
                "properties": {
                  "sealNumbers": {
                    "description": "Seal numbers.",
                    "example": "seal_numbers",
                    "maxLength": 255,
                    "type": "string"
                  },
                  "totalNumberOfPackages": {
                    "type": "integer",
                    "description": "The total number of packages of structured goods.",
                    "example": 123
                  },
                  "totalCustomMeasurementQuantity": {
                    "type": "number",
                    "format": "big decimal",
                    "description": "The total custom measurement quantity. If defined, custom measurement unit is mandatory.",
                    "example": 88.88
                  },
                  "totalCustomMeasurementUnit": {
                    "type": "string",
                    "description": "The total custom measurement unit of the item custom measurement quantity. If custom measurement quantity is defined, this field is mandatory.",
                    "example": "83.38"
                  },
                  "totalGrossWeight": {
                    "description": "The total weight of structured goods. If total weight unit is defined, this field is mandatory.",
                    "type": "number",
                    "format": "big decimal",
                    "example": 77.33
                  },
                  "totalGrossWeightUnit": {
                    "description": "The total weight unit of the structured good weight. If gross weight is defined, this field is mandatory.",
                    "$ref": "#/components/schemas/WeightUnit"
                  },
                  "totalNetWeight": {
                    "description": "The total net weight of structured goods. If total net weight unit is defined, this field is mandatory.",
                    "type": "number",
                    "format": "big decimal",
                    "example": 77.33
                  },
                  "totalNetWeightUnit": {
                    "description": "The total net weight unit of the structured good weight. If total net weight is defined, this field is mandatory.",
                    "$ref": "#/components/schemas/WeightUnit"
                  },
                  "totalTareWeight": {
                    "description": "The total tare weight of structured goods. If total tare weight unit is defined, this field is mandatory.",
                    "type": "number",
                    "format": "big decimal",
                    "example": 77.33
                  },
                  "totalTareWeightUnit": {
                    "description": "The tare weight unit of the structured good weight.  If total tare weight is defined, this field is mandatory.",
                    "$ref": "#/components/schemas/WeightUnit"
                  },
                  "totalVolume": {
                    "description": "The total tare volume of structured goods. If volume unit is defined, this field is mandatory.",
                    "type": "number",
                    "format": "big decimal",
                    "example": 77.33
                  },
                  "totalVolumeUnit": {
                    "description": "The total volume unit of the structured good volume. If volume is defined, this field is mandatory.",
                    "$ref": "#/components/schemas/VolumeUnit"
                  },
                  "totalCommercialValue": {
                    "type": "number",
                    "format": "big decimal",
                    "description": "The total commercial value of structured goods. A number from `0` to `9999999999.9999` (besides digits only '.' character is allowed for decimal separation). The number of decimals is dependent on the amount of fraction digits used with the currency.",
                    "example": 555.55
                  },
                  "totalCommercialValueCurrency": {
                    "description": "Value according to list ISO4217 (ISO 4217:2008). Mandatory if totalCommercialValue is defined.",
                    "example": "USD",
                    "maxLength": 3,
                    "minLength": 3,
                    "type": "string"
                  },
                  "totalLoadingMeters": {
                    "description": "The total amount of loading meters.",
                    "type": "number",
                    "format": "big decimal",
                    "example": 88.88
                  }
                },
                "type": "object"
              },
              "plannedDateTimeOfTakingOver": {
                "description": "Planned date time of taking over of the goods.",
                "$ref": "#/components/schemas/Moment"
              },
              "plannedDateTimeOfDelivery": {
                "description": "Planned date time of delivery of the goods.",
                "$ref": "#/components/schemas/Moment"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "CommitIdResponse": {
        "type": "object",
        "properties": {
          "commitId": {
            "description": "Id of the created commit.",
            "type": "string",
            "example": "123abs"
          }
        }
      },
      "FreightDocumentDelegationRequest": {
        "type": "object",
        "required": [
          "role"
        ],
        "description": "Freight document delegation request.",
        "properties": {
          "role": {
            "description": "Specify the role to be delegated.",
            "$ref": "#/components/schemas/FreightDocumentRoleType"
          },
          "emailAddressOfDelegatee": {
            "description": "The account that receives the delegated rights. Can be an email address of an existing TransFollow account or new account. \n\nRequired if `username` or `ssoGroupClaim` is empty.\n",
            "type": "string",
            "format": "email",
            "maxLength": 100,
            "example": "delegatee@test.tld"
          },
          "username": {
            "description": "The account username that receives the delegated rights. \n\nRequired if `emailAddressOfDelegatee` or `ssoGroupClaim` is empty.\n",
            "type": "string",
            "example": "username"
          },
          "ssoGroupClaim": {
            "type": "string",
            "description": "Only for SSO enabled accounts: value of a group claim as received during the SSO authentication. The SSO user must have been authenticated by an SSO provider linked to the delegating account.\n\nWhen delegating with SSO a user only gets access if the claim is correct and the user belongs to the SSO provider linked to the delegating account. Example:\n\n  * submitter account has set up SSO using his company's Identity provider\n  * submitter creates a freight document and delegates the consignor rights with `ssoGroupClaim` set to `warehouse_nl`\n  * an employee from the company logs in through the SSO link of the Identity provider. The Identity provider returns a list of group claims for the user that includes `warehouse_nl`. He is therefore given access to the freight document.\n  * if an employee from another company logs in they won't get access even if their group claim includes `warehouse_nl`. This is because he authenticated using an SSO provider linked to a different account.\n\nRequired if `emailAddressOfDelegatee`, `username` is empty\n"
          }
        }
      },
      "FreightDocumentReferenceRoleBasedCreateRequest": {
        "properties": {
          "createdByRoleId": {
            "description": "The id of the role linked to this reference or null if it is freight document / submitter role",
            "example": "123",
            "type": "string"
          },
          "name": {
            "description": "The name (or key) of the reference value",
            "example": "ref-name",
            "maxLength": 100,
            "minLength": 1,
            "type": "string"
          },
          "value": {
            "description": "The reference value",
            "example": "ref-value",
            "maxLength": 100,
            "minLength": 1,
            "type": "string"
          },
          "submitterOnly": {
            "writeOnly": true,
            "description": "If true, the reference is private for the submitter. TF products won't return it to other parties. Email notifications never display it.",
            "type": "boolean",
            "example": false
          },
          "technical": {
            "type": "boolean",
            "description": "If true, the reference is only returned in API calls. TF products won't display the reference at all.",
            "writeOnly": true,
            "example": false
          }
        },
        "required": [
          "name",
          "value"
        ],
        "type": "object"
      },
      "AccessCodes": {
        "description": "Access codes.",
        "example": {
          "accessCodes": [
            "DJLKDFN989",
            "IPOIGKJNNM"
          ]
        },
        "properties": {
          "accessCodes": {
            "items": {
              "example": "DJLKDFN989",
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "FreightDocumentBatchCreationResponse": {
        "properties": {
          "results": {
            "description": "The list of freight document creation results.",
            "items": {
              "description": "Freight document creation result",
              "properties": {
                "errors": {
                  "description": "The list of errors that occurred during the freight document creation (`null` in case of `SUCCESS` status).",
                  "example": null,
                  "items": {
                    "$ref": "#/components/schemas/ApiError"
                  },
                  "type": "array"
                },
                "result": {
                  "$ref": "#/components/schemas/FreightDocumentCreateResponse",
                  "description": "The result of the freight document creation (`null` in case of `FAILURE` status).",
                  "x-nullable": true
                },
                "status": {
                  "enum": [
                    "SUCCESS",
                    "FAILURE"
                  ],
                  "example": "SUCCESS",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "DangerousGoodSubstance": {
        "additionalProperties": false,
        "properties": {
          "UNNumber": {
            "description": "UN number.",
            "examples": [
              "1990"
            ],
            "type": "string"
          },
          "adrTank": {
            "description": "ADR tank.",
            "additionalProperties": false,
            "properties": {
              "specialProvisions": {
                "description": "Special packing provisions.",
                "items": {
                  "examples": [
                    "P001",
                    "IBC03",
                    "LP01",
                    "R001"
                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "code": {
                "items": {
                  "examples": [
                    "LGBV"
                  ],
                  "type": "string"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "class": {
            "description": "The class.",
            "examples": [
              "9"
            ],
            "type": "string"
          },
          "classification": {
            "description": "Classification code.",
            "examples": [
              "M11"
            ],
            "type": "string"
          },
          "exceptedQuantities": {
            "description": "Excepted quantities.",
            "examples": [
              "E1"
            ],
            "type": "string"
          },
          "hazardIdentificationNumber": {
            "description": "Hazard identification number.",
            "examples": [
              "90"
            ],
            "type": "string"
          },
          "labels": {
            "description": "Labels.",
            "items": {
              "examples": [
                "9"
              ],
              "type": "string"
            },
            "type": "array"
          },
          "limitedQuantities": {
            "description": "Limited quantities.",
            "examples": [
              "5L"
            ],
            "type": "string"
          },
          "name": {
            "default": "Description or name.",
            "examples": [
              "BENZALDEHYDE"
            ],
            "type": "string"
          },
          "packaging": {
            "description": "Packaging.",
            "additionalProperties": false,
            "properties": {
              "instructions": {
                "description": "Packing instructions.",
                "items": {
                  "examples": [
                    "P001",
                    "IBC03",
                    "LP01",
                    "R001"
                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "mixedPackingProvisions": {
                "description": "Mixed packing provisions.",
                "items": {
                  "examples": [
                    "MP15"
                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "specialProvisions": {
                "description": "Special packing provisions.",
                "items": {
                  "examples": [
                    "P001",
                    "IBC03",
                    "LP01",
                    "R001"
                  ],
                  "type": "string"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "packingGroup": {
            "$ref": "#/components/schemas/PackingGroup"
          },
          "portableTank": {
            "description": "Portable tanks and bulk containers.",
            "additionalProperties": false,
            "properties": {
              "instructions": {
                "description": "Instructions.",
                "items": {
                  "examples": [
                    "T2"
                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "specialProvisions": {
                "description": "Special provisions.",
                "items": {
                  "examples": [
                    "TP1"
                  ],
                  "type": "string"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "specialProvisionsForCarriage": {
            "description": "Special provisions for carriage.",
            "additionalProperties": false,
            "properties": {
              "bulk": {
                "description": "Bulk.",
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "handling": {
                "description": "Loading, unloading and handling..",
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "operations": {
                "description": "Operations.",
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "packages": {
                "description": "Packages.",
                "items": {
                  "examples": [
                    "V12"
                  ],
                  "type": "string"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "textOnBill": {
            "description": "Text on bill.",
            "examples": [
              "UN 1990 BENZALDEHYDE, 9, III, (E)"
            ],
            "type": "string"
          },
          "transportCategory": {
            "description": "Transport category.",
            "examples": [
              "3"
            ],
            "type": "string"
          },
          "transportName": {
            "description": "Transport name.",
            "examples": [
              "BENZALDEHYDE"
            ],
            "type": "string"
          },
          "tunnelRestrictionCode": {
            "description": "Tunnel restriction code.",
            "examples": [
              "E"
            ],
            "type": "string"
          },
          "vehicleForTankCarriage": {
            "description": "Vehicle for tank carriage.",
            "examples": [
              "AT"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "TextOnBillLanguage": {
        "description": "Language in which the text to put on transport document will be provided.",
        "enum": [
          "en",
          "fr",
          "tr",
          "de",
          "dk",
          "nl"
        ],
        "example": "en",
        "type": "string"
      },
      "TextOnBillRequest": {
        "properties": {
          "languages": {
            "description": "Languages in which the text to put on transport document will be provided.",
            "items": {
              "$ref": "#/components/schemas/TextOnBillLanguage"
            },
            "type": "array"
          },
          "questions": {
            "description": "The list of questions with their answers.",
            "items": {
              "properties": {
                "answerId": {
                  "description": "The id of the answer.",
                  "type": "string"
                },
                "questionId": {
                  "description": "The id of the question.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "TextOnBillResponse": {
        "additionalProperties": false,
        "properties": {
          "errors": {
            "description": "The list of errors.",
            "items": {
              "properties": {
                "code": {
                  "description": "The code of the error.",
                  "type": "string"
                },
                "description": {
                  "description": "The description of the error.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "nextQuestion": {
            "additionalProperties": false,
            "description": "The next question to be answered.",
            "format": "NewQuestionResponse",
            "properties": {
              "answers": {
                "description": "The list of possible answers.",
                "items": {
                  "additionalProperties": false,
                  "properties": {
                    "answerId": {
                      "examples": [
                        "0",
                        "1",
                        "2"
                      ],
                      "type": "string"
                    },
                    "answerLabel": {
                      "examples": [
                        "Neither",
                        "Residues of last charge, uncleaned",
                        "Empty means of containment, uncleaned"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "type": "array"
              },
              "questionId": {
                "description": "The id of the question.",
                "examples": [
                  "2"
                ],
                "type": "string"
              },
              "questionLabel": {
                "description": "The label of the question.",
                "examples": [
                  "Does it contain uncleaned residues of last charge or uncleaned empty means of containment?"
                ],
                "type": "string"
              }
            },
            "type": "object"
          },
          "previousQuestions": {
            "description": "The list of questions with their answers.",
            "items": {
              "additionalProperties": false,
              "format": "AnsweredQuestionResponse",
              "properties": {
                "answerId": {
                  "description": "The id of the answer.",
                  "examples": [
                    "0",
                    "1"
                  ],
                  "type": "string"
                },
                "answerLabel": {
                  "description": "The label of the answer.",
                  "examples": [
                    "BUTYLENES MIXTURE",
                    "Use specific text"
                  ],
                  "type": "string"
                },
                "questionId": {
                  "description": "The id of the question",
                  "examples": [
                    "0",
                    "1"
                  ],
                  "type": "string"
                },
                "questionLabel": {
                  "description": "The label of the question.",
                  "examples": [
                    "Which transport name would you like to use?",
                    "Use default text or specific text on transport document?"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "resultTexts": {
            "items": {
              "format": "ResultText",
              "properties": {
                "lang": {
                  "$ref": "#/components/schemas/TextOnBillLanguage"
                },
                "value": {
                  "description": "The text to put on transport document.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "SubscriptionCallback": {
        "type": "object",
        "required": [
          "accountEmail",
          "eventType"
        ],
        "properties": {
          "accountEmail": {
            "type": "string",
            "format": "email",
            "description": "Account email.",
            "examples": [
              "subscriber@test.tld"
            ]
          },
          "eventType": {
            "type": "string",
            "enum": [
              "CREDIT_USED"
            ],
            "example": "CREDIT_USED",
            "description": "Type of the event."
          },
          "numberOfCreditsUsed": {
            "type": "integer",
            "example": 23,
            "description": "Number of credits used. Present only if `eventType` is `CREDIT_USED`."
          }
        }
      }
    },
    "examples": {
      "bad-request": {
        "value": {
          "errors": [
            {
              "code": "3.1",
              "field": "fieldName",
              "description": "Required in request and should be not null"
            }
          ]
        },
        "summary": "Bad request",
        "description": "Bad request"
      },
      "unauthorized": {
        "value": {
          "errors": [
            {
              "code": "1.11",
              "description": "Invalid access token"
            }
          ]
        },
        "summary": "Unauthorized",
        "description": "Unauthorized"
      },
      "invalid-credentials": {
        "value": {
          "errors": [
            {
              "code": "1.6",
              "description": "Invalid client credentials. Authorization header is present but the client credentials given is incorrect."
            }
          ]
        },
        "summary": "Unauthorized",
        "description": "Unauthorized"
      },
      "create-fd-simple": {
        "value": {
          "additionalDocuments": [
            {
              "pdfTemplateType": "EUROPEENNE"
            }
          ],
          "agreedDateOfDelivery": "2022-01-01",
          "agreedDateOfTakingOver": "2022-01-01",
          "agreedDateTimeOfDelivery": "2023-05-25T10:54:32Z",
          "agreedDateTimeOfTakingOver": "2023-05-25T10:54:31Z",
          "attachments": [
            {
              "content": "/9j/4AAQSkZJRgABAQAAyADIAAD/2wBDAAEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQH/2wBDAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQH/wAARCAABAAEDAREAAhEBAxEB/8QAFAABAAAAAAAAAAAAAAAAAAAACf/EABQQAQAAAAAAAAAAAAAAAAAAAAD/xAAVAQEBAAAAAAAAAAAAAAAAAAAJCv/EABQRAQAAAAAAAAAAAAAAAAAAAAD/2gAMAwEAAhEDEQA/ABfFOv4f/9k=",
              "documentType": "PACKING_SLIP",
              "mimeType": "image/jpeg",
              "name": "An Attachment name",
              "originalFileName": "Architecture 2013-11-05.jpg",
              "sealed": false,
              "type": "GENERAL"
            }
          ],
          "availableSigningMethods": {
            "collection": [
              "TFA",
              "OWN"
            ],
            "carrierToCarrier": [
              "TFA"
            ],
            "delivery": [
              "TFA"
            ]
          },
          "carrier": {
            "additionalDeliveryNotificationParties": [
              {
                "emailAddress": "party@example.com"
              }
            ],
            "addressComplement": "string",
            "addressLocation": {
              "latitude": 49.6839305,
              "longitude": 24.0338217,
              "accuracy": 5.5,
              "crs": "EPSG:4326",
              "provider": "fused"
            },
            "buildingNumber": "11",
            "cityName": "London",
            "contactEmailAddress": "role@example.com",
            "contactFaxNumber": "380631231237",
            "contactName": "Jane Doe",
            "contactNote": "contact note",
            "contactPhoneNumber": "380631231237",
            "countryCode": "NLD",
            "countryName": "France",
            "glnCode": "string",
            "name": "John Doe",
            "postalBox": "PB12",
            "postalCode": "2676NJ",
            "streetName": "Example Str.",
            "submittedAccountEmailAddress": "email@example.com",
            "taxIdentificationNumber": "string",
            "taxIdentificationNumberType": "string",
            "traderIdentificationNumber": "TIN",
            "licensePlateData": {
              "licensePlates": [
                {
                  "distanceDriven": {
                    "mileageAtArrival": 2288.22,
                    "mileageAtDeparture": 3388.22,
                    "mileageUnit": "KM",
                    "traversedDistance": 123.12
                  },
                  "licensePlateNumber": "NF-123-XC",
                  "vehicleType": "TRUCK"
                }
              ]
            },
            "permitNumber": "PN123"
          },
          "carrierAccessCodes": [
            "access_code"
          ],
          "carrierCode": "123123123123",
          "carrierToDriverInstructions": "Goods should be handled with great care.",
          "cleaning": {
            "scheme": "QUALIMAT",
            "performedCleaning": {
              "goodsDescription": "The goods were dirty.",
              "idtfCode": "IDTFC",
              "cleaningRegime": "B",
              "cleaningProduct": "string",
              "cleaningEntity": {
                "type": "STATION",
                "name": "Cleaning Inc."
              }
            },
            "previousLoads": [
              {
                "goodsDescription": "The goods were dirty.",
                "idtfCode": "IDTFC",
                "cleaningRegime": "B"
              }
            ],
            "cleaningCertificate": {
              "content": "/9j/4AAQSkZJRgABAQAAyADIAAD/2wBDAAEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQH/2wBDAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQH/wAARCAABAAEDAREAAhEBAxEB/8QAFAABAAAAAAAAAAAAAAAAAAAACf/EABQQAQAAAAAAAAAAAAAAAAAAAAD/xAAVAQEBAAAAAAAAAAAAAAAAAAAJCv/EABQRAQAAAAAAAAAAAAAAAAAAAAD/2gAMAwEAAhEDEQA/ABfFOv4f/9k=",
              "documentType": "PACKING_SLIP",
              "mimeType": "image/jpeg",
              "name": "An Attachment name",
              "originalFileName": "Architecture 2013-11-05.jpg",
              "sealed": false,
              "type": "CLEANING_CERTIFICATE"
            }
          },
          "client": {
            "additionalDeliveryNotificationParties": [
              {
                "emailAddress": "party@example.com"
              }
            ],
            "addressComplement": "string",
            "addressLocation": {
              "latitude": 49.6839305,
              "longitude": 24.0338217,
              "accuracy": 5.5,
              "crs": "EPSG:4326",
              "provider": "fused"
            },
            "buildingNumber": "11",
            "cityName": "London",
            "contactEmailAddress": "role@example.com",
            "contactFaxNumber": "380631231237",
            "contactName": "Jane Doe",
            "contactNote": "contact note",
            "contactPhoneNumber": "380631231237",
            "countryCode": "NLD",
            "countryName": "France",
            "glnCode": "string",
            "name": "John Doe",
            "postalBox": "PB12",
            "postalCode": "2676NJ",
            "streetName": "Example Str.",
            "submittedAccountEmailAddress": "email@example.com",
            "taxIdentificationNumber": "string",
            "taxIdentificationNumberType": "string",
            "traderIdentificationNumber": "TIN"
          },
          "collectionMission": {
            "groupingIdentifier": "mission_grouping_id"
          },
          "collectionSecrets": {
            "s1": "string",
            "s2": "string",
            "s3": "string"
          },
          "configuration": {
            "allowRoleUpdateForCarrier": false,
            "allowRtiAddition": true,
            "availableSigningMethods": {
              "collection": [
                "TFA"
              ],
              "carrierToCarrier": [
                "TFA"
              ],
              "delivery": [
                "TFA"
              ]
            },
            "counterpartySigningInspections": {
              "showSeals": true
            },
            "disableContainerAddition": true,
            "disableTimesRegistration": true,
            "disableUpdatingGoodsItems": true,
            "disableUpdatingReturnableTransportItems": true,
            "excludedTransferTypes": [
              "CARRIER_TO_CARRIER"
            ],
            "forceCarrierSoGSignature": false,
            "predefinedComments": [
              "Predefined comment 1",
              "Predefined comment 2"
            ],
            "predefinedReturnableTransportItems": [
              {
                "name": "string",
                "ssccCode": "string",
                "internalCode": "string",
                "shortName": "string",
                "gsOneCode": "string",
                "imageUrl": "https://example.com/image.png"
              }
            ],
            "signingInspections": {
              "showGoods": true,
              "showRtis": true,
              "showTimes": true,
              "timesConfiguration": {
                "mandatoryArrivalTime": true,
                "mandatoryDepartureTime": true,
                "mandatoryStartLoadingUnloadingTime": true,
                "mandatoryEndLoadingUnloadingTime": true
              },
              "showReferences": true,
              "showLicensePlates": true,
              "showCommentsAndAttachments": true,
              "commentsAndAttachmentsConfiguration": {
                "mandatoryCollectionPicture": true,
                "mandatoryDeliveryPicture": true
              },
              "showTemperatureControl": true,
              "showAddress": true,
              "showCleaning": true
            },
            "skipFreightDocumentDetails": false,
            "freightDocumentDetailsReadOnly": false,
            "skipProofOfTransfer": false,
            "blockSigningOnError": false,
            "allowCheckIn": false,
            "showFirstReference": false,
            "signOnGlass": {
              "companyNameRequired": false,
              "signatoryNameRequired": true
            },
            "excludedRtiTransferenceTypes": [
              "DELIVER_AT_CONSIGNOR",
              "DELIVER_AT_CONSIGNEE"
            ]
          },
          "consignee": {
            "additionalDeliveryNotificationParties": [
              {
                "emailAddress": "party@example.com"
              }
            ],
            "addressComplement": "string",
            "addressLocation": {
              "latitude": 49.6839305,
              "longitude": 24.0338217,
              "accuracy": 5.5,
              "crs": "EPSG:4326",
              "provider": "fused"
            },
            "buildingNumber": "11",
            "cityName": "London",
            "contactEmailAddress": "role@example.com",
            "contactFaxNumber": "380631231237",
            "contactName": "Jane Doe",
            "contactNote": "contact note",
            "contactPhoneNumber": "380631231237",
            "countryCode": "NLD",
            "countryName": "France",
            "glnCode": "string",
            "name": "John Doe",
            "postalBox": "PB12",
            "postalCode": "2676NJ",
            "streetName": "Example Str.",
            "submittedAccountEmailAddress": "email@example.com",
            "taxIdentificationNumber": "string",
            "taxIdentificationNumberType": "string",
            "traderIdentificationNumber": "TIN",
            "timeWindow": {
              "startDateTime": "2023-05-25T10:54:31Z",
              "endDateTime": "2023-06-25T10:54:31Z"
            }
          },
          "consignor": {
            "additionalDeliveryNotificationParties": [
              {
                "emailAddress": "party@example.com"
              }
            ],
            "addressComplement": "string",
            "addressLocation": {
              "latitude": 49.6839305,
              "longitude": 24.0338217,
              "accuracy": 5.5,
              "crs": "EPSG:4326",
              "provider": "fused"
            },
            "buildingNumber": "11",
            "cityName": "London",
            "contactEmailAddress": "role@example.com",
            "contactFaxNumber": "380631231237",
            "contactName": "Jane Doe",
            "contactNote": "contact note",
            "contactPhoneNumber": "380631231237",
            "countryCode": "NLD",
            "countryName": "France",
            "glnCode": "string",
            "name": "John Doe",
            "postalBox": "PB12",
            "postalCode": "2676NJ",
            "streetName": "Example Str.",
            "submittedAccountEmailAddress": "email@example.com",
            "taxIdentificationNumber": "string",
            "taxIdentificationNumberType": "string",
            "traderIdentificationNumber": "TIN"
          },
          "containers": [
            {
              "number": "CNT-NUM",
              "type": "20ft Reefer",
              "verifiedGrossMass": 0,
              "verifiedGrossMassUnit": "KILOGRAM",
              "netWeight": 44.44,
              "netWeightUnit": "KILOGRAM"
            }
          ],
          "controlledTemperatures": {
            "atDelivery": {
              "value": "17C",
              "dateTime": "2019-08-24T14:15:22Z"
            },
            "atPreviousLocation": {
              "value": "17C",
              "dateTime": "2019-08-24T14:15:22Z"
            }
          },
          "deliveryMission": {
            "groupingIdentifier": "mission_grouping_id"
          },
          "deliverySecrets": {
            "s1": "string",
            "s2": "string",
            "s3": "string"
          },
          "establishedCountry": "NLD",
          "establishedDate": "2023-05-25",
          "establishedPlace": "France",
          "estimatedDateTimeOfDelivery": "2023-05-25T10:54:31Z",
          "estimatedDateTimeOfTakingOver": "2023-05-25T10:34:31Z",
          "externalIdentifier": "7878787",
          "handlingInstructions": {
            "controlledTemperature": true,
            "temperature": "18"
          },
          "incoterms": "string",
          "mileageUnit": "KM",
          "paymentForCarriage": "10 EUR",
          "pdfTemplateType": "ECMR",
          "placeOfDelivery": {
            "additionalDeliveryNotificationParties": [
              {
                "emailAddress": "party@example.com"
              }
            ],
            "addressComplement": "string",
            "addressLocation": {
              "latitude": 49.6839305,
              "longitude": 24.0338217,
              "accuracy": 5.5,
              "crs": "EPSG:4326",
              "provider": "fused"
            },
            "buildingNumber": "11",
            "cityName": "London",
            "contactEmailAddress": "role@example.com",
            "contactFaxNumber": "380631231237",
            "contactName": "Jane Doe",
            "contactNote": "contact note",
            "contactPhoneNumber": "380631231237",
            "countryCode": "NLD",
            "countryName": "France",
            "glnCode": "string",
            "name": "John Doe",
            "postalBox": "PB12",
            "postalCode": "2676NJ",
            "streetName": "Example Str.",
            "submittedAccountEmailAddress": "email@example.com",
            "taxIdentificationNumber": "string",
            "taxIdentificationNumberType": "string",
            "traderIdentificationNumber": "TIN",
            "timeWindow": {
              "startDateTime": "2023-05-25T10:54:31Z",
              "endDateTime": "2023-06-25T10:54:31Z"
            }
          },
          "placeOfTakingOver": {
            "additionalDeliveryNotificationParties": [
              {
                "emailAddress": "party@example.com"
              }
            ],
            "addressComplement": "string",
            "addressLocation": {
              "latitude": 49.6839305,
              "longitude": 24.0338217,
              "accuracy": 5.5,
              "crs": "EPSG:4326",
              "provider": "fused"
            },
            "buildingNumber": "11",
            "cityName": "London",
            "contactEmailAddress": "role@example.com",
            "contactFaxNumber": "380631231237",
            "contactName": "Jane Doe",
            "contactNote": "contact note",
            "contactPhoneNumber": "380631231237",
            "countryCode": "NLD",
            "countryName": "France",
            "glnCode": "string",
            "name": "John Doe",
            "postalBox": "PB12",
            "postalCode": "2676NJ",
            "streetName": "Example Str.",
            "submittedAccountEmailAddress": "email@example.com",
            "taxIdentificationNumber": "string",
            "taxIdentificationNumberType": "string",
            "traderIdentificationNumber": "TIN",
            "timeWindow": {
              "startDateTime": "2023-05-25T10:54:31Z",
              "endDateTime": "2023-06-25T10:54:31Z"
            }
          },
          "references": [
            {
              "allowCarrierEdit": true,
              "name": "ref-name",
              "value": "ref-value",
              "submitterOnly": false,
              "technical": false
            }
          ],
          "reimbursementAmount": 1.1,
          "reimbursementCurrency": "EUR",
          "senderInstructions": "Goods should be handled with great care.",
          "signingInspections": {
            "showGoods": true,
            "showRtis": true,
            "showTimes": true,
            "timesConfiguration": {
              "mandatoryArrivalTime": true,
              "mandatoryDepartureTime": true,
              "mandatoryStartLoadingUnloadingTime": true,
              "mandatoryEndLoadingUnloadingTime": true
            },
            "showReferences": true,
            "showLicensePlates": true,
            "showCommentsAndAttachments": true,
            "commentsAndAttachmentsConfiguration": {
              "mandatoryCollectionPicture": true,
              "mandatoryDeliveryPicture": true
            },
            "showTemperatureControl": true,
            "showAddress": true,
            "showCleaning": true
          },
          "specialAgreements": "Goods should be handled with great care.",
          "status": "ISSUED",
          "structuredGoods": [
            {
              "internalCode": "external_id",
              "name": "The name",
              "numberOfPackages": 22,
              "numberOfPackagesRefusedAtDelivery": 22,
              "netWeight": 44.44,
              "netWeightUnit": "KILOGRAM",
              "references": [
                {
                  "allowCarrierEdit": true,
                  "name": "ref-name",
                  "value": "ref-value",
                  "submitterOnly": false,
                  "technical": false
                }
              ],
              "commercialValue": 666.777,
              "currency": "USD",
              "customMeasurementQuantity": 2.22,
              "customMeasurementUnit": "inch",
              "methodOfPackaging": "Pallets",
              "statisticalNumber": 123,
              "tareWeight": 44.44,
              "tareWeightUnit": "KILOGRAM",
              "volume": 0,
              "volumeUnit": "LITRE",
              "weight": 44.44,
              "weightUnit": "KILOGRAM",
              "idtfCode": "78788",
              "eanCode": "EAN_CODE",
              "natureOfGoods": "Nature of the goods",
              "type": "GOOD",
              "commodityCode": "string",
              "loadingMeters": 88.88,
              "shortName": "Short name of the goods",
              "ssccCode": "SSCC-code"
            }
          ],
          "structuredGoodsInfo": {
            "totalNumberOfPackages": 123,
            "totalCustomMeasurementQuantity": 88.88,
            "totalCustomMeasurementUnit": "83.38",
            "totalGrossWeight": 77.33,
            "totalGrossWeightUnit": "KILOGRAM",
            "totalNetWeight": 77.33,
            "totalNetWeightUnit": "KILOGRAM",
            "totalTareWeight": 77.33,
            "totalTareWeightUnit": "KILOGRAM",
            "totalVolume": 77.33,
            "totalVolumeUnit": "LITRE",
            "totalCommercialValue": 555.55,
            "totalCommercialValueCurrency": "USD",
            "totalLoadingMeters": 88.88,
            "emergencyPhoneNumber": "380631231237",
            "emergencyContactName": "John Doe",
            "sealNumbers": "SEAL",
            "europeanOrganicCertificationBodyCode": "string"
          },
          "subsequentCarriers": [
            {
              "additionalDeliveryNotificationParties": [
                {
                  "emailAddress": "party@example.com"
                }
              ],
              "addressComplement": "string",
              "addressLocation": {
                "latitude": 49.6839305,
                "longitude": 24.0338217,
                "accuracy": 5.5,
                "crs": "EPSG:4326",
                "provider": "fused"
              },
              "buildingNumber": "11",
              "cityName": "London",
              "contactEmailAddress": "role@example.com",
              "contactFaxNumber": "380631231237",
              "contactName": "Jane Doe",
              "contactNote": "contact note",
              "contactPhoneNumber": "380631231237",
              "countryCode": "NLD",
              "countryName": "France",
              "glnCode": "string",
              "name": "John Doe",
              "postalBox": "PB12",
              "postalCode": "2676NJ",
              "streetName": "Example Str.",
              "submittedAccountEmailAddress": "email@example.com",
              "taxIdentificationNumber": "string",
              "taxIdentificationNumberType": "string",
              "traderIdentificationNumber": "TIN",
              "licensePlateData": {
                "licensePlates": [
                  {
                    "distanceDriven": {
                      "mileageAtArrival": 2288.22,
                      "mileageAtDeparture": 3388.22,
                      "mileageUnit": "KM",
                      "traversedDistance": 123.12
                    },
                    "licensePlateNumber": "NF-123-XC",
                    "vehicleType": "TRUCK"
                  }
                ]
              },
              "permitNumber": "PN123"
            }
          ],
          "timeWindowOfDelivery": {
            "startDateTime": "2023-05-25T10:54:31Z",
            "endDateTime": "2023-06-25T10:54:31Z"
          },
          "timeWindowOfTakingOver": {
            "startDateTime": "2023-05-25T10:54:31Z",
            "endDateTime": "2023-06-25T10:54:31Z"
          },
          "transportConditions": "AVC2002",
          "transportReference": "T_REF",
          "type": "WAYBILL"
        }
      },
      "create-fd-minimal-draft": {
        "value": {
          "status": "DRAFT"
        }
      },
      "update-fd-simple": {
        "value": {
          "configuration": {
            "excludedTransferTypes": [],
            "availableSigningMethods": {
              "carrierToCarrier": [
                "TFA",
                "OWN"
              ],
              "collection": [
                "TFA",
                "SIGN_ON_GLASS",
                "OWN"
              ],
              "delivery": [
                "TFA",
                "OWN",
                "SIGN_ON_GLASS"
              ]
            },
            "signingInspections": {
              "showCommentsAndAttachments": true,
              "showGoods": true,
              "showLicensePlates": true,
              "showReferences": true,
              "showRtis": true,
              "showTimes": true
            },
            "allowRtiAddition": true,
            "skipFreightDocumentDetails": false,
            "freightDocumentDetailsReadOnly": false
          },
          "handlingInstructions": {
            "controlledTemperature": true,
            "temperature": "5.0 C - 7.5 C"
          },
          "references": [
            {
              "name": "refname1",
              "referenceId": "100",
              "value": "refvalue1",
              "allowCarrierEdit": true
            },
            {
              "name": "refname2",
              "referenceId": "101",
              "value": "ref2",
              "allowCarrierEdit": true
            }
          ],
          "carrier": {
            "buildingNumber": "123",
            "cityName": "SomeCity",
            "contactEmailAddress": "carrier@test.tld",
            "contactPhoneNumber": "0612345678",
            "contactFaxNumber": "87654321123",
            "contactNote": "Carrier extra notes",
            "contactName": "Carrier Contact Name",
            "countryCode": "NLD",
            "countryName": "The Netherlands",
            "name": "John Carrierman",
            "postalCode": "1234 AB",
            "streetName": "Some Street",
            "taxIdentificationNumber": "123456",
            "submittedAccountEmailAddress": "carrier@test.tld",
            "licensePlateData": {
              "licensePlates": [
                {
                  "vehicleType": "TRAILER",
                  "licensePlateNumber": "OB-12-GN"
                },
                {
                  "vehicleType": "TRUCK",
                  "licensePlateNumber": "PB 9074PA"
                }
              ]
            }
          },
          "subsequentCarriers": [
            {
              "buildingNumber": "123",
              "cityName": "SomeCity",
              "contactEmailAddress": "carrier-sub@test.tld",
              "contactPhoneNumber": "0612345678",
              "contactFaxNumber": "87654321123",
              "contactNote": "Carrier extra notes",
              "contactName": "Carrier Contact Name",
              "countryCode": "NLD",
              "countryName": "The Netherlands",
              "name": "John Carrierman",
              "postalCode": "1234 AB",
              "streetName": "Some Street",
              "taxIdentificationNumber": "123456",
              "submittedAccountEmailAddress": "carrier-sub@test.tld",
              "licensePlateData": {
                "licensePlates": [
                  {
                    "vehicleType": "TRAILER",
                    "licensePlateNumber": "OB-12-GN"
                  },
                  {
                    "vehicleType": "TRUCK",
                    "licensePlateNumber": "PB 9074PA"
                  }
                ]
              }
            },
            {
              "buildingNumber": "123",
              "cityName": "SomeCity",
              "contactEmailAddress": "carrier@test.tld",
              "contactPhoneNumber": "0612345678",
              "contactFaxNumber": "87654321123",
              "contactNote": "Carrier extra notes",
              "contactName": "Carrier Contact Name",
              "countryCode": "NLD",
              "countryName": "The Netherlands",
              "name": "John Carrierman 2",
              "postalCode": "1234 AB",
              "streetName": "Some Street",
              "taxIdentificationNumber": "123456",
              "submittedAccountEmailAddress": "carrier@test.tld"
            }
          ],
          "consignee": {
            "buildingNumber": "123",
            "cityName": "SomeCity",
            "contactEmailAddress": "consignee@test.tld",
            "contactPhoneNumber": "0612345678",
            "contactFaxNumber": "87654321123",
            "contactNote": "Some extra notes",
            "contactName": "🐱",
            "countryCode": "NLD",
            "countryName": "The Netherlands",
            "name": "John Consignee",
            "postalCode": "1234 AB",
            "streetName": "Some Street",
            "taxIdentificationNumber": "123456",
            "submittedAccountEmailAddress": "consignee@test.tld"
          },
          "consignor": {
            "buildingNumber": "123",
            "cityName": "Lviv",
            "contactPhoneNumber": "0612345678",
            "contactFaxNumber": "87654321123",
            "contactNote": "Some extra notes",
            "contactName": "Some Contact Name",
            "countryCode": "NLD",
            "countryName": "The Netherlands",
            "name": "John Consignor",
            "postalCode": "1234 AB",
            "streetName": "Some Street Some StreetSome StreetSome StreetSome StreetSome StreetSome",
            "taxIdentificationNumber": "123456",
            "submittedAccountEmailAddress": "consignor@test.tld"
          },
          "establishedDate": "2019-05-15",
          "establishedPlace": "SomeCity",
          "estimatedDateTimeOfDelivery": "2000-12-30T12:34:56Z",
          "estimatedDateTimeOfTakingOver": "2000-12-30T12:00:00Z",
          "structuredGoodsInfo": {
            "totalNumberOfPackages": 26,
            "emergencyPhoneNumber": "+0070080-222",
            "emergencyContactName": "John Doe the Emergency Contact"
          },
          "structuredGoods": [
            {
              "type": "GOOD",
              "name": "Hubba-Bubba",
              "numberOfPackages": 55,
              "shortName": "SGN",
              "methodOfPackaging": "Pallet",
              "natureOfGoods": "Some NatureOfGood",
              "ssccCode": "ssccCodeValue",
              "internalCode": "internalCode",
              "eanCode": "eanCode",
              "gsOneCode": "gsOneCode",
              "statisticalNumber": 123
            },
            {
              "type": "GOOD",
              "name": "Blue Water",
              "numberOfPackages": 123,
              "shortName": "SGN",
              "methodOfPackaging": "Pallet",
              "natureOfGoods": "Some NatureOfGood"
            },
            {
              "type": "GOOD",
              "name": "Some GoodName",
              "numberOfPackages": 1,
              "shortName": "SGN",
              "methodOfPackaging": "Pallet",
              "natureOfGoods": "Some NatureOfGood"
            }
          ],
          "paymentForCarriage": "CARRIAGE_PAID",
          "placeOfDelivery": {
            "permitNumber": "1234",
            "buildingNumber": "25",
            "cityName": "Frankfurt am Main",
            "contactEmailAddress": "pod@test.tld",
            "contactPhoneNumber": "0612345678",
            "contactFaxNumber": "87654321123",
            "contactNote": "Some extra notes",
            "contactName": "Jane Doe",
            "countryCode": "NLD",
            "countryName": "The Netherlands",
            "name": "John Place of Delivery",
            "postalCode": "60325",
            "streetName": "Senckenberganlage",
            "taxIdentificationNumber": "123456",
            "submittedAccountEmailAddress": "pod@test.tld"
          },
          "placeOfTakingOver": {
            "buildingNumber": "123",
            "cityName": "Lviv-City",
            "contactEmailAddress": "pot@test.tld",
            "contactPhoneNumber": "0612345678",
            "contactFaxNumber": "87654321123",
            "contactNote": "John extra notes",
            "contactName": "John Contact Name",
            "countryCode": "NLD",
            "countryName": "The Netherlands",
            "name": "John POTOman",
            "postalCode": "1234 AB",
            "streetName": "John Street"
          },
          "reimbursementAmount": 1.23,
          "reimbursementCurrency": "EUR",
          "senderInstructions": "Some Sender Instructions",
          "specialAgreements": "Some Special Agreements",
          "status": "DRAFT",
          "transportConditions": "AVC2002",
          "type": "WAYBILL_CZE",
          "pdfTemplateType": "NAKLADNI_LIST_CZ",
          "orderNumber": "order_num"
        }
      },
      "create-fd-batch": {
        "value": {
          "freightDocuments": [
            {
              "agreedDateOfDelivery": "2022-01-01",
              "agreedDateOfTakingOver": "2022-01-01",
              "agreedDateTimeOfDelivery": "2023-05-25T10:54:32Z",
              "agreedDateTimeOfTakingOver": "2023-05-25T10:54:31Z",
              "attachments": [
                {
                  "content": "/9j/4AAQSkZJRgABAQAAyADIAAD/2wBDAAEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQH/2wBDAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQH/wAARCAABAAEDAREAAhEBAxEB/8QAFAABAAAAAAAAAAAAAAAAAAAACf/EABQQAQAAAAAAAAAAAAAAAAAAAAD/xAAVAQEBAAAAAAAAAAAAAAAAAAAJCv/EABQRAQAAAAAAAAAAAAAAAAAAAAD/2gAMAwEAAhEDEQA/ABfFOv4f/9k=",
                  "documentType": "PACKING_SLIP",
                  "mimeType": "image/jpeg",
                  "name": "An Attachment name",
                  "originalFileName": "Architecture 2013-11-05.jpg",
                  "sealed": false,
                  "type": "GENERAL"
                }
              ],
              "availableSigningMethods": {
                "collection": [
                  "TFA",
                  "OWN"
                ],
                "carrierToCarrier": [
                  "TFA"
                ],
                "delivery": [
                  "TFA"
                ]
              },
              "carrier": {
                "additionalDeliveryNotificationParties": [
                  {
                    "emailAddress": "party@example.com"
                  }
                ],
                "addressComplement": "string",
                "addressLocation": {
                  "latitude": 49.6839305,
                  "longitude": 24.0338217,
                  "accuracy": 5.5,
                  "crs": "EPSG:4326",
                  "provider": "fused"
                },
                "buildingNumber": "11",
                "cityName": "London",
                "contactEmailAddress": "role@example.com",
                "contactFaxNumber": "380631231237",
                "contactName": "Jane Doe",
                "contactNote": "contact note",
                "contactPhoneNumber": "380631231237",
                "countryCode": "NLD",
                "countryName": "France",
                "glnCode": "string",
                "name": "John Doe",
                "postalBox": "PB12",
                "postalCode": "2676NJ",
                "streetName": "Example Str.",
                "submittedAccountEmailAddress": "email@example.com",
                "taxIdentificationNumber": "string",
                "taxIdentificationNumberType": "string",
                "traderIdentificationNumber": "TIN",
                "licensePlateData": {
                  "licensePlates": [
                    {
                      "distanceDriven": {
                        "mileageAtArrival": 2288.22,
                        "mileageAtDeparture": 3388.22,
                        "mileageUnit": "KM",
                        "traversedDistance": 123.12
                      },
                      "licensePlateNumber": "NF-123-XC",
                      "vehicleType": "TRUCK"
                    }
                  ]
                },
                "permitNumber": "PN123"
              },
              "carrierAccessCodes": [
                "access_code"
              ],
              "carrierCode": "123123123123",
              "carrierToDriverInstructions": "Goods should be handled with great care.",
              "cleaning": {
                "scheme": "QUALIMAT",
                "performedCleaning": {
                  "goodsDescription": "The goods were dirty.",
                  "idtfCode": "IDTFC",
                  "cleaningRegime": "B",
                  "cleaningProduct": "string",
                  "cleaningEntity": {
                    "type": "STATION",
                    "name": "Cleaning Inc."
                  }
                },
                "previousLoads": [
                  {
                    "goodsDescription": "The goods were dirty.",
                    "idtfCode": "IDTFC",
                    "cleaningRegime": "B"
                  }
                ],
                "cleaningCertificate": {
                  "content": "/9j/4AAQSkZJRgABAQAAyADIAAD/2wBDAAEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQH/2wBDAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQH/wAARCAABAAEDAREAAhEBAxEB/8QAFAABAAAAAAAAAAAAAAAAAAAACf/EABQQAQAAAAAAAAAAAAAAAAAAAAD/xAAVAQEBAAAAAAAAAAAAAAAAAAAJCv/EABQRAQAAAAAAAAAAAAAAAAAAAAD/2gAMAwEAAhEDEQA/ABfFOv4f/9k=",
                  "documentType": "PACKING_SLIP",
                  "mimeType": "image/jpeg",
                  "name": "An Attachment name",
                  "originalFileName": "Architecture 2013-11-05.jpg",
                  "sealed": false,
                  "type": "CLEANING_CERTIFICATE"
                }
              },
              "client": {
                "additionalDeliveryNotificationParties": [
                  {
                    "emailAddress": "party@example.com"
                  }
                ],
                "addressComplement": "string",
                "addressLocation": {
                  "latitude": 49.6839305,
                  "longitude": 24.0338217,
                  "accuracy": 5.5,
                  "crs": "EPSG:4326",
                  "provider": "fused"
                },
                "buildingNumber": "11",
                "cityName": "London",
                "contactEmailAddress": "role@example.com",
                "contactFaxNumber": "380631231237",
                "contactName": "Jane Doe",
                "contactNote": "contact note",
                "contactPhoneNumber": "380631231237",
                "countryCode": "NLD",
                "countryName": "France",
                "glnCode": "string",
                "name": "John Doe",
                "postalBox": "PB12",
                "postalCode": "2676NJ",
                "streetName": "Example Str.",
                "submittedAccountEmailAddress": "email@example.com",
                "taxIdentificationNumber": "string",
                "taxIdentificationNumberType": "string",
                "traderIdentificationNumber": "TIN"
              },
              "collectionMission": {
                "groupingIdentifier": "mission_grouping_id"
              },
              "collectionSecrets": {
                "s1": "string",
                "s2": "string",
                "s3": "string"
              },
              "configuration": {
                "allowRoleUpdateForCarrier": false,
                "allowRtiAddition": true,
                "availableSigningMethods": {
                  "collection": [
                    "TFA"
                  ],
                  "carrierToCarrier": [
                    "TFA"
                  ],
                  "delivery": [
                    "TFA"
                  ]
                },
                "counterpartySigningInspections": {
                  "showSeals": true
                },
                "disableContainerAddition": true,
                "disableTimesRegistration": true,
                "disableUpdatingGoodsItems": true,
                "disableUpdatingReturnableTransportItems": true,
                "excludedTransferTypes": [
                  "CARRIER_TO_CARRIER"
                ],
                "forceCarrierSoGSignature": false,
                "predefinedComments": [
                  "Predefined comment 1",
                  "Predefined comment 2"
                ],
                "predefinedReturnableTransportItems": [
                  {
                    "name": "string",
                    "ssccCode": "string",
                    "internalCode": "string",
                    "shortName": "string",
                    "gsOneCode": "string",
                    "imageUrl": "https://example.com/image.png"
                  }
                ],
                "signingInspections": {
                  "showGoods": true,
                  "showRtis": true,
                  "showTimes": true,
                  "timesConfiguration": {
                    "mandatoryArrivalTime": true,
                    "mandatoryDepartureTime": true,
                    "mandatoryStartLoadingUnloadingTime": true,
                    "mandatoryEndLoadingUnloadingTime": true
                  },
                  "showReferences": true,
                  "showLicensePlates": true,
                  "showCommentsAndAttachments": true,
                  "commentsAndAttachmentsConfiguration": {
                    "mandatoryCollectionPicture": true,
                    "mandatoryDeliveryPicture": true
                  },
                  "showTemperatureControl": true,
                  "showAddress": true,
                  "showCleaning": true
                },
                "skipFreightDocumentDetails": false,
                "freightDocumentDetailsReadOnly": false,
                "skipProofOfTransfer": false,
                "blockSigningOnError": false,
                "allowCheckIn": false,
                "showFirstReference": false,
                "signOnGlass": {
                  "companyNameRequired": false,
                  "signatoryNameRequired": true
                },
                "excludedRtiTransferenceTypes": [
                  "DELIVER_AT_CONSIGNOR",
                  "DELIVER_AT_CONSIGNEE"
                ]
              },
              "consignee": {
                "additionalDeliveryNotificationParties": [
                  {
                    "emailAddress": "party@example.com"
                  }
                ],
                "addressComplement": "string",
                "addressLocation": {
                  "latitude": 49.6839305,
                  "longitude": 24.0338217,
                  "accuracy": 5.5,
                  "crs": "EPSG:4326",
                  "provider": "fused"
                },
                "buildingNumber": "11",
                "cityName": "London",
                "contactEmailAddress": "role@example.com",
                "contactFaxNumber": "380631231237",
                "contactName": "Jane Doe",
                "contactNote": "contact note",
                "contactPhoneNumber": "380631231237",
                "countryCode": "NLD",
                "countryName": "France",
                "glnCode": "string",
                "name": "John Doe",
                "postalBox": "PB12",
                "postalCode": "2676NJ",
                "streetName": "Example Str.",
                "submittedAccountEmailAddress": "email@example.com",
                "taxIdentificationNumber": "string",
                "taxIdentificationNumberType": "string",
                "traderIdentificationNumber": "TIN",
                "timeWindow": {
                  "startDateTime": "2023-05-25T10:54:31Z",
                  "endDateTime": "2023-06-25T10:54:31Z"
                }
              },
              "consignor": {
                "additionalDeliveryNotificationParties": [
                  {
                    "emailAddress": "party@example.com"
                  }
                ],
                "addressComplement": "string",
                "addressLocation": {
                  "latitude": 49.6839305,
                  "longitude": 24.0338217,
                  "accuracy": 5.5,
                  "crs": "EPSG:4326",
                  "provider": "fused"
                },
                "buildingNumber": "11",
                "cityName": "London",
                "contactEmailAddress": "role@example.com",
                "contactFaxNumber": "380631231237",
                "contactName": "Jane Doe",
                "contactNote": "contact note",
                "contactPhoneNumber": "380631231237",
                "countryCode": "NLD",
                "countryName": "France",
                "glnCode": "string",
                "name": "John Doe",
                "postalBox": "PB12",
                "postalCode": "2676NJ",
                "streetName": "Example Str.",
                "submittedAccountEmailAddress": "email@example.com",
                "taxIdentificationNumber": "string",
                "taxIdentificationNumberType": "string",
                "traderIdentificationNumber": "TIN"
              },
              "containers": [
                {
                  "number": "CNT-NUM",
                  "type": "20ft Reefer",
                  "verifiedGrossMass": 0,
                  "verifiedGrossMassUnit": "KILOGRAM",
                  "netWeight": 44.44,
                  "netWeightUnit": "KILOGRAM"
                }
              ],
              "controlledTemperatures": {
                "atDelivery": {
                  "value": "17C",
                  "dateTime": "2019-08-24T14:15:22Z"
                },
                "atPreviousLocation": {
                  "value": "17C",
                  "dateTime": "2019-08-24T14:15:22Z"
                }
              },
              "deliveryMission": {
                "groupingIdentifier": "mission_grouping_id"
              },
              "deliverySecrets": {
                "s1": "string",
                "s2": "string",
                "s3": "string"
              },
              "establishedCountry": "NLD",
              "establishedDate": "2023-05-25",
              "establishedPlace": "France",
              "estimatedDateTimeOfDelivery": "2023-05-25T10:54:31Z",
              "estimatedDateTimeOfTakingOver": "2023-05-25T10:34:31Z",
              "handlingInstructions": {
                "controlledTemperature": true,
                "temperature": "18"
              },
              "incoterms": "string",
              "mileageUnit": "KM",
              "paymentForCarriage": "10 EUR",
              "pdfTemplateType": "ECMR",
              "placeOfDelivery": {
                "additionalDeliveryNotificationParties": [
                  {
                    "emailAddress": "party@example.com"
                  }
                ],
                "addressComplement": "string",
                "addressLocation": {
                  "latitude": 49.6839305,
                  "longitude": 24.0338217,
                  "accuracy": 5.5,
                  "crs": "EPSG:4326",
                  "provider": "fused"
                },
                "buildingNumber": "11",
                "cityName": "London",
                "contactEmailAddress": "role@example.com",
                "contactFaxNumber": "380631231237",
                "contactName": "Jane Doe",
                "contactNote": "contact note",
                "contactPhoneNumber": "380631231237",
                "countryCode": "NLD",
                "countryName": "France",
                "glnCode": "string",
                "name": "John Doe",
                "postalBox": "PB12",
                "postalCode": "2676NJ",
                "streetName": "Example Str.",
                "submittedAccountEmailAddress": "email@example.com",
                "taxIdentificationNumber": "string",
                "taxIdentificationNumberType": "string",
                "traderIdentificationNumber": "TIN",
                "timeWindow": {
                  "startDateTime": "2023-05-25T10:54:31Z",
                  "endDateTime": "2023-06-25T10:54:31Z"
                }
              },
              "placeOfTakingOver": {
                "additionalDeliveryNotificationParties": [
                  {
                    "emailAddress": "party@example.com"
                  }
                ],
                "addressComplement": "string",
                "addressLocation": {
                  "latitude": 49.6839305,
                  "longitude": 24.0338217,
                  "accuracy": 5.5,
                  "crs": "EPSG:4326",
                  "provider": "fused"
                },
                "buildingNumber": "11",
                "cityName": "London",
                "contactEmailAddress": "role@example.com",
                "contactFaxNumber": "380631231237",
                "contactName": "Jane Doe",
                "contactNote": "contact note",
                "contactPhoneNumber": "380631231237",
                "countryCode": "NLD",
                "countryName": "France",
                "glnCode": "string",
                "name": "John Doe",
                "postalBox": "PB12",
                "postalCode": "2676NJ",
                "streetName": "Example Str.",
                "submittedAccountEmailAddress": "email@example.com",
                "taxIdentificationNumber": "string",
                "taxIdentificationNumberType": "string",
                "traderIdentificationNumber": "TIN",
                "timeWindow": {
                  "startDateTime": "2023-05-25T10:54:31Z",
                  "endDateTime": "2023-06-25T10:54:31Z"
                }
              },
              "references": [
                {
                  "allowCarrierEdit": true,
                  "name": "ref-name",
                  "value": "ref-value",
                  "submitterOnly": false,
                  "technical": false
                }
              ],
              "reimbursementAmount": 1.1,
              "reimbursementCurrency": "EUR",
              "senderInstructions": "Goods should be handled with great care.",
              "signingInspections": {
                "showGoods": true,
                "showRtis": true,
                "showTimes": true,
                "timesConfiguration": {
                  "mandatoryArrivalTime": true,
                  "mandatoryDepartureTime": true,
                  "mandatoryStartLoadingUnloadingTime": true,
                  "mandatoryEndLoadingUnloadingTime": true
                },
                "showReferences": true,
                "showLicensePlates": true,
                "showCommentsAndAttachments": true,
                "commentsAndAttachmentsConfiguration": {
                  "mandatoryCollectionPicture": true,
                  "mandatoryDeliveryPicture": true
                },
                "showTemperatureControl": true,
                "showAddress": true,
                "showCleaning": true
              },
              "specialAgreements": "Goods should be handled with great care.",
              "status": "ISSUED",
              "structuredGoods": [
                {
                  "internalCode": "external_id",
                  "name": "The name",
                  "numberOfPackages": 22,
                  "numberOfPackagesRefusedAtDelivery": 22,
                  "netWeight": 44.44,
                  "netWeightUnit": "KILOGRAM",
                  "references": [
                    {
                      "allowCarrierEdit": true,
                      "name": "ref-name",
                      "value": "ref-value",
                      "submitterOnly": false,
                      "technical": false
                    }
                  ],
                  "commercialValue": 666.777,
                  "currency": "USD",
                  "customMeasurementQuantity": 2.22,
                  "customMeasurementUnit": "inch",
                  "methodOfPackaging": "Pallets",
                  "statisticalNumber": 123,
                  "tareWeight": 44.44,
                  "tareWeightUnit": "KILOGRAM",
                  "volume": 0,
                  "volumeUnit": "LITRE",
                  "weight": 44.44,
                  "weightUnit": "KILOGRAM",
                  "idtfCode": "78788",
                  "eanCode": "EAN_CODE",
                  "natureOfGoods": "Nature of the goods",
                  "type": "GOOD",
                  "commodityCode": "string",
                  "loadingMeters": 88.88,
                  "shortName": "Short name of the goods",
                  "ssccCode": "SSCC-code"
                }
              ],
              "structuredGoodsInfo": {
                "totalNumberOfPackages": 123,
                "totalCustomMeasurementQuantity": 88.88,
                "totalCustomMeasurementUnit": "83.38",
                "totalGrossWeight": 77.33,
                "totalGrossWeightUnit": "KILOGRAM",
                "totalNetWeight": 77.33,
                "totalNetWeightUnit": "KILOGRAM",
                "totalTareWeight": 77.33,
                "totalTareWeightUnit": "KILOGRAM",
                "totalVolume": 77.33,
                "totalVolumeUnit": "LITRE",
                "totalCommercialValue": 555.55,
                "totalCommercialValueCurrency": "USD",
                "totalLoadingMeters": 88.88,
                "emergencyPhoneNumber": "380631231237",
                "emergencyContactName": "John Doe",
                "sealNumbers": "SEAL",
                "europeanOrganicCertificationBodyCode": "string"
              },
              "subsequentCarriers": [
                {
                  "additionalDeliveryNotificationParties": [
                    {
                      "emailAddress": "party@example.com"
                    }
                  ],
                  "addressComplement": "string",
                  "addressLocation": {
                    "latitude": 49.6839305,
                    "longitude": 24.0338217,
                    "accuracy": 5.5,
                    "crs": "EPSG:4326",
                    "provider": "fused"
                  },
                  "buildingNumber": "11",
                  "cityName": "London",
                  "contactEmailAddress": "role@example.com",
                  "contactFaxNumber": "380631231237",
                  "contactName": "Jane Doe",
                  "contactNote": "contact note",
                  "contactPhoneNumber": "380631231237",
                  "countryCode": "NLD",
                  "countryName": "France",
                  "glnCode": "string",
                  "name": "John Doe",
                  "postalBox": "PB12",
                  "postalCode": "2676NJ",
                  "streetName": "Example Str.",
                  "submittedAccountEmailAddress": "email@example.com",
                  "taxIdentificationNumber": "string",
                  "taxIdentificationNumberType": "string",
                  "traderIdentificationNumber": "TIN",
                  "licensePlateData": {
                    "licensePlates": [
                      {
                        "distanceDriven": {
                          "mileageAtArrival": 2288.22,
                          "mileageAtDeparture": 3388.22,
                          "mileageUnit": "KM",
                          "traversedDistance": 123.12
                        },
                        "licensePlateNumber": "NF-123-XC",
                        "vehicleType": "TRUCK"
                      }
                    ]
                  },
                  "permitNumber": "PN123"
                }
              ],
              "timeWindowOfDelivery": {
                "startDateTime": "2023-05-25T10:54:31Z",
                "endDateTime": "2023-06-25T10:54:31Z"
              },
              "timeWindowOfTakingOver": {
                "startDateTime": "2023-05-25T10:54:31Z",
                "endDateTime": "2023-06-25T10:54:31Z"
              },
              "transportConditions": "AVC2002",
              "transportReference": "T_REF",
              "type": "WAYBILL"
            }
          ]
        }
      }
    },
    "responses": {
      "BadRequest": {
        "description": "Bad request",
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/ApiErrors"
            },
            "examples": {
              "default": {
                "$ref": "#/components/examples/bad-request"
              }
            }
          }
        }
      },
      "Unauthorized": {
        "description": "Unauthorized",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ApiErrors"
            },
            "examples": {
              "default": {
                "$ref": "#/components/examples/unauthorized"
              }
            }
          }
        }
      },
      "ResourceNotFound": {
        "description": "Resource not found"
      },
      "InvalidCredentials": {
        "description": "Unauthorized",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ApiErrors"
            },
            "examples": {
              "default": {
                "$ref": "#/components/examples/invalid-credentials"
              }
            }
          }
        }
      }
    },
    "parameters": {
      "driverId": {
        "name": "driverId",
        "in": "path",
        "example": "1231232",
        "description": "The id of the driver.",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "freightDocumentId": {
        "name": "freightDocumentId",
        "in": "path",
        "example": "1231232",
        "description": "The id of the freight document.",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "pdfTemplateType": {
        "name": "pdfTemplateType",
        "in": "path",
        "description": "The format of freight document PDF.",
        "required": true,
        "schema": {
          "type": "string",
          "enum": [
            "ECMR",
            "EUROPEENNE",
            "CARTA_DE_PORTE",
            "NAKLADNI_LIST_CZ",
            "LIEFERSCHEIN"
          ]
        }
      }
    }
  },
  "x-tagGroups": [
    {
      "name": "❤️ Heartbeat",
      "tags": [
        "heartbeat"
      ]
    },
    {
      "name": "oauth",
      "tags": [
        "oauth"
      ]
    },
    {
      "name": "👤 Accounts",
      "tags": [
        "accounts",
        "notifications",
        "delegates",
        "subaccounts",
        "partners",
        "vehicles",
        "drivers",
        "logo",
        "subscriptions"
      ]
    },
    {
      "name": "📄 Freight Documents",
      "tags": [
        "freight document",
        "delegate",
        "document attachments",
        "references",
        "document subscriptions",
        "roles",
        "events",
        "times",
        "access codes"
      ]
    },
    {
      "name": "Batches",
      "tags": [
        "freight documents"
      ]
    },
    {
      "name": "Attachments",
      "tags": [
        "attachments"
      ]
    },
    {
      "name": "Countries and Currencies",
      "tags": [
        "iso"
      ]
    },
    {
      "name": "Terms and conditions",
      "tags": [
        "terms and conditions"
      ]
    },
    {
      "name": "Email token",
      "tags": [
        "email token"
      ]
    },
    {
      "name": "Dangerous goods",
      "tags": [
        "adr"
      ]
    },
    {
      "name": "Schemas",
      "tags": [
        "schemas"
      ]
    }
  ]
}
